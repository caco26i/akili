/*!
 * Akili is a javascript framework
 * 
 * const Akili = makeItEasy(js + html);
 * 
 * @version 1.0.19
 * @author Alexandr Balasyan <mywebstreet@gmail.com>
 * {@link http://akilijs.com}
 * {@link https://github.com/ortexx/akili}
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Akili=t():e.Akili=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=R(n(3)),a=R(n(13)),s=R(n(6)),u=R(n(14)),l=R(n(15)),c=R(n(16)),f=R(n(5)),h=R(n(17)),_=R(n(18)),p=R(n(19)),d=R(n(20)),v=R(n(21)),y=R(n(22)),m=R(n(23)),b=R(n(24)),g=R(n(25)),w=R(n(26)),k=R(n(27)),O=R(n(11)),P=R(n(2)),j=R(n(28)),S=R(n(7)),A=R(n(8)),E=R(n(4)),T=R(n(12)),C=R(n(9)),L=R(n(1)),x=R(n(10));function R(e){return e&&e.__esModule?e:{default:e}}var M={options:{debug:!0},__init:null,__root:null,__components:{},__aliases:{},__scopes:{},__storeLinks:{},__window:{},__tags:{},__isolation:null,__evaluation:null,__wrapping:!1,__rootOuterHTML:"",__onError:function(){return M.triggerInit(!1)},htmlBooleanAttributes:["disabled","contenteditable","hidden"],components:{},services:{}};M.Component=i.default,M.EventEmitter=A.default,M.Scope=S.default,M.utils=L.default,M.globals=x.default,M.components.A=j.default,M.components.Audio=m.default,M.components.Content=_.default,M.components.For=s.default,M.components.Embed=y.default,M.components.If=a.default,M.components.Include=p.default,M.components.Input=l.default,M.components.Iframe=d.default,M.components.Image=v.default,M.components.Object=k.default,M.components.Radio=c.default,M.components.Route=O.default,M.components.Select=u.default,M.components.Source=w.default,M.components.Text=f.default,M.components.Textarea=h.default,M.components.Track=g.default,M.components.Url=P.default,M.components.Video=b.default,M.services.request=E.default,M.services.router=T.default,M.services.store=C.default,M.define=function(){j.default.define(),m.default.define(),_.default.define(),i.default.define(),y.default.define(),s.default.define(),p.default.define(),d.default.define(),v.default.define(),l.default.define(),a.default.define(),k.default.define(),c.default.define(),O.default.define(),u.default.define(),w.default.define(),h.default.define(),g.default.define(),b.default.define()},M.clearGlobals=function(){for(var e in x.default)delete x.default[e];for(var t in this.__window.Element.prototype)Element.prototype[t]=this.__window.Element.prototype[t];for(var n in this.__window.Array.prototype)Array.prototype[n]=this.__window.Array.prototype[n];for(var r in this.options.globals)this.options.globals[r]=this.unwrap(this.options.globals[r]);window.setTimeout=this.__window.setTimeout,window.setInterval=this.__window.setInterval,window.Promise=this.__window.Promise,window.removeEventListener("error",this.__onError)},M.joinBindingKeys=function(e){return e.map((function(e){return e.toString()})).join(".")},M.addScope=function(e){if(this.__scopes[e.__name])throw new Error("Scope name "+e.__name+" already exists");this.__scopes[e.__name]=e},M.getScope=function(e){return this.__scopes[e]},M.removeScope=function(e){delete this.__scopes[e]},M.getAkiliParents=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=[];function r(e){e.parentNode&&(e.parentNode.__akili&&(n.push(e.parentNode),!t)||r(e.parentNode))}return r(e),t?n:n[0]},M.setTemplate=function(e,t){return t=t.replace(/\${(((?!\${)\s*this\.__content\s*)*)}/,e.innerHTML),e.innerHTML=t,e.innerHTML},M.createScopeName=function(){var e=this;return L.default.createRandomString(16,(function(t){return!!e.__scopes[t]}))},M.isolate=function(e){if(this.__isolation)return e();this.__isolation={};var t=e(),n=[];for(var r in this.__isolation)n.push(this.__isolation[r]);this.__isolation=null;for(var o=0,i=n.length;o<i;o++){var a=n[o],s=L.default.getPropertyByKeys(a.keys,a.component.__scope);a.component.__isResolved&&a.component.__triggerStoreAndAttr(a.keys),a.component.__evaluateByKeys(a.keys,s,a.isDeleted)}return t},M.unevaluate=function(e){var t,n=this.__evaluation;return this.__evaluation=null,t=e(),this.__evaluation=n,t},M.wrapping=function(e){if(this.__wrapping)return e();this.__wrapping=!0;var t=e();return this.__wrapping=!1,t},M.unisolate=function(e){var t,n=this.__isolation;return this.__isolation=null,t=e(),this.__isolation=n,t},M.nextTick=function(e){return new Promise((function(t){return setTimeout((function(){return Promise.resolve(e()).then(t)}))}))},M.initialize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.recompile,r=e.__akili;if(r)return n?(r.__recompile(!0===n?{}:n),r):void 0;var o=e===this.__root,i=L.default.toDashCase(e.getAttribute("component")||e.tagName.toLowerCase()),a=this.__components[i];e:if(!a){var s=Object.keys(this.__aliases);if(!s.length)break e;var u=s.join(",");if(!e.matches(u))break e;for(var l=0,c=s.length;l<c;l++){var f=s[l];if(e.matches(f)){a=this.__components[this.__aliases[f]];break}}}return!a&&!o||(a||(a=this.Component),a.matches&&!e.matches(a.matches)||(r=new a(e,{})).__cancelled||M.getAkiliParents(e).find((function(e){return e.__akili.__prevent})))?void 0:(r.__create(),r)},M.compile=function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{recompile:!1},r=[];if(window.AKILI_SSR)for(var o=e.querySelectorAll("[no-ssr]"),i=0,a=o.length;i<a;i++)o[i].remove();var s=function e(o){var i=t.initialize(o,n),a=o.children;i&&r.push(i);for(var s=0,u=a.length;s<u;s++){e(a[s])}};s(e);for(var u=[],l=0,c=r.length;l<c;l++){var f=r[l];u.push(f.__compile())}return Promise.all(u).then((function(){for(var e=[],t=r.length-1;t>=0;t--){var n=r[t];e.push(n.__resolve())}return Promise.all(e)}))},M.component=function(e,t){if(e=e.toLowerCase(),!t)return this.__components[e]||null;this.__components[e]&&M.options.debug&&console.warn("Component "+e+" already was added"),this.__components[e]=t},M.removeComponent=function(e){delete this.__components[e]},M.alias=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(!(t=t.toLowerCase()))return this.__aliases[e]||null;this.__aliases[e]&&M.options.debug&&console.warn("Alias with selector "+e+" already was added"),this.__aliases[e]=t},M.removeAlias=function(e){delete this.__aliases[e]},M.isolateArrayPrototype=function(){var e=this;this.__window.Array={prototype:{}};for(var t=Object.getOwnPropertyNames(Array.prototype),n=function(n,r){var o=t[n],i=Array.prototype[o];if("function"!=typeof i||"constructor"==o)return"continue";e.__window.Array.prototype[o]=i,Array.prototype[o]=function(){var e=this,t=arguments;return M.unevaluate((function(){return e.__isProxy?M.isolate((function(){return i.apply(e,t)})):i.apply(e,t)}))}},r=0,o=t.length;r<o;r++)n(r)},M.isolateWindowFunctions=function(){this.__window.setTimeout=setTimeout,this.__window.setInterval=setInterval,this.__window.Promise=window.Promise,window.setTimeout=this.createCallbackIsolation(window.setTimeout,0),window.setInterval=this.createCallbackIsolation(window.setInterval,0),window.AKILI_SSR||(window.Promise.constructor=this.createCallbackIsolation(window.Promise.constructor),window.Promise.prototype.then=this.createCallbackIsolation(window.Promise.prototype.then,[0,"last"]),window.Promise.prototype.catch=this.createCallbackIsolation(window.Promise.prototype.catch))},M.isolateGlobals=function(){x.default.__target.utils=this.wrap(L.default),this.isolateEvents(),this.isolateArrayPrototype(),this.isolateWindowFunctions()},M.isolateEvents=function(){this.__window.Element={prototype:{}},window.AKILI_SSR||(this.__window.Element.prototype.addEventListener=Element.prototype.addEventListener,this.__window.Element.prototype.removeEventListener=Element.prototype.removeEventListener,this.__window.Element.prototype.remove=Element.prototype.remove,Element.prototype.remove=function(){return delete this.__akiliListeners,M.__window.Element.prototype.remove.apply(this,arguments)},Element.prototype.addEventListener=function(e,t){var n=[].slice.call(arguments);return this.__akiliListeners||(this.__akiliListeners={}),this.__akiliListeners[e]||(this.__akiliListeners[e]=[]),"function"==typeof t&&(n[1]=function(){var e=this,n=arguments;return M.isolate((function(){return t.apply(e,n)}))}),this.__akiliListeners[e].push({link:t,fn:n[1]}),M.__window.Element.prototype.addEventListener.apply(this,n)},Element.prototype.removeEventListener=function(e,t){var n=[].slice.call(arguments);this.__akiliListeners||(this.__akiliListeners={}),this.__akiliListeners[e]||(this.__akiliListeners[e]=[]);for(var r=0,o=this.__akiliListeners[e].length;r<o;r++){var i=this.__akiliListeners[e][r];if(i.link===t){this.__akiliListeners[e].splice(r,1),n[1]=i.fn,r--,o--;break}}return this.__akiliListeners[e].length||delete this.__akiliListeners[e],M.__window.Element.prototype.removeEventListener.apply(this,n)})},M.createCallbackIsolation=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"last";return function(){var n=[].slice.call(arguments);!Array.isArray(t)&&(t=[t]);for(var r=function(e,r){var o=t[e],i=o,a=n[o];if("last"==o&&(i=n.length-1,a=n[i]),"function"!=typeof a)return"continue";a.__isolated||(n[i]=function(){var e=arguments;return M.isolate((function(){return a.apply(a,e)}))},Object.defineProperty(n[i],"__isolated",{enumerable:!1,value:a}))},o=0,i=t.length;o<i;o++)r(o,i);return e.apply(this,n)}},M.wrap=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e;if("function"==typeof e){if((e=this.wrapFunction(e,t))===n)return e}else if(!e||"object"!=(void 0===e?"undefined":o(e))||Array.isArray(e))return e;for(var i=Object.getOwnPropertyNames(e),a=0,s=i.length;a<s;a++){var u=i[a],l=Object.getOwnPropertyDescriptor(e,u);l.configurable&&l.writable&&(t.reverse?Object.defineProperty(e,u,r({},l,{value:e[u].__akili||e[u]})):Object.defineProperty(e,u,r({},l,{value:this.wrap(e[u],t)})))}return e},M.unwrap=function(e){return this.wrap(e,{reverse:!0})},M.wrapFunction=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(e.__akili)return e;var n=function(){var n=this,r=arguments;return t.tag&&M.__evaluation&&M.addTag(t.tag,M.__evaluation.node),M.wrapping((function(){return e.apply(n,r)}))},r=Object.keys(e);n.prototype=e.prototype;for(var o=0,i=r.length;o<i;o++){var a=r[o];n[a]=e[a]}return Object.defineProperty(n,"__akili",{enumerable:!1,value:e}),n},M.addTag=function(e,t){this.hasTag(e,t)||(this.__tags[t.__name]||(this.__tags[t.__name]={}),this.__tags[t.__name][e]||(this.__tags[t.__name][e]=[]),this.__tags[t.__name][e].push({node:t}))},M.hasTag=function(e,t){if(!t){for(var n in this.__tags)for(var r in this.__tags[n])if(r==e)return!0;return!1}return!!this.__tags[t.__name]&&!!this.__tags[t.__name][e]},M.removeTag=function(e,t){if("object"==(void 0===e?"undefined":o(e))&&(t=e,e=void 0),e)if(t){for(var n in this.__tags[t.__name])n==e&&delete this.__tags[t.__name][n];Object.keys(this.__tags[t.__name]).length||delete this.__tags[t.__name]}else for(var r in this.__tags){for(var i in this.__tags[r])i==e&&delete this.__tags[r][i];Object.keys(this.__tags[r]).length||delete this.__tags[r]}else delete this.__tags[t.__name]},M.triggerTag=function(e){for(var t in this.__tags)for(var n in this.__tags[t])if(n==e)for(var r=this.__tags[t][n],o=0,i=r.length;o<i;o++){var a=r[o];a.node.__component.__evaluateNode(a.node,!1)}},M.handleErrors=function(){window.addEventListener("error",this.__onError)},M.triggerInit=function(e){M.__init=e,window.dispatchEvent(new CustomEvent("akili-init",{detail:e}))},M.init=function(e){var t=this;if(e=e||document.body,this.__rootOuterHTML=e.outerHTML,!(e instanceof Element))throw new Error("Root element must be an html element");if(e===document.documentElement)throw new Error('"html" can\'t be the root element');return this.__root=e,window.AKILI_SERVER?(M.initServerSideHtml(window.AKILI_SERVER.html),M.initServerSideRequestCache(window.AKILI_SERVER.requestCache)):window.AKILI_CLIENT={html:this.prepareServerSideHtml()},this.compile(this.__root).then((function(){if(T.default.__init)return T.default.changeState({init:!0})})).then((function(){window.AKILI_CLIENT&&(window.AKILI_CLIENT.requestCache=t.prepareServerSideRequestCache()),t.triggerInit(!0)})).catch((function(e){throw t.triggerInit(!1),e}))},M.deinit=function(){for(var e in this.__root&&(this.__root.outerHTML=this.__rootOuterHTML),this.__scopes){var t=this.__scopes[e].__component;t&&t.remove()}this.__rootOuterHTML="",this.__init=null,this.__root=null,this.__scopes={},this.__storeLinks={},this.__tags={}},M.destroy=function(){this.deinit(),this.clearGlobals();for(var e=Object.keys(C.default.__target),t=0,n=e.length;t<n;t++)delete C.default.__target[e[t]];for(var r in T.default.__init&&T.default.deinit(),delete window.AKILI_SERVER,delete window.AKILI_CLIENT,delete window.AKILI_SSR,M)delete M[r];delete window.Akili},M.initServerSideHtml=function(e){for(var t=this.__root.attributes.length-1;t>=0;t--)this.__root.removeAttribute(this.__root.attributes[t].name);var n=(new DOMParser).parseFromString(e,"text/html").querySelector(this.__root===document.body?"body":"body > *");this.__root.innerHTML=n.innerHTML;for(var r=n.attributes.length-1;r>=0;r--){var o=n.attributes[r];this.__root.setAttribute(o.name,o.value)}},M.initServerSideRequestCache=function(e){var t=function(e,t){for(var n in t)e.__cache[n]=t[n]};for(var n in e){t("__main"===n?E.default:E.default.__instances[n],e[n])}},M.prepareServerSideHtml=function(){return this.__root.outerHTML},M.prepareServerSideRequestCache=function(){var e={__main:E.default.__cache};for(var t in E.default.__instances)e[t]=E.default.__instances[t].__cache;return e},t.default=M,window.Akili=M,M.define(),M.handleErrors(),M.isolateGlobals()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=n(8),s=(r=a)&&r.__esModule?r:{default:r};var u={class:function(e){if(!e||"object"!==(void 0===e?"undefined":i(e)))return"";for(var t=[],n=Object.keys(e),r=0,o=n.length;r<o;r++){var a=n[r];e[a]&&t.push(a)}return t.join(" ")},style:function(e){if(!e||"object"!==(void 0===e?"undefined":i(e)))return"";for(var t=[],n=Object.keys(e),r=0,o=n.length;r<o;r++){var a=n[r],s=e[a];s&&t.push(this.toDashCase(a)+":"+s)}return t.join(";")},split:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=[],o="";if(!t)return e.split("");if(t instanceof RegExp)return e.split(t);if(-1==e.indexOf(t))o=e;else for(var i=e.split(""),a="",s=0,u=i.length;s<u;s++){var l=i[s],c=n.indexOf(l);c>-1&&(!a||a==l)&&(a=a?"":n[c]),l!=t||a?o+=l:(r.push(o),o="")}return o&&r.push(o),r},filter:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=[];if(n&&!Array.isArray(n)&&(n=[n]),"function"!=typeof t){var o=t?(t+"").toLowerCase():"";t=function(e){return(e?(e+"").toLowerCase():"").match(o)}}for(var i=0,a=e.length;i<a;i++){var s=e[i],u=!1;if(!n&&t(s))u=!0;else if(n)for(var l=0,c=n.length;l<c;l++){var f=n[l],h=(f=Array.isArray(f)?f:[f])?this.getPropertyByKeys(f,s):s;t(h)&&(u=!0)}u&&r.push(s)}return r},sort:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];e=e.slice(),!0===n?(n=[],r=[!0]):!1===n&&(n=[],r=[!1]),Array.isArray(n)||(n=[n]),Array.isArray(r)||(r=[r]);var o=n.length;return e.sort((function(e,i){var a=0,s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return e instanceof Date&&(e=e.getTime()),t instanceof Date&&(t=t.getTime()),e>t?n?-1:1:e<t?n?1:-1:0};return o?function u(){if(a>=o)return 0;var l=n[a];Array.isArray(l)||(l=[l]);var c=t.getPropertyByKeys(l,e),f=t.getPropertyByKeys(l,i),h=s(c,f,!1===r[a]);return 0!==h?h:(a++,u())}():s(e,i,!1===r[a])})),e},includeKeys:function(e,t){for(var n={},r=Object.keys(e),o=0,i=r.length;o<i;o++){var a=r[o];-1!=t.indexOf(a)&&(n[a]=e[a])}return n},excludeKeys:function(e,t){for(var n={},r=Object.keys(e),o=0,i=r.length;o<i;o++){var a=r[o];-1==t.indexOf(a)&&(n[a]=e[a])}return n},isScopeProxy:function(e){return!(!e||"object"!=(void 0===e?"undefined":i(e))||!e.__isProxy)},isPlainObject:function(e){return!(!e||"object"!=(void 0===e?"undefined":i(e))||e.constructor!=Object&&e.constructor!=Array)},copy:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!=(void 0===e?"undefined":i(e))||!e)return e;n=o({nested:!0,enumerable:!0,plain:!1},n);var r=function e(r){if(n.plain&&!t.isPlainObject(r))return r;r=t.isScopeProxy(r)?r.__target:r;for(var a=n.enumerable?Object.keys(r):Object.getOwnPropertyNames(r),s=Array.isArray(r)?[]:{},u=0,l=a.length;u<l;u++){var c=a[u],f=r[c];f=f&&"object"==(void 0===f?"undefined":i(f))&&n.nested?e(f):f,r.propertyIsEnumerable(c)?s[c]=f:Object.defineProperty(s,c,o({},Object.getOwnPropertyDescriptor(r,c),{value:f}))}return s};return r(e)},makeAttributeValue:function(e){return!1===e||null==e?"":e instanceof s.default?"[object Event]":"function"==typeof e?"[object Function]":"object"==(void 0===e?"undefined":i(e))?Object.prototype.toString.call(e):e+""},compare:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if("function"==typeof e&&"function"==typeof t)return e.toString()===t.toString();if("object"==(void 0===e?"undefined":i(e))&&"object"==(void 0===t?"undefined":i(t))){if(null===e||null===t)return e===t;var r=function(e){for(var t=Array.isArray(e)?[]:{},r=n.enumerable?Object.keys(e):Object.getOwnPropertyNames(),o=0,i=r.length;o<i;o++){var a=r[o];void 0!==e[a]&&(t[a]=e[a])}return t};(n=o({enumerable:!0,ignoreUndefined:!0},n)).ignoreUndefined&&(e=r(e),t=r(t));var a=n.enumerable?Object.keys(e):Object.getOwnPropertyNames(),s=n.enumerable?Object.keys(t):Object.getOwnPropertyNames();if(a.length!=s.length)return!1;e=this.isScopeProxy(e)?e.__target:e,t=this.isScopeProxy(t)?t.__target:t;for(var u=0,l=a.length;u<l;u++){var c=a[u];if(!this.compare(e[c],t[c]))return!1}return!0}return e===t},createHash:function(e){"object"==(void 0===e?"undefined":i(e))&&(e=JSON.stringify(e)),"string"!=typeof e&&(e="⠀"+String(e));for(var t=0,n=0;n<e.length;n++){t=(t<<5)-t+e.charCodeAt(n),t&=t}return t+""},encodeHtmlEntities:function(e){var t,n=document.createElement("div");return n.textContent=e,t=n.innerHTML,n.remove(),n=null,t},decodeHtmlEntities:function(e){var t,n=document.createElement("textarea");return n.innerHTML=e,t=n.value,n.remove(),n=null,t},toCamelCase:function(e){return e.replace(/\W+(.)/g,(function(e,t){return t.toUpperCase()}))},capitalize:function(e){return e[0].toUpperCase()+e.slice(1)},toDashCase:function(e){return e.replace(/([A-Z])/g,(function(e,t){return"-"+t.toLowerCase()}))},getPropertyByKeys:function(e,t){var n=void 0,r=e.length,o=0;return e.reduce((function(e,t){return o++,"object"!=(void 0===e?"undefined":i(e))?e:void 0===e[t]?{}:(o==r&&(n=e[t]),e[t])}),t),n},hasPropertyByKeys:function(e,t){var n=!1,r=e.length,o=0;return e.reduce((function(e,t){return o++,e&&"object"==(void 0===e?"undefined":i(e))?e.hasOwnProperty(t)?(o==r&&(n=e.hasOwnProperty(t)),e[t]):{}:!!e}),t),n},setPropertyByKeys:function(e,t,n){var r=void 0,o=e.length,a=0;return e.reduce((function(e,t){if(a++,e&&"object"==(void 0===e?"undefined":i(e)))return e.hasOwnProperty(t)||(e[t]=void 0),e[t]=n(a==o,e[t]),r=e,e[t]}),t),r},deletePropertyByKeys:function(e,t,n){var r=e.length,o=void 0,a=0;return e.reduce((function(e,t){if(a++,e&&"object"==(void 0===e?"undefined":i(e)))return e.hasOwnProperty(t)?a==r?(o=e[t],(!n||n(o))&&delete e[t],o):e[t]:{}}),t),o},getEnumerablePropertyTarget:function(e,t){return function e(n){if(n.propertyIsEnumerable(t))return n;var r=Object.getPrototypeOf(n);return r?e(r):null}(e)},getOwnPropertyTarget:function(e,t){return function e(n){if(n.hasOwnProperty(t))return n;var r=Object.getPrototypeOf(n);return r?e(r):null}(e)},createRandomString:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=Math.random().toString(36).substring(2,e+2),r=Date.now(),o="",i=0,a=n.length;i<a;i++)o+=r%i?n[i]:n[i].toUpperCase();return t&&t(o)?this.createRandomString(e,t):o},debounce:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return function(){clearTimeout(e.__debounceTimeout),e.__debounceTimeout=setTimeout((function(){e(),clearTimeout(e.__debounceTimeout),delete e.__debounceTimeout}),t)}}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(3);var a=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.urlAttribute="src",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"compiled",value:function(){this.attr("url",this.setUrl)}},{key:"setUrl",value:function(e){this.attrs[this.urlAttribute]=e}}]),t}(((r=i)&&r.__esModule?r:{default:r}).default);a.matches="[url]",t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.systemAttributes=t.evaluationRegexGlobal=t.evaluationRegex=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=h(n(0)),s=h(n(7)),u=h(n(4)),l=h(n(9)),c=h(n(10)),f=h(n(1));function h(e){return e&&e.__esModule?e:{default:e}}function _(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var p=t.evaluationRegex=/\${(((?!\${).)*)}/,d=t.evaluationRegexGlobal=new RegExp(p.source,"g"),v=t.systemAttributes=["component","scope","no-ssr"],y=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof Element))throw new Error("You must pass an html element to the component constructor");this.__isMounted=!1,this.__isCompiled=!1,this.__isResolved=!1,this.__isRemoved=!1,this.__cancelled=!1,this.__prevent=!1,this.__bindings={},this.__evaluatingEvent=null,this.__recompiling=null,this.__compiling=null,this.__disableProxy={},this.__disableStoreKeys={},this.__disableAttrKeys={},this.__children=[],this.__parent=null,this.__parents=[],this.__content="",this.__attrs={},this.__attrLinks={},this.__storeLinks={},this.__attributeOf=null,this.__evaluationComponent=this,this.scope=n,this.el=t}return i(e,null,[{key:"define",value:function(){a.default.component("component",e)}},{key:"parse",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=[],o=[],i=f.default.split(t,";",['"',"'","`"]);for(var a in i[i.length-1]="return "+i[i.length-1],n)r.push(a),o.push(n[a]);return(new(Function.prototype.bind.apply(Function,[null].concat(r,[""+i.join("; ")])))).apply(e,o)}}]),i(e,[{key:"__createCompilationOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o({checkChanges:!1,setEvents:!0,setParents:!0,setBooleanAttributes:!0,defineAttributes:!0},e)}},{key:"__createRecompilationOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o({},this.__createCompilationOptions(),{setEvents:!1,setParents:!1,defineAttributes:!1},e)}},{key:"__recompile",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.__isMounted=!1,this.__recompiling=!0,this.__evaluationComponent.__disableProxy={},this.__compiling=this.__createRecompilationOptions(e),this.__compiling.setEvents&&this.__setEvents(),this.__compiling.setParents&&this.__setParents(),this.__compiling.setBooleanAttributes&&this.__setBooleanAttributes(),this.__compiling.defineAttributes&&this.__defineAttributes()}},{key:"__create",value:function(){var e=this;this.__compiling=this.__createCompilationOptions(),this.__initialize(),this.__setEvents(),this.__setParents(),this.__setBooleanAttributes(),this.__defineAttributes(),a.default.isolate((function(){return e.created(e.attrs)}))}},{key:"__compile",value:function(){var e=this,t=this.__controlAttributes||!this.__evaluationParent,n=Promise.resolve();this.__attributeOf=t?this:this.__evaluationParent.__akili,(!this.__recompiling||this.__compiling.newParent||this.__controlAttributes)&&this.__interpolateAttributes(this.el,this.__attributeOf);!function t(n,r){for(var o=0,i=n.length;o<i;o++){var a=n[o];3==a.nodeType&&e.__initializeNode(a,r)?e.__evaluateNode(a,!!e.__compiling&&e.__compiling.checkChanges):1!=a.nodeType||a.__akili||(e.__interpolateAttributes(a),t(a.childNodes,a))}}(this.el.childNodes,this.el),this.__isMounted=!0;var r=void 0;return this.__recompiling?r=a.default.isolate((function(){e.attrs.onRecompiled&&e.attrs.onRecompiled.trigger(void 0,{bubbles:!1}),e.recompiled()})):(r=a.default.isolate((function(){return e.attrs.onCompiled&&e.attrs.onCompiled.trigger(void 0,{bubbles:!1}),e.compiled()})),this.constructor.templateUrl&&(n=u.default.get(this.constructor.templateUrl,{cache:this.constructor.templateCache}).then((function(t){return e.el.innerHTML=e.__content,a.default.setTemplate(e.el,t.data),delete e.__content,a.default.compile(e.el,{recompile:!0})})))),this.__recompiling=null,this.__compiling=null,n.then((function(){return e.__isCompiled=!0,r}))}},{key:"__resolve",value:function(){var e=this;return this.__isResolved?Promise.resolve():(this.attrs.onResolved&&this.attrs.onResolved.trigger(void 0,{bubbles:!1}),Promise.resolve(a.default.isolate((function(){return e.resolved()}))).then((function(t){return e.__isResolved=!0,t})))}},{key:"__initialize",value:function(){var e=a.default.getAkiliParents(this.el,!1),t=this.constructor.scope||a.default.Scope,n=void 0,r=a.default.__root===this.el;this.el.__akili=this,e?n=new t(this.el.getAttribute("scope")||a.default.createScopeName(),this.el,this):(n=new t(r?"root":a.default.createScopeName(),this.el,this),r&&(a.default.root=this));var o=n,i=Object.assign(n,this.scope),s=this.constructor.controlAttributes,u=this.constructor.events;return this.constructor.template&&a.default.setTemplate(this.el,this.constructor.template),this.constructor.templateUrl&&(this.__content=this.el.innerHTML,this.el.innerHTML=""),this.__scope=o,this.__events=u,this.__controlAttributes=s,a.default.addScope(n),this.scope=this.__nestedObserve(i,[]),!0}},{key:"__setBooleanAttributes",value:function(){var e=this;this.booleanAttributes=[].concat(a.default.htmlBooleanAttributes,this.constructor.booleanAttributes);!function t(n){for(var r=0,o=n.attributes,i=o.length;r<i;r++){var a=o[r];if(-1!=e.booleanAttributes.indexOf(a.nodeName)){if(n.hasAttribute("boolean-"+a.nodeName))continue;n.setAttribute("boolean-"+a.nodeName,n.getAttribute(a.nodeName)||a.nodeName),n.removeAttribute(a.nodeName)}}for(var s=0,u=n.children.length;s<u;s++){var l=n.children[s];l.__akili||t(l)}}(this.el)}},{key:"__setEvents",value:function(){for(var e=0,t=this.__events.length;e<t;e++){var n=this.__events[e];!/^on-/i.test(n)&&(n="on-"+n),this.el.hasAttribute(n)||this.el.setAttribute(n,"")}}},{key:"__setParents",value:function(){var e=a.default.getAkiliParents(this.el);if(e.length){for(var t=this.__parent!==e[0],n=null,r=0,o=e.length;r<o;r++){var i=e[r];if(!i.__akili.constructor.transparent){n=i;break}}this.__compiling.newParent=t,t&&this.__detach(),this.constructor.transparent&&(this.__evaluationComponent=n.__akili),this.__evaluationParent=n,this.__parent=e[0],this.__parents=e,this.scope.__parent=this.__evaluationParent.__akili.scope,!this.__recompiling&&this.__parent.__akili.__addChild(this.el),Object.setPrototypeOf(this.scope,this.__parent.__akili.__scope)}}},{key:"__addChild",value:function(e){this.__children.push(e)}},{key:"__spliceChild",value:function(e){for(var t=0,n=this.__children.length;t<n;t++){this.__children[t]===e&&(this.__children.splice(t,1),t--,n--)}}},{key:"__getParsedExpression",value:function(e){return e}},{key:"__checkEvaluation",value:function(e){if(!Object.keys(e.__properties).length)return!0;for(var t in e.__properties)if(e.__properties.hasOwnProperty(t)){var n=e.__properties[t],r=f.default.getPropertyByKeys(n.keys,n.component.__scope);if(!e.__component.__compareNodePropertyValue(n,r))return!0}return!1}},{key:"__checkNodePropertyChange",value:function(e,t,n){var r=this.__getNodeProperty(e,t);return!r||!e.__component.__compareNodePropertyValue(r,n)}},{key:"__compareNodePropertyValue",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.default.compare(f.default.createHash(t),e.hash,n)}},{key:"__createExceptionMessage",value:function(e,t){var n=e.__component.el.tagName,r=(e.__component.el.getAttribute("component")||n).toLowerCase(),o=e.__element.tagName.toLowerCase(),i=e instanceof window.Attr?e.name.toLowerCase():"",a=[t.message,e.__expression.trim()];return i&&a.push("[attribute "+i+"]"),"Expression error: "+(a=a.concat(["[element "+o+"]","[component "+r+"]"])).join("\n\tat ")}},{key:"__evaluate",value:function(e){var t=this,n=0,i=void 0,s=void 0,u=e.__attributeOf||e.__component;return e.__component.parents((function(e){return e.__prevent})).length?{res:e.__expression}:e instanceof window.Attr||!e.__component.__prevent?{res:e.__expression.replace(d,(function(l,h){n++;var _=void 0,p=[],d={},v={},y=e.__component.__getParsedExpression(h);a.default.__evaluation={node:e,list:[],component:e.__component};try{_=t.constructor.parse(u.__evaluationComponent.scope,y,o({},c.default))}catch(n){throw t.__createExceptionMessage(e,n)}a.default.__evaluation&&(p=a.default.__evaluation.list,a.default.__evaluation.list=null,a.default.__evaluation=null);for(var m=p.length-1;m>=0;m--){var b=p[m],g=b.component.__createKeysHash(b.keys),w=b.component.__createKeysHash(b.parents);if(!b.notBinding&&!d[g]){var k=f.default.getPropertyByKeys(b.parents,b.component.__scope);k&&"object"==(void 0===k?"undefined":r(k))&&(a.default.options.debug&&50==v[w]&&console.warn(["For higher performance, don't loop Proxy arrays/objects inside expression functions, or use Akili.unevaluate() to wrap you code.",""+e.__expression.trim(),'scope property "'+b.parents.join(".")+'"'].join("\n\tat ")),v[w]?v[w]++:v[w]=1),f.default.isScopeProxy(k)&&b.component!==u.__evaluationComponent&&b.component===b.realComponent||(b.component.__bindAndSetProperty(e,b.keys,b.evaluated),d[g]=!0)}}if(e instanceof window.Attr)return s=l,i=_,f.default.makeAttributeValue(_);if("object"==(void 0===_?"undefined":r(_)))try{return JSON.stringify(_)}catch(e){return _}return _})),counter:n,expression:s,attributeValue:i}:{res:e.__expression}}},{key:"__bindAndSetProperty",value:function(e,t,n){var r=this.__getBoundNode(t,e),o=f.default.getPropertyByKeys(t,this.__scope);r||this.__bind(t,{node:e}),this.__setNodeProperty(e,t,o,n)}},{key:"__evaluateNested",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.__scope,o=[];if(n)o.push({keys:e,value:f.default.getPropertyByKeys(e,r)});else for(var i=[],a=0,s=e.length;a<s;a++){var u=e[a],l=void 0;i=[].concat(_(i),[u]),l=f.default.getPropertyByKeys(i,r),o.push({keys:i,value:l})}var c=o.length,h=function(e){for(var n=e.__akili,r=0;r<c;r++){var i=o[r],a=void 0;if(n===t){var s=n.__getBind(i.keys);a=s&&s.__data||[]}else a=n.__getAllBinds(i.keys);if(a&&a.length)for(var u=0,l=a.length;u<l;u++){var h=a[u];if(h&&h.node&&h.node.__initialized&&n.__checkNodePropertyChange(h.node,i.keys,i.value)){n.__disableKeys(i.keys);var _=n.__getNodeProperty(h.node,i.keys);for(var p in _&&_.evaluated&&n.scope.__set(i.keys,i.value,!1,!0),n.__evaluateNode(h.node,!1),h.node.__properties)if(h.node.__properties.hasOwnProperty(p)){var d=h.node.__properties[p],v=f.default.getPropertyByKeys(d.keys,d.component.__scope);d.component.__setNodeProperty(h.node,d.keys,v)}n.__enableKeys(i.keys)}}}return n},p=function e(t){for(var n=0,r=t.length;n<r;n++){e(h(t[n]).__children)}};h(this.el),p(this.__children)}},{key:"__evaluateByKeys",value:function(e,t){var n=this,o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.__getBind(e),a=function e(o,i){for(var a in o)if(o.hasOwnProperty(a)&&!n.__isSystemBindingKey(a)){var s,u=[].concat(i,[a]),l=u.slice(),c=!1,h=o[a];l.shift(),s=f.default.hasPropertyByKeys(l,t),t&&"object"==(void 0===t?"undefined":r(t))&&!s&&(c=!0),h&&"object"==(void 0===h?"undefined":r(h))&&e(h,u),n.__evaluateNested(u,!0),null!==t&&"object"==(void 0===t?"undefined":r(t))&&s||(n.__unbind(u),c&&f.default.deletePropertyByKeys(l,t))}};i&&a(i,[].concat(e)),this.__evaluateNested(e,!1),o&&(this.__unbind(e),o&&f.default.deletePropertyByKeys(e,this.__scope))}},{key:"__evaluateEvent",value:function(e,t,n){var r=p.exec(e.__expression),i=void 0;if(r){this.__evaluatingEvent={el:t,component:this,event:n,node:e},this.__disableProxy={};try{i=this.constructor.parse(this.__evaluationComponent.scope,r[1],o({},c.default,{event:n}))}catch(t){throw this.__createExceptionMessage(e,t)}return this.__evaluatingEvent=null,i}}},{key:"__evaluateNode",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=e instanceof window.Attr?"value":"nodeValue";if(!t||this.__checkEvaluation(e)){var r=this.__evaluate(e),o=r.res,i=r.attributeValue,a=r.expression,s=r.counter;if(e[n]!=o&&(e[n]=o),e instanceof window.Attr){var u=o,l=!1;1==s&&a&&e.__expression==a&&(u=i);var c=e.nodeName.replace(/^boolean-(.+)/i,"$1"),h=f.default.toCamelCase(c);if(c!=e.nodeName&&(l=!0,u=!!u),e.__attributeOn){var _=e.__attributeOn;u=_.__prepareAttributeIn(e,u),_.__disableAttributeSetter=!0,_.attrs[h]=u,_.__disableAttributeSetter=!1,_.__isMounted&&_.__attrTriggerByName(h,u)}else if(l){var p=e.__element;u?p.setAttribute(h,"true"):p.removeAttribute(h)}}}return e[n]}},{key:"__prepareAttributeIn",value:function(e,t){return f.default.copy(t,{plain:!0})}},{key:"__prepareAttributeOut",value:function(e,t){return f.default.copy(t,{plain:!0})}},{key:"__initializeAttribute",value:function(e,t,n){if(e&&-1==v.indexOf(e.nodeName)&&this.__initializeNode(e,t)){var r=e.nodeName.replace(/^on-(.+)/i,"$1"),o=n||this;if(e.__isEvent){if(e.__event)return;var i=new a.default.EventEmitter(r,e,t,o);return e.__hasBindings&&i.bind((function(n){return o.__evaluateEvent(e,t,n)})),e.__event=i,t.setAttribute(e.nodeName,f.default.makeAttributeValue(i)),void(n&&(this.__disableAttributeSetter=!0,this.attrs[f.default.toCamelCase(e.nodeName)]=i,this.__disableAttributeSetter=!1))}n&&(e.__attributeOn=this,e.__attributeOf=o);var s=!!this.__compiling&&this.__compiling.checkChanges;o.__evaluateNode(e,s)}}},{key:"__initializeNode",value:function(e,t){if(e.__initialized)return!0;var n=e instanceof window.Attr,r=e[n?"value":"nodeValue"],o=p.test(r.trim()),i=!!n&&/^boolean-/i.test(e.nodeName),a=!!n&&/^on-(.+)/i.test(e.nodeName);return!!(t.__akili||o||i||a)&&(e.__name=this.__scope.__name+f.default.createRandomString(16),e.__isEvent=a,e.__hasBindings=o,e.__isBoolean=i,e.__expression=r,e.__properties={},e.__attributeOf=null,e.__attributeOn=null,e.__event=null,e.__initialized=!0,e.__component=this,e.__element=t,!0)}},{key:"__deinitializeNode",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e.__initialized&&(e.__event&&e.__event.remove(),e.__hasBindings&&!t.saveBindings&&(this.__unbindByNodes(e),this.__unbindParentsByNodes(e)),a.default.removeTag(e),delete e.__name,delete e.__hasBindings,delete e.__isBoolean,delete e.__isEvent,delete e.__expression,delete e.__properties,delete e.__attributeOf,delete e.__attributeOn,delete e.__event,delete e.__initialized,delete e.__component,delete e.__element)}},{key:"__interpolateAttributes",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=0,r=e.attributes,o=r.length;n<o;n++)this.__initializeAttribute(r[n],e,t)}},{key:"__defineAttributes",value:function(){var e=this,t=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!e.__disableAttributeSetter){var o=e.el.getAttributeNode(t);if(r)return o&&e.__deinitializeNode(o),void e.el.removeAttribute(t);o?(o.value=n,e.__deinitializeNode(o)):(e.el.setAttribute(t,n),o=e.el.getAttributeNode(t)),e.__initializeAttribute(o,e.el,e.__attributeOf)}};this.attrs=new Proxy(this.__attrs,{get:function(e,t){return"__isProxy"==t||e[t]},set:function(n,r,o){var i=f.default.toDashCase(r);return-1!=e.booleanAttributes.indexOf(i)&&(i="boolean-"+i,o?e.el.setAttribute(r,o):e.el.removeAttribute(r)),n[r]=o,t(i,f.default.makeAttributeValue(o)),!0},deleteProperty:function(e,n,r){var o=f.default.toDashCase(n);return t(o,f.default.makeAttributeValue(r),!0),delete e[n],!0}})}},{key:"__observe",value:function(e,t){var n=this;return new Proxy(e,{get:function(o,i){if("__isProxy"==i)return!0;if("__target"==i)return e;if("__component"==i)return n;if("__keys"==i)return t;if(n.__isSystemKey(i))return o[i];if(a.default.__evaluation){var u=[].concat(t,[i]),l=!1,c=!f.default.hasPropertyByKeys(u,n.__scope),h=n,_=u.slice();if(o instanceof s.default){var p=f.default.getOwnPropertyTarget(o,i);p&&p instanceof s.default&&(h=p.__component)}if(a.default.__wrapping&&u.length>1)return o[i];for(var d=a.default.__evaluation.component.parents((function(e){return e instanceof a.default.components.For})),v=0,y=d.length;v<y;v++)for(var m=0,b=u.length;m<b;m++){var g=d[v].data,w=f.default.getPropertyByKeys(_,h.__scope);if(w&&"object"==(void 0===w?"undefined":r(w))&&g===w)return o[i];_.pop()}return i in o?f.default.getEnumerablePropertyTarget(o,i)||(l=!0):o[i]=void 0,n.__bindNode(a.default.__evaluation.list,h,u,t,o[i],l,c),o[i]}return o[i]},set:function(e,r,o){if(n.__isSystemKey(r))return e[r]=o,!0;"function"==typeof e[r]&&(o=a.default.wrapFunction(o));var i=[].concat(t,[r]);if(n.__checkDisablement(i))return e[r]=o,!0;e:if(t.length>0){var s=t.length>1?f.default.getPropertyByKeys(t.slice(0,-1),n.__scope):n.__scope;for(var u in s)if(s.hasOwnProperty(u)&&s[u]&&s[u].__target===e)break e;return e[r]=o,!0}return e[r]=n.__nestedObserve(o,i),n.__isResolved||n.__triggerStoreAndAttr(i),a.default.__isolation?(n.__createIsolationObject(t,r,!1),!0):(n.__isResolved&&n.__triggerStoreAndAttr(i),n.__isMounted&&n.__evaluateByKeys(i,o),!0)},deleteProperty:function(e,r){var o=[].concat(t,[r]);return n.__checkDisablement(o)?(delete e[r],!0):n.__isSystemKey(r)?(delete e[r],!0):(delete e[r],n.__isResolved||n.__triggerStoreAndAttr(o),a.default.__isolation?(n.__createIsolationObject(t,r,!0),!0):(n.__isResolved&&n.__triggerStoreAndAttr(o),n.__evaluateByKeys(o,void 0,!0),!0))}})}},{key:"__triggerStoreAndAttr",value:function(e){for(var t=0,n=e.length;t<n;t++){var r=e.slice(0,n-t),o=a.default.joinBindingKeys(r),i=f.default.getPropertyByKeys(r,this.__scope);this.__storeLinks[o]&&this.__storeTriggerByKeys(r,i),this.__attrLinks[o]&&this.__attrTriggerByKeys(r,i)}}},{key:"__createKeysHash",value:function(e){return this.__scope.__name+"."+a.default.joinBindingKeys(e)}},{key:"__getDisablementTypeStore",value:function(e){return{proxy:"__disableProxy",store:"__disableStoreKeys",attr:"__disableAttrKeys"}[e]}},{key:"__disableKeys",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"proxy";this[this.__getDisablementTypeStore(t)][e?this.__createKeysHash(e):"__all"]=!0}},{key:"__enableKeys",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"proxy";delete this[this.__getDisablementTypeStore(t)][e?this.__createKeysHash(e):"__all"]}},{key:"__checkDisablement",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"proxy",n=this.__getDisablementTypeStore(t);return!!this[n].__all||this[n][this.__createKeysHash(e)]}},{key:"__storeTriggerByKeys",value:function(e,t){if(!this.__checkDisablement(e,"store")){var n=this.__storeLinks[a.default.joinBindingKeys(e)];if(n&&n.length){t=f.default.copy(t,{plain:!0});for(var r=[],o=0,i=n.length;o<i;o++){var s=n[o];s.set&&r.push(this.__storeTriggerByName(s.name,t))}return Promise.all(r)}}}},{key:"__storeTriggerByName",value:function(e,t){var n=this;l.default.__target[e]=t;var r=(a.default.__storeLinks[e]||[]).concat(a.default.__storeLinks["*"]||[]);if(r&&r.length)return r=f.default.sort(r,["date"],!0),a.default.nextTick((function(){for(var o=function(o,i){var s=r[o],u=s.component;if(u.__isRemoved)return"continue";if(u===n)return"continue";if(s.fn)return a.default.unisolate((function(){return s.fn.call(u,t,e)})),"continue";if(!s.get)return"continue";u.__disableKeys(s.keys,"store");var l=f.default.getPropertyByKeys(s.keys,u.__scope);!f.default.compare(l,t)&&u.scope.__set(s.keys,t),u.__enableKeys(s.keys,"store")},i=0,s=r.length;i<s;i++)o(i)}))}},{key:"__storeByKeys",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(n=o({get:!0,set:!0},n),!t)throw new Error('Store link "'+e+'" must have the scope property name');if(!n.get&&!n.set)throw new Error('Store link "'+e+'" must have at least "get" or "set" option as true');Array.isArray(t)||(t=[t]),this.__disableKeys(t,"store"),(l.default.hasOwnProperty(e)||!f.default.hasPropertyByKeys(t,this.__scope))&&this.scope.__set(t,l.default[e]),this.__enableKeys(t,"store");var r=a.default.joinBindingKeys(t),i=void 0;this.__storeLinks[r]||(this.__storeLinks[r]=[]);for(var s=this.__storeLinks[r],u=s.length-1;u>=0;u--){var c=s[u];if(c.component===this&&c.name==e&&c.keyString==r)return c.set=n.set,c.get=n.get,void(c.date=Date.now())}a.default.__storeLinks[e]||(a.default.__storeLinks[e]=[]),i={component:this,name:e,keys:t,keyString:r,date:Date.now(),set:n.set,get:n.get},this.__storeLinks[r].push(i),a.default.__storeLinks[e].push(i)}},{key:"__storeByFunction",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0===r.callOnStart?l.default.__target.hasOwnProperty(e):r.callOnStart;a.default.__storeLinks[e]||(a.default.__storeLinks[e]=[]);for(var i=a.default.__storeLinks[e],s=i.length-1;s>=0;s--){var u=i[s];if(u.component===this&&u.name==e&&u.fn===t)return void(u.date=Date.now())}if(a.default.__storeLinks[e].push({component:this,name:e,fn:t,date:Date.now()}),"*"==e&&!1!==r.callOnStart){for(var c=Object.keys(l.default.__target),f=[],h=function(e,r){var o=c[r],i=l.default.__target[o];f.push(a.default.unisolate((function(){return t.call(n,i,o)})))},_=0,p=c.length;_<p;_++)h(p,_);return Promise.all(f)}if(o)return a.default.unisolate((function(){return t.call(n,l.default[e])}))}},{key:"__unstoreByKeys",value:function(e,t){if(!t)throw new Error('You have to pass the scope property name for store link "'+e+'"');Array.isArray(t)||(t=[t]);var n=a.default.joinBindingKeys(t),r=this.__storeLinks[n];if(r.length){for(var o=r.length-1;o>=0;o--){var i=r[o],s=a.default.__storeLinks[i.name];if(i.component===this&&i.name==e&&i.keyString==n&&(r.splice(o,1),s&&s.length)){for(var u=s.length-1;u>=0;u--){var l=s[u];l.component===this&&l.keyString==n&&s.splice(u,1)}s.length||delete a.default.__storeLinks[e]}}r.length||delete this.__storeLinks[n]}}},{key:"__unstoreByFunction",value:function(e,t){if(a.default.__storeLinks[e]){for(var n=a.default.__storeLinks[e],r=n.length-1;r>=0;r--){var o=n[r];if(o.component===this&&o.name==e&&o.fn===t){n.splice(r,1);break}}n.length||delete a.default.__storeLinks[e]}}},{key:"__attrTriggerByKeys",value:function(e,t){var n=this;if(!this.__checkDisablement(e,"attr")){var r=this.__attrLinks[a.default.joinBindingKeys(e)];if(r&&r.length)return a.default.nextTick((function(){for(var e=0,o=r.length;e<o;e++){var i=r[e];if(!i.fn&&i.set){var a="on"+f.default.capitalize(i.name);n.attrs[a]&&n.attrs[a].trigger(t,{bubbles:!0})}}}))}}},{key:"__attrTriggerByName",value:function(e,t){var n=this,r=(this.__attrLinks[e]||[]).concat(this.__attrLinks["*"]||[]);if(r&&r.length)for(var o=function(o,i){var s=r[o];if(s.fn)return a.default.unisolate((function(){return s.fn.call(n,t,f.default.toDashCase(e))})),"continue";if(!s.get)return"continue";n.__disableKeys(s.keys,"attr");var u=f.default.getPropertyByKeys(s.keys,n.__scope);!f.default.compare(u,t)&&n.scope.__set(s.keys,t),n.__enableKeys(s.keys,"attr")},i=0,s=(r=f.default.sort(r,["date"],!0)).length;i<s;i++)o(i)}},{key:"__attrByKeys",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(n=o({get:!0,set:!0},n),e=f.default.toCamelCase(e),!t)throw new Error('Attribute link "'+e+'" must have the scope property name');Array.isArray(t)||(t=[t]),this.__disableKeys(t,"attr"),(this.attrs.hasOwnProperty(e)||!f.default.hasPropertyByKeys(t,this.__scope))&&this.scope.__set(t,this.attrs[e]),this.__enableKeys(t,"attr");var r=a.default.joinBindingKeys(t);this.__attrLinks[r]||(this.__attrLinks[r]=[]);for(var i=this.__attrLinks[r],s=i.length-1;s>=0;s--){var u=i[s];if(u.name==e&&u.keyString==r)return u.get=n.get,u.set=n.set,void(u.date=Date.now())}this.__attrLinks[r].push({name:e,keys:t,keyString:r,date:Date.now(),set:n.set,get:n.get})}},{key:"__attrByFunction",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e=f.default.toCamelCase(e);var o=void 0===r.callOnStart?this.attrs.hasOwnProperty(e):r.callOnStart;this.__attrLinks[e]||(this.__attrLinks[e]=[]);for(var i=this.__attrLinks[e],s=i.length-1;s>=0;s--){var u=i[s];if(u.name==e&&u.fn===t)return void(u.date=Date.now())}if(this.__attrLinks[e].push({name:e,fn:t,date:Date.now()}),"*"==e&&!1!==r.callOnStart){for(var l=Object.keys(this.__attrs).filter((function(e){return!(n.__attrs[e]instanceof a.default.EventEmitter)})),c=[],h=function(e,r){var o=l[r],i=n.__attrs[o];c.push(a.default.unisolate((function(){return t.call(n,i,f.default.toDashCase(o))})))},_=0,p=l.length;_<p;_++)h(p,_);return Promise.all(c)}if(o)return a.default.unisolate((function(){return t.call(n,n.attrs[e])}))}},{key:"__unattrByKeys",value:function(e,t){if(!t)throw new Error('You have to pass the scope property name for attribute link "'+e+'"');Array.isArray(t)||(t=[t]);var n=a.default.joinBindingKeys(t),r=this.__attrLinks[n];if(r.length){for(var o=r.length-1;o>=0;o--){var i=r[o];i.name==e&&i.keyString==n&&r.splice(o,1)}r.length||delete this.__attrLinks[n]}}},{key:"__unattrByFunction",value:function(e,t){if(this.__attrLinks[e]){for(var n=this.__attrLinks[e],r=n.length-1;r>=0;r--){var o=n[r];if(o.name==e&&o.fn===t){n.splice(r,1);break}}n.length||delete this.__attrLinks[e]}}},{key:"__isSystemKey",value:function(e){return"__"==e||"_"==e[0]&&"_"==e[1]||-1!=["constructor"].indexOf(e)}},{key:"__nestedObserve",value:function(e,t){var n=this;return function e(t,o){if("object"!=(void 0===t?"undefined":r(t))||null===t)return t;if(!(f.default.isPlainObject(t)||f.default.isScopeProxy(t)||t instanceof s.default))return t;var i=t;e:if(t.__isProxy){if(i=t.__target,n.__disableProxyRedefining)break e;t.__component===n&&a.default.joinBindingKeys(o)==a.default.joinBindingKeys(t.__keys)||(t=i=f.default.copy(i,{nested:!1}))}else n.__disableProxyRedefining||t instanceof s.default||(t=i=f.default.copy(i,{nested:!1}));for(var u=Object.keys(i),l=0,c=u.length;l<c;l++){var h=u[l],_=i[h],p=[].concat(o,[h]);i[h]=e(_,p)}return t.__isProxy?t:n.__observe(t,o)}(e,t||[])}},{key:"__createIsolationObject",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e.length?[e[0]]:[t],o=this.__createKeysHash(r);return e.length&&(n=!1),a.default.__isolation[o]||(a.default.__isolation[o]={updatedAt:(new Date).getTime(),component:this,keys:r}),void 0!==n&&(a.default.__isolation[o].isDeleted=n),a.default.__isolation[o]}},{key:"__bindNode",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]&&arguments[5],s=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=a.default.joinBindingKeys(r),l=this;if(e.length&&!i){var c=e.length-1,f=e[c];f.realComponent===this&&f.keysString==u&&(l=f.component),f.keysString==u&&f.component===l&&e.splice(c,1)}e.push({component:l,realComponent:t,keysString:a.default.joinBindingKeys(n),parents:r,keys:n,value:o,evaluated:s,notBinding:i})}},{key:"__isSystemBindingKey",value:function(e){return"__data"==e}},{key:"__getBind",value:function(e){return f.default.getPropertyByKeys(e,this.__bindings)||null}},{key:"__getAllBinds",value:function(e){var t=this.__getBind(e);if(!t)return[];var n=[];return function e(t){for(var r in n=n.concat(t.__data||[]),t)t.hasOwnProperty(r)&&"__data"!=r&&e(t[r])}(t),n}},{key:"__getBoundNode",value:function(e,t){var n=f.default.getPropertyByKeys(e,this.__bindings);if(!n||!n.__data||!n.__data.length)return null;for(var r=0,o=n.__data.length;r<o;r++){var i=n.__data[r];if(i.node===t)return i}return null}},{key:"__setNodeProperty",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=this.__getNodeProperty(e,t),i=f.default.createHash(n);if(o){var a=e.__component.__compareNodePropertyValue(o,n);return o.value=n,o.hash=i,!a}return e.__properties[this.__createKeysHash(t)]={component:this,value:n,hash:i,node:e,keys:t,evaluated:r},!0}},{key:"__getNodeProperty",value:function(e,t){return e.__properties[this.__createKeysHash(t)]||null}},{key:"__deleteNodeProperty",value:function(e,t){var n=this.__scope.__name+"."+a.default.joinBindingKeys(t);delete e.__properties[n]}},{key:"__mapNodes",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n=o({rootAttrs:!0,attrs:!0,node:!0,el:!0},n);var r=function r(o){if(o){if(n.attrs&&(o!==t.el||n.rootAttrs))for(var i=0,a=o.attributes,s=a.length;i<s;i++)e(a[i]);for(var u=o.childNodes.length-1;u>=0;u--){var l=o.childNodes[u];3==l.nodeType?n.node&&e(l):1!=l.nodeType||l.__akili||(r(l),n.el&&e(l))}}};r(this.el)}},{key:"__getAllNodes",value:function(){var e=[];return this.__mapNodes((function(t){return e.push(t)})),e}},{key:"__bind",value:function(e,t){f.default.setPropertyByKeys(e,this.__bindings,(function(e,n){var o={__data:[]};return e?("object"==(void 0===n?"undefined":r(n))&&(o=n),o.__data||(o.__data=[]),o.__data.push(t),o):n||o}))}},{key:"__unbind",value:function(e){var t=f.default.getPropertyByKeys(e,this.__bindings);if(t&&t.__data){for(var n=0,r=t.__data.length;n<r;n++){var o=t.__data[n].node;this.__deleteNodeProperty(o,e)}f.default.deletePropertyByKeys(e,this.__bindings,(function(e){return!(Object.keys(e).length>1)||(e.__data=[],!1)}))}}},{key:"__unbindByNodes",value:function(e){var t=this;e instanceof Node&&(e=[e]);!function n(r,o,i){for(var a=Object.keys(r),s=0,u=a.length;s<u;s++){var l=a[s];if("__data"==l){for(var c=r[l]||[],f=c.length,h=0;h<f;h++){var _=c[h];-1!=e.indexOf(_.node)&&(delete _.node,c.splice(h,1),h--,f--)}f||delete r[l]}else t.__isSystemBindingKey(l)||n(r[l],r,l);o&&!Object.keys(r).length&&delete o[i]}}(this.__bindings)}},{key:"__unbindParentsByNodes",value:function(e){for(var t=0,n=this.__parents.length;t<n;t++){var r=this.__parents[t];r&&r.__akili&&r.__akili.__unbindByNodes(e)}}},{key:"__clearStoreLinks",value:function(){var e=a.default.__storeLinks;for(var t in e){for(var n=e[t],r=n.length-1;r>=0;r--){n[r].component===this&&n.splice(r,1)}n.length||delete e[t]}}},{key:"__remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.attrs.onRemoved&&this.attrs.onRemoved.trigger(void 0,{bubbles:!1}),this.removed();var t=this.__detach({saveBindings:!0,deinitializeNodes:!0}),n=[].concat(t,this.__empty({saveBindings:!0}));return this.__unbindByNodes(t),!e.saveBindings&&this.__unbindParentsByNodes(n),this.__clearStoreLinks(),this.__scope.__remove(),delete this.__scope,delete this.scope,this.el.remove(),delete this.el.__akili,delete this.el,delete this.__parent,delete this.__attributeOf,delete this.__evaluationComponent,delete this.__evaluationParent,delete this.__parents,delete this.__bindings,delete this.__attrLinks,delete this.__storeLinks,delete this.__attrs,delete this.attrs,this.__isRemoved=!0,n}},{key:"__removeChildren",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=[],n=0;n<this.__children.length;n++){var r=this.__children[n];t=t.concat(r.__akili.__remove(e)),n--}return t}},{key:"__detach",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.__parent&&this.__parent.__akili.__spliceChild(this.el);for(var t=[],n=0,r=this.el.attributes.length;n<r;n++){var o=this.el.attributes[n];o.__initialized&&(t.push(o),e.deinitializeNodes&&this.__deinitializeNode(o,{saveBindings:!0}))}return!e.saveBindings&&this.__unbindParentsByNodes(t),t}},{key:"__empty",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this.__removeChildren({saveBindings:!0});return this.__mapNodes((function(t){1!=t.nodeType?t.__initialized&&(e.__deinitializeNode(t,{saveBindings:!0}),n.push(t)):t.remove()}),{rootAttrs:!1}),this.__unbindByNodes(n),!t.saveBindings&&this.__unbindParentsByNodes(n),this.el.innerHTML="",n}},{key:"__getParent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=[],i=0;"object"!=(void 0===n?"undefined":r(n))&&(n=[n]);var a=function r(a){if(a){if((!n||-1!=n.indexOf(i))&&(!e||a.__akili.matches(e))){if(!t)return void o.push(a.__akili);o.push(a.__akili)}i++,r(a.__akili.__parent)}};return a(this.__parent),t?o:o[0]||null}},{key:"__getChildren",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=[],i=0;"object"!=(void 0===n?"undefined":r(n))&&(n=[n]);var a=function r(a){for(var s=0,u=a.length;s<u;s++){var l=a[s];if((!n||-1!=n.indexOf(i))&&(!e||l.__akili.matches(e))){if(!t)return void o.push(l.__akili);o.push(l.__akili)}}i++;for(var c=0,f=a.length;c<f;c++)r(a[c].__akili.__children)};return a(this.__children),t?o:o[0]||null}},{key:"__getNear",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.__parent)return null;var r=this.__parent.__akili.__children.slice(),o=[];n&&r.reverse();for(var i=0,a=r.length;i<a;i++){var s=r[i];if(s===this.el)break;e&&!s.__akili.matches(e)||o.push(s.__akili)}return o.reverse(),t?o:o.length?o[0]:null}},{key:"store",value:function(e,t){if(!this.__isMounted)throw new Error('Method "store" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__storeByFunction.apply(this,_(n)):this.__storeByKeys.apply(this,_(n))}},{key:"attr",value:function(e,t){if(!this.__isMounted)throw new Error('Method "attr" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__attrByFunction.apply(this,_(n)):this.__attrByKeys.apply(this,_(n))}},{key:"unstore",value:function(e,t){if(!this.__isMounted)throw new Error('Method "unstore" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__unstoreByFunction.apply(this,arguments):this.__unstoreByKeys.apply(this,arguments)}},{key:"unattr",value:function(e,t){if(!this.__isMounted)throw new Error('Method "unattr" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__unattrByFunction.apply(this,arguments):this.__unattrByKeys.apply(this,arguments)}},{key:"matches",value:function(e){return"function"==typeof e?e(this):this.el.matches(e)}},{key:"parent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getParent(e,!1,t)}},{key:"parents",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getParent(e,!0,t)}},{key:"child",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getChildren(e,!1,t)}},{key:"children",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getChildren(e,!0,t)}},{key:"before",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!0,!1)}},{key:"after",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!0,!0)}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!1,!1)}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!1,!0)}},{key:"appendTo",value:function(e){return e.appendChild(this.el),a.default.compile(this.el,{recompile:{setParents:!0,checkChanges:!1}})}},{key:"cancel",value:function(){this.__cancelled=!0}},{key:"prevent",value:function(){this.__prevent=!0}},{key:"empty",value:function(){return this.__empty.apply(this,arguments)}},{key:"remove",value:function(){return this.__remove.apply(this,arguments)}},{key:"created",value:function(){}},{key:"compiled",value:function(){}},{key:"recompiled",value:function(){}},{key:"resolved",value:function(){}},{key:"removed",value:function(){}},{key:"transition",get:function(){return this.__scope.__transition||null}}]),e}();y.matches="",y.booleanAttributes=[],y.events=[],y.controlAttributes=!1,y.transparent=!1,y.template="",y.templateUrl="",y.scope=null,t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Request=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(1)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var l=t.Request=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.__cache={},this.getHeaders=function(e){for(var t={},n=e.getAllResponseHeaders().split("\r\n"),r=0,o=n.length;r<o;r++){var i=n[r],a=i.indexOf(": ");if(a>0){var s=i.substring(0,a),u=i.substring(a+2);t[s]=u}}return t},this.baseUrl=t?t.replace(/\/$/,"")+"/":"",this.defaults=o({statusErrorPattern:/^[^23]/,cache:!1},n||{})}return i(e,[{key:"query",value:function(e){var t=this;return new Promise((function(n,r){(e=o({},t.defaults,e||{})).url=t.baseUrl?""+t.baseUrl+e.url.replace(/^\//,""):e.url,e.method=e.method||"GET";var i=new XMLHttpRequest,a=t.transformBefore(i,e);if(i=a.xhr,"function"==typeof(e=a.options).onStart&&e.onStart(i),e.headers=e.headers||{},e.json?(!0!==e.json&&(e.body=JSON.stringify(e.json)),e.headers["content-type"]="application/json",e.responseType=e.responseType||"json"):e.form&&(e.body=t.createFormData(e.form),e.headers["content-type"]="multipart/form-data"),e.params){var u=t.paramsToQuery(e.params);u&&(e.url+="?"+u)}var l=null,c="function"==typeof e.cache?e.cache(e):e.cache;if(!window.AKILI_SSR&&!s.default.__init&&(c=!0),"GET"!=e.method.toUpperCase()||e.body&&"string"!=typeof e.body||(l=t.createCacheHash({url:e.url,method:e.method,user:e.user,password:e.password,body:e.body})),c&&l){var f=t.getCache(l),h=(new Date).getTime();if(f&&(!0===c||h-f.createdAt<=c))return n(t.transformAfter(f.result))}i.open(e.method,e.url,!0,e.user,e.password),e.hasOwnProperty("timeout")&&(i.timeout=e.timeout),e.responseType&&(i.responseType=e.responseType),e.withCredentials&&(i.withCredentials=e.withCredentials);for(var _=Object.keys(e.headers),p=0,d=_.length;p<d;p++){var v=_[p];i.setRequestHeader(v,e.headers[v])}"function"==typeof e.onProgress&&(i.onprogress=function(){return e.onProgress(i)}),i.onload=function(){var o={response:i.response,status:i.status,readyState:i.readyState,statusText:i.statusText,withCredentials:i.withCredentials,responseType:i.responseType,responseText:"text"==i.responseType?i.responseText:"",responseXML:"document"==i.responseType?i.responseXML:"",responseURL:i.responseURL,timeout:i.timeout,headers:t.getHeaders(i)},a=t.transformAfter(o);if(e.statusErrorPattern&&(i.status+"").match(e.statusErrorPattern)){var s=new Error('Request to "'+e.url+'" returns failure status code '+i.status);return s.response=a,r(s)}(c||window.AKILI_SSR)&&l&&t.createCache(l,o),n(a)},i.ontimeout=function(){r(new Error('Request to "'+e.url+'" timed out'))},i.onerror=r,i.send(e.body)}))}},{key:"getCache",value:function(e){return this.__cache[e]||null}},{key:"createCache",value:function(e,t){this.__cache[e]={result:t,createdAt:(new Date).getTime()}}},{key:"removeCache",value:function(e){delete this.__cache[e]}},{key:"createCacheHash",value:function(e){return a.default.createHash(e)}},{key:"paramsToQuery",value:function(e){return e&&"object"===(void 0===e?"undefined":r(e))?Object.keys(e).map((function(t){var n=encodeURIComponent(t);if(Array.isArray(e[t]))return n=encodeURIComponent(t),e[t].map((function(e,t){return n+"["+t+"]="+encodeURIComponent(e)})).join("&");if(e[t]&&"object"===r(e[t])){var o=[];return Object.keys(e[t]).map((function(r){return o.push(n+"["+r+"]="+encodeURIComponent(e[t][r]))})),o.join("&")}return n+"="+encodeURIComponent(e[t])})).join("&"):""}},{key:"paramsFromQuery",value:function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("="),a=decodeURIComponent(i[0]),s=decodeURIComponent(i[1]);a&&(Array.isArray(t[a])?t[a].push(s):t[a]?t[a]=[t[a],s]:t[a]=s)}return t}},{key:"createFormData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=t||new FormData;for(var o in e)if(e.hasOwnProperty(o)&&e[o]){var i=n?n+"["+o+"]":o;e[o]instanceof Date?r.append(i,e[o].toISOString()):a.default.isPlainObject(e[o])?this.createFormData(e[o],r,i):r.append(i,e[o])}return r}},{key:"transformBefore",value:function(e,t){return{xhr:e,options:t}}},{key:"transformAfter",value:function(e){return o({},e,{data:e.response})}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="GET",this.query(t)}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="DELETE",this.query(t)}},{key:"post",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="POST",this.query(t)}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="PUT",this.query(t)}},{key:"patch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="PATCH",this.query(t)}},{key:"head",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="HEAD",this.query(t)}}]),e}(),c=new l;c.__instances={},c.__cache={},c.addInstance=function(e,t){this.__instances[e]=t},c.removeInstance=function(e){delete this.__instances[e]},Object.defineProperty(c,"use",{get:function(){return c.__instances}}),c.Request=l,t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(3)),i=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.valueKey="value",i.debounceInterval=500,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"compiled",value:function(){var e=this;this.el.hasAttribute("on-debounce")&&this.el.addEventListener("input",i.default.debounce((function(){return e.attrs.onDebounce.trigger(void 0,{bubbles:!0})}),this.debounceInterval)),this.attr("focus",this.setFocus),this.attr("value",this.setValue),this.attr("debounce",this.setDebounce)}},{key:"setDebounce",value:function(e){this.debounceInterval=+e}},{key:"setFocus",value:function(e){e?this.setElementFocus():this.setElementBlur()}},{key:"setValue",value:function(e){this.el[this.valueKey]!==e&&(this.el[this.valueKey]=0===e?"0":e||"")}},{key:"setElementFocus",value:function(){this.el.focus()}},{key:"setElementBlur",value:function(){this.el.blur()}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Loop=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(3)),s=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.iterators=[],i.iteratorEl=null,i.reset(),i}return h(t,e),i(t,null,[{key:"define",value:function(){s.default.component("for",this),s.default.component("ol",this),s.default.component("ul",this),s.default.component("thead",this),s.default.component("tbody",this),s.default.component("tfoot",this),s.default.component("tr",this.Loop),s.default.component("loop",this.Loop)}}]),i(t,[{key:"__prepareAttributeIn",value:function(e,n){return e instanceof window.Attr&&"in"==e.name?n:o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"__prepareAttributeIn",this).apply(this,arguments)}},{key:"__compareNodePropertyValue",value:function(e,n){var r=e.node;return!(r instanceof window.Attr&&"in"==r.name&&e.value!==n)&&o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"__compareNodePropertyValue",this).apply(this,arguments)}},{key:"created",value:function(){this.createIterator()}},{key:"compiled",value:function(){this.attr("in",this.draw)}},{key:"removed",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"removed",this).apply(this,arguments),this.iteratorEl&&this.iteratorEl.remove(),delete this.html,delete this.iterators,delete this.iteratorEl,delete this.__iterator,delete this.__value}},{key:"createIterator",value:function(){for(var e=void 0,n=0,r=this.el.children.length;n<r;n++){var o=this.el.children[n];if("loop"==o.getAttribute("component")){e=o;break}e=o}e||((e=document.createElement("loop")).innerHTML=this.el.innerHTML,this.el.innerHTML="",this.el.appendChild(e));var i=e.getAttribute("component");if("loop"!=i){var a=s.default.component(i||e.tagName);if(a){if(!(a.prototype instanceof t)){var u=document.createElement("loop");u.appendChild(e),e=u}}else e.setAttribute("component","loop")}this.html=e.innerHTML,this.iteratorEl=this.createIteratorElement(e.outerHTML),e.remove()}},{key:"createIteratorElement",value:function(e){var t=document.createElement("template");return t.innerHTML=e,t.content.firstChild}},{key:"loop",value:function(e,t,n){if(this.__index=n,this.__key=e,this.__value=t,this.__hash=u.default.createHash(t),this.iterators.length>n){var r=this.iterators[n];return r.setIndex(this.__index===r.index),r.setKey(this.__key===r.key),r.setValue(u.default.compare(this.__hash,r.hash)),this.__promises.push(s.default.compile(r.el,{recompile:{checkChanges:!0}})),r}var o=this.iteratorEl.cloneNode();return o.innerHTML=this.html,this.el.appendChild(o),this.__promises.push(s.default.compile(o)),this.iterators.push(o.__akili),o.__akili}},{key:"draw",value:function(e){var t=this;"object"==(void 0===e?"undefined":r(e))&&null!==e||(s.default.options.debug&&console.warn('"For" component "in" attribute value type must be an object/array'),e=[]),this.data=e;var n=0,o=[].slice.call(this.el.children);this.iterators.sort((function(e,t){return o.indexOf(e.el)-o.indexOf(t.el)})),this.__children.sort((function(e,t){return o.indexOf(e)-o.indexOf(t)}));var i=function(e,n,r){return t.loop(e,n,r).iterate(r)};if(Array.isArray(e))for(var a=e.length;n<a;n++)i(n,e[n],n);else for(var u=Object.keys(e),l=u.length;n<l;n++){var c=u[n];i(c,e[c],n)}for(var f=n,h=this.iterators.length;f<h;f++){this.iterators[f].__remove(),this.iterators.splice(f,1),h--,f--}return Promise.all(this.__promises).then((function(){t.reset(),t.attrs.onOut.trigger(e,{bubbles:!0})}))}},{key:"reset",value:function(){this.__iterator=null,this.__index=0,this.__key="",this.__value=null,this.__hash="",this.__promises=[]}}]),t}(a.default);_.matches="[in]",_.events=["out"],t.default=_;var p=t.Loop=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.for=null,i.html=i.el.innerHTML,i.isFor=i.el.hasAttribute("in"),i.isFor||i.el.parentNode.__akili instanceof _||i.cancel(),i}return h(t,e),i(t,[{key:"created",value:function(){if(this.__parent.__akili.__iterator=this,this.for=this.__parent.__akili,this.setIndex(!0),this.setKey(!0),this.setValue(!0),this.isFor)return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"created",this).apply(this,arguments)}},{key:"compiled",value:function(){if(this.isFor)return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}},{key:"removed",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"removed",this).apply(this,arguments),delete this.for,delete this.value}},{key:"setIndex",value:function(e){this.index=this.for.__index,this.scope.__set("loopIndex",this.index,!1,e)}},{key:"setKey",value:function(e){this.key=this.for.__key,this.scope.__set("loopKey",this.key,!1,e)}},{key:"setValue",value:function(e){this.value=this.for.__value,this.scope.__set("loopValue",this.value,!0,e),this.hash=this.for.__hash}},{key:"iterate",value:function(){}}]),t}(_);p.matches="",p.controlAttributes=!0,_.Loop=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0)),i=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.__name=t,this.__el=n,this.__component=r,n.setAttribute("scope",t)}return r(e,[{key:"__set",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];Array.isArray(e)||(e=[e]),o.default.unisolate((function(){r&&(n.__component.__disableProxyRedefining=!0),i.default.setPropertyByKeys(e,a?n.__target:n,(function(e,n){return e?t:n||{}})),r&&(n.__component.__disableProxyRedefining=!1)}))}},{key:"__remove",value:function(){for(var e in o.default.removeScope(this.__name),this)this.hasOwnProperty(e)&&delete this[e]}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.node=n,this.el=r,this.component=o}return o(e,[{key:"trigger",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.__removed||!n&&this.inEvaluating()||this.el.dispatchEvent(new CustomEvent(this.name,this.prepareOptions(r({detail:e},t))))}},{key:"dispatch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.__removed||!n&&this.inEvaluating()||this.el.dispatchEvent(new e(this.name,this.prepareOptions(t)))}},{key:"prepareOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e=r({bubbles:!0},e),this.node.__component.__prepareAttributeOut(this.node,e.detail),e}},{key:"inEvaluating",value:function(){var e=this.component.__evaluatingEvent;return!!e&&(e.el===this.el&&e.event.type===this.name&&e.component===this.component)}},{key:"bind",value:function(e){this.el.addEventListener(this.name,this.fn=e)}},{key:"unbind",value:function(){this.fn&&this.el.removeEventListener(this.name,this.fn)}},{key:"remove",value:function(){this.unbind(),delete this.name,delete this.node,delete this.component,delete this.el,this.__removed=!0}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(0)),o=i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}var a=new Proxy({},{get:function(e,t){return"__target"==t?e:e[t]},set:function(e,t,n){return!!o.default.compare(e[t],n)||(n=o.default.copy(n,{plain:!0}),e[t]=n,r.default.root&&r.default.root.__storeTriggerByName(t,n),!0)},deleteProperty:function(e,t){return r.default.root&&r.default.root.__storeTriggerByName(t,void 0),delete e[t],!0}});t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(0));var o={},i=new Proxy(o,{get:function(e,t){return"__target"==t?o:e[t]},set:function(e,t,n){return e[t]=r.default.wrap(n,{tag:t}),!0},deleteProperty:function(e,t){return r.default.removeTag(t),delete e[t],!0}});t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(3)),i=s(n(0)),a=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.el.innerHTML="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("route",this)}}]),r(t,[{key:"setTransition",value:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=e.path.state,o=function e(t){return t.parent?t.parent.component?t.parent.component.__scope.__transition.path:e(t.parent):null},s=function(e){t.empty();var n="component";if(r.component){var o=!1;for(var a in i.default.__components){if(i.default.__components[a]===r.component){n=a,o=!0;break}}if(!o)throw new Error('Router state "'+r.name+'" has no defined component')}return t.el.innerHTML="<"+n+">"+e+"</"+n+">",i.default.compile(t.el,{recompile:!0})};return this.__scope.__transition={parent:o(e.path),state:e.path.state,data:e.path.data,url:e.path.url,params:e.path.params,query:e.path.query,hash:e.path.hash},n?Promise.resolve().then((function(){return r.template?r.template:r.templateUrl?a.default.get(r.templateUrl).then((function(e){return e.data})):void 0})).then((function(e){return s(e)})):i.default.compile(this.el,{recompile:{checkChanges:!0}})}}]),t}(o.default);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Transition=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=c(n(0)),s=c(n(1)),u=c(n(4)),l=c(n(11));function c(e){return e&&e.__esModule?e:{default:e}}var f=t.Transition=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t,this.previous=n,this.path=null,this.routes=[],this.states={},this.__cancelled=!1,this.__finished=!1}return i(e,[{key:"redirect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};return i=o({},h.transition.path.options,i),this.cancel(),h.state.call(h,e,t,n,r,i)}},{key:"reload",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return e=o({},this.path.params,e),t=o({},this.path.query,t),n=void 0===n?this.path.hash:n,this.redirect(this.path.state.name,e,t,n,r)}},{key:"setPath",value:function(e){e.parent=this.path||null,this.path=o({params:{},query:{}},e),this.routes.push(this.path),this.states[this.path.state.name]=this.path}},{key:"getRoute",value:function(e){for(var t=0,n=this.routes.length;t<n;t++){var r=this.routes[t];if(r.state===e)return r}return null}},{key:"hasState",value:function(e){return!!this.states[e.name]}},{key:"isRouteChanged",value:function(e){if(!this.previous)return!0;var t=e.state;if(!this.previous.hasState(t))return!0;var n=[];for(var r in t.fullPattern.replace(h.__paramRegex,(function(e,t,r){return n.push(r)})),t.params)-1==n.indexOf(r)&&n.push(r);var o=Object.keys(t.query),i=void 0!==t.hash,a=this.previous.getRoute(t),u={params:s.default.includeKeys(a.params,n),query:s.default.includeKeys(a.query,o)},l={params:s.default.includeKeys(e.params,n),query:s.default.includeKeys(e.query,o)};return i&&(u.hash=a.hash,l.hash=e.hash),!s.default.compare(u,l)}},{key:"cancel",value:function(){this.__cancelled=!0,this.finish()}},{key:"finish",value:function(){this.__finished=!0,delete this.previous;var e=h.__queue.indexOf(this);e>=0&&h.__queue.splice(e,1)}}]),e}(),h={baseUrl:"/",states:[],hashMode:!0,transition:null,__queue:[],__redirects:0,__init:!1,__paramRegex:/(\/?:([\w\d-]+))/g,__routeSelector:function(e){return e instanceof l.default},add:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("object"==(void 0===e?"undefined":r(e))&&(t=(n=e).pattern,e=n.state,delete n.pattern,delete n.state),!e)throw new Error("Router state must have a name");var i={template:"",templateUrl:"",abstract:!1,component:null,params:{},query:{},handler:function(){}};if(a.default.options.debug&&n.component&&(n.template||n.templateUrl)&&console.warn('Router state "'+e+'" must only have a component or template option'),n.template||n.templateUrl||n.component||(n.abstract=!0),this.has(e))throw new Error('Router state "'+e+'" is already exists');return this.setState(e,t,o({},i,n)),this},remove:function(e){for(var t=0,n=this.states.length;t<n;t++)if(this.states[t].name==e)return void this.states.splice(t,1)},has:function(e){for(var t=0,n=this.states.length;t<n;t++)if(this.states[t].name==e)return!0;return!1},state:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if("object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e)),!e)throw new Error("Not found route state with name "+e);(s=o({},s)).manual=!0;var u=this.prepareStateArgs(e,t,n,a,s,!1);t=u.params,n=u.query,a=u.hash,s=u.options;var l=this.createStateUrl(e,t,n,a,s);return this.isolate((function(){return i.setUrl(l)})),this.changeState(s)},back:function(){return window.history.back.apply(window.history,arguments)},go:function(){return window.history.go.apply(window.history,arguments)},forward:function(){return window.history.forward.apply(window.history,arguments)},location:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(n=o({},n)).manual=!0,this.isolate((function(){return t.setUrl(e)})),this.changeState(n)},init:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=window.history.pushState;window.history.pushState=function(){var e=r.apply(this,arguments);return h.changeState().catch((function(e){return console.error(e)})),e},this.__onStateChangeHandler=function(){e.changeState().catch((function(e){return console.error(e)}))},this.defaultUrl=t,this.hashMode=n,this.states.sort((function(e,t){return(e=e.name.split(".").length)-(t=t.name.split(".").length)}));for(var o=0,i=this.states.length;o<i;o++)this.initState(this.states[o]);!this.states.length&&a.default.options.debug&&console.warn("You didn't add any routes to the router"),window.addEventListener("popstate",this.__onStateChangeHandler),this.__init=!0},initState:function(e){var t=[];if(e.children=[],(t=e.name.split(".")).pop(),e.level=e.abstract?null:t.length,t.length){var n=t.join("."),r=this.getState(n);if(!r)throw new Error('Not found parent route state "'+n+'" for "'+e.name+'"');null!==e.level&&r.abstract&&e.level--,e.fullPattern=this.splitSlashes(r.fullPattern+"/"+e.pattern),r.children.push(e)}else e.fullPattern=e.pattern},getState:function(e){for(var t=0,n=this.states.length;t<n;t++){var r=this.states[t];if(r.name==e)return r}return null},setState:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=o({},n,{name:e,pattern:t});return this.states.push(r),this.__init&&this.initState(r),r},removeState:function(e){for(var t=0,n=this.states.length;t<n;t++){if(this.states[t].name==e)return void this.states.splice(t,1)}},setUrl:function(e){this.hashMode?this.setHashUrl(e):this.setHistoryUrl(e)},setHistoryUrl:function(e){window.history.pushState(void 0,void 0,e)},setHashUrl:function(e){window.location.hash="#"+(e||"/")},replaceUrl:function(e){this.hashMode?this.replaceHashUrl(e):this.replaceHistoryUrl(e)},replaceHistoryUrl:function(e){window.history.replaceState(void 0,void 0,e)},replaceHashUrl:function(e){window.history.replaceState(void 0,void 0,"#"+(e||"/"))},getUrl:function(){return this.hashMode?this.getHashUrl():this.getHistoryUrl()},getHistoryUrl:function(){return window.location.pathname+window.location.search+window.location.hash},getHashUrl:function(){return window.location.hash.replace(/^#/,"")},getUrlQuery:function(){return this.hashMode?this.getHashUrlQuery():this.getHistoryUrlQuery()},getHistoryUrlQuery:function(){return u.default.paramsFromQuery(window.location.search.replace(/^\?/,""))},getHashUrlQuery:function(){return u.default.paramsFromQuery(window.location.hash.split("?")[1]||"")},createStateUrl:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];if("object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e)),a=o({},a),s){var l=this.prepareStateArgs(e,t,n,i,a);t=l.params,n=l.query,i=l.hash,a=l.options}var c=e.fullPattern.replace(this.__paramRegex,(function(e,n,r){return"/"+(t[r]||"")}));return c=c.replace(/^\^/,""),c=this.splitSlashes(c),Object.keys(n).length&&(c+="?"+u.default.paramsToQuery(n)),!this.hashMode&&i&&(c+="#"+i.replace("#","")),c},prepareStateArgs:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i={params:t,query:n,hash:r,options:o},a=0;a<27;a++){var u=this.prepareStateParams(e,t,i),l=this.prepareStateQuery(e,n,i),c=this.prepareStateHash(e,r,i);null===c?o.emptyHash=null:""===c&&(o.emptyHash="");var f={params:u,query:l,hash:c,options:o};if(s.default.compare(f,i))break;i=f}return i},prepareStateParams:function(e,t,n){"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var o=e.name.split(".");t=Object.assign({},t);for(var i=o.length-1;i>=0;i--){var a=o.slice(0,o.length-i).join(".");t=this.createStateObjectArgs(t,this.getState(a).params,n)}return t},prepareStateQuery:function(e,t,n){"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var o=e.name.split(".");t=Object.assign({},t);for(var i=o.length-1;i>=0;i--){var a=o.slice(0,o.length-i).join(".");t=this.createStateObjectArgs(t,this.getState(a).query,n)}return t},createStateObjectArgs:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{params:{},query:{}},r=Object.assign({},e);for(var o in t){var i=t[o];null!==r[o]&&("function"==typeof i&&(r[o]=i(n)),void 0===r[o]&&(r[o]=i))}for(var a in r)null===r[a]&&delete r[a];return r},prepareStateHash:function(e,t,n){if(null===t)return t;"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));for(var o=e.name.split("."),i=o.length-1;i>=0;i--){var a=o.slice(0,o.length-i).join(".");t=this.createStateHashArgs(t,this.getState(a).hash,n)}return t},createStateHashArgs:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{params:{},query:{}};return null===e?e:"function"==typeof t?t(n):void 0===e?t:e},splitSlashes:function(e){return e.replace(/[/]+/g,"/")},getPatternContent:function(e,t){"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var n=[],o={};t=(t=t.split("?")[0]).split("#")[0];var i=e.fullPattern.replace(this.__paramRegex,(function(e,t,r){return n.push(r),"/?([^/]*)"}));i=i.replace(/([^^/]+)[/]+$/,"$1");var a=new RegExp(i,"g");return t.match(a)?(t.replace(a,(function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];for(var a=0,s=(r=r.slice(0,r.length-2)).length;a<s;a++){var u=r[a];u&&(o[n[a]]=u)}})),{params:o}):null},isActiveState:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var n=h.transition&&!h.transition.__finished?h.transition.url:this.getUrl();n=this.splitSlashes("/"+n.split("?")[0]+"/");var o=e.fullPattern.replace(this.__paramRegex,"/?([^/]*)");o=o.replace(/^\^/,"").replace(/\$$/,"");var i=t?o:this.splitSlashes("^/"+o+"/$"),a=new RegExp(i);return a.test(n)},inActiveState:function(e){return h.isActiveState(e,!0)},getRoute:function(e){var t=this,n=0;return function r(o){var i=o.child(t.__routeSelector);return i?n==e?i:(n++,r(i)):null}(a.default.root)},getArrayPatternContent:function(e,t){for(var n=0,r=e.length;n<r;n++){var i=e[n],a=this.getPatternContent(i,t);if(a)return o({state:i},a)}return null},getStatesByLevel:function(e){for(var t=[],n=0,r=this.states.length;n<r;n++){var o=this.states[n];if(!(o.level<e)){if(o.level>e)break;t.push(o)}}return t},reload:function(){var e;if(!this.transition)throw new Error("Not found an active transition to reload the state");return(e=this.transition).reload.apply(e,arguments)},isolate:function(e){this.__isolated=!0;var t=e();return this.__isolated=!1,t},changeState:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.__isolated)return Promise.resolve();var n=this.getUrl(),r=new f(n);return this.__queue.push(r),new Promise((function(t){var n=setInterval((function(){e.__queue[0]===r&&(clearInterval(n),t())}))})).then((function(){r.previous=h.transition||null,h.transition=r,window.dispatchEvent(new CustomEvent("state-change",{detail:r}));var i={},s=e.getUrlQuery(),u=e.hashMode?"":window.location.hash.replace("#",""),l=0;return function a(c){if(!c.length)return Promise.resolve();var f=e.getArrayPatternContent(c,n);if(!f)return Promise.resolve();var h=f.state;r.setPath({state:h,component:d}),i=o({},i,f.params),u=u||t.emptyHash;var _=e.prepareStateArgs(h,i,s,u,t);i=_.params,s=_.query,u=_.hash,t=_.options,u=u||"";var p=e.createStateUrl(h,i,s,u,t,!1);e.isolate((function(){return e.replaceUrl(p)}));var d=h.abstract?null:e.getRoute(l);if(!d&&!h.abstract)throw new Error('Not found route component for state "'+h.name+'"');r.path.params=i,r.path.query=s,r.path.hash=u,r.path.url=p,r.path.options=t,!h.abstract&&l++;var v=!0;p!=n&&(v=r.isRouteChanged(r.path));var y=v&&!1!==t.reload;return Promise.resolve(y?h.handler(r):r.path.data).then((function(e){if(r.path.data=e,h.title&&(document.title="function"==typeof h.title?h.title(r):h.title),!r.__cancelled&&!h.abstract){var t=r.previous&&r.previous.getRoute(h);return t&&!t.loaded&&(y=!0),d.setTransition(r,y).then((function(){return r.path.loaded=!0}))}})).then((function(){return a(h.children)}))}(e.getStatesByLevel(0)).then((function(){if(!r.routes.length){if(e.__redirects)throw new Error('Wrong router default url "'+e.defaultUrl+'"');if(e.defaultUrl){if(e.defaultUrl==e.getUrl())throw new Error("Not found any routes");return e.isolate((function(){return e.replaceUrl(e.defaultUrl)})),e.__redirects++,r.finish(),e.changeState(t)}a.default.options.debug&&console.warn('Not found a default route. You can pass it in "router.init(defaultUrl)" function')}return t.saveScrollPosition||r.path&&r.path.hash||window.scrollTo(0,0),e.__redirects=0,r.finish(),window.dispatchEvent(new CustomEvent("state-changed",{detail:r})),r}))})).catch((function(e){throw r&&r.finish(),e}))},deinit:function(){window.removeEventListener("popstate",this.__onStateChangeHandler),this.__init=!1}};h.Transition=f,t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Else=t.ElseIf=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(3)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c=function(e){function t(){var e;s(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.html=i.el.innerHTML,i.el.innerHTML="",i.state=!1,i.active=!1,i.recreate=!1,i.isCompiled=!1,i.display=getComputedStyle(i.el).display,i}return l(t,e),r(t,null,[{key:"define",value:function(){i.default.component("if",this),i.default.component("else-if",this.ElseIf),i.default.component("else",this.Else)}}]),r(t,[{key:"compiled",value:function(){return this.attr("recreate",this.setRecreation),this.attr("is",this.setIs)}},{key:"setIs",value:function(e){return this.state=!!e,this.setState()}},{key:"setActivity",value:function(e){this.active=e}},{key:"setRecreation",value:function(e){this.recreate=e}},{key:"setState",value:function(){var e,t=this.compilation(),n=this.el.nextElementSibling;if(n&&n.matches("else-if,else"))return n.__akili.setActivity(this.active||this.state),n.__akili.setRecreation(this.recreate),e=n.__akili.setState(),Promise.resolve(t).then((function(){return e}))}},{key:"compilation",value:function(){var e=Promise.resolve();return this.state&&!this.active?(!this.recreate&&this.isCompiled||(e=this.compile()),this.el.style.setProperty("display",this.display,"important")):(this.recreate?this.empty():this.isCompiled||(e=this.compile()),this.el.style.setProperty("display","none","important")),e}},{key:"compile",value:function(){var e;return this.empty(),this.el.innerHTML=this.html,e=i.default.compile(this.el,{recompile:!0}),this.isCompiled=!0,e}}]),t}(o.default);c.transparent=!0,c.matches="[is]",c.booleanAttributes=["recreate"],t.default=c;var f=t.ElseIf=function(e){function t(){var e;s(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.active=!0,i}return l(t,e),t}(c),h=t.Else=function(e){function t(){var e;s(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.el.setAttribute("is","true"),i}return l(t,e),t}(f);h.matches="",c.ElseIf=f,c.Else=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Option=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(6),s=c(a),u=c(n(1)),l=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var p=function(e){function t(){var e;f(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.iteratorTagName="option",i.isMultiple=!1,i}return _(t,e),i(t,null,[{key:"define",value:function(){l.default.component("select",this),l.default.component("option",this.Option)}}]),i(t,[{key:"compiled",value:function(){var e=this;this.el.addEventListener("change",(function(){return e.el.content=e.getContent()}));var n=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments);return this.attr("multiple",this.setMultiple),this.attr("content",this.setContent),this.attr("in",this.drawSelect),n}},{key:"setMultiple",value:function(e){this.isMultiple=e,this.changeValue(this.formatValue(u.default.copy(this.el.content)))}},{key:"setContent",value:function(e){this.changeValue(this.formatValue(e))}},{key:"drawSelect",value:function(){for(var e=[],t=0,n=this.el.options.length;t<n;t++){var r=this.el.options[t].__akili,o=r.attrs.selected;o&&e.push(r.el.value),r.el.selected=o}e.length?this.changeValue(this.formatValue(e)):this.redefine()}},{key:"createIteratorElement",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"createIteratorElement",this).apply(this,arguments);return e.hasAttribute("value")||e.setAttribute("value",this.html.trim()),e}},{key:"getContent",value:function(){if(!this.isMultiple)return this.el.value;for(var e=[],t=0,n=this.el.options.length;t<n;t++){var r=this.el.options[t];r.selected&&e.push(r.value)}return e}},{key:"formatValue",value:function(e){return this.isMultiple?Array.isArray(e)||(e=null!=e?[e]:[]):Array.isArray(e)?e=e.length?e[0]:"":"object"!=(void 0===e?"undefined":r(e))&&"function"!=typeof e||(e=""),e}},{key:"redefine",value:function(){this.changeValue(this.getContent())}},{key:"changeValue",value:function(e){if(!u.default.compare(this.el.content,e)){if(Array.isArray(e)){this.el.value=e[e.length-1];for(var t=0,n=this.el.options.length;t<n;t++){var r=this.el.options[t];r.selected=-1!=e.indexOf(r.value)}}else{this.el.value=e;for(var o=0,i=this.el.options.length;o<i;o++){var a=this.el.options[o];a.selected=a.value==e}}this.el.content=e,this.attrs.onChange.dispatch(Event,{bubbles:!0})}}}]),t}(s.default);p.booleanAttributes=["multiple"].concat(s.default.booleanAttributes),p.events=["change"].concat(s.default.events),t.default=p;var d=t.Option=function(e){function t(){return f(this,t),h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _(t,e),i(t,[{key:"__getParsedExpression",value:function(e){return u.default.decodeHtmlEntities(e)}},{key:"changedSelected",value:function(e){this.setSelected(e)}},{key:"setSelected",value:function(e){this.el.selected=e,this.for.redefine()}}]),t}(a.Loop);d.booleanAttributes=["selected"],p.Option=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(5)),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.isCheckbox="checkbox"==i.el.type,i.isRadio="radio"==i.el.type,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"define",value:function(){a.default.component("input",this)}}]),o(t,[{key:"compiled",value:function(){return(this.isCheckbox||this.isRadio)&&this.attr("checked",this.setChecked),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}},{key:"setChecked",value:function(e){e=!!e,this.el.checked!==e&&(this.el.checked=e,this.__isCompiled&&this.attrs.onChange.dispatch(Event,{bubbles:!0}),this.isRadio&&this.changeRadio())}},{key:"setValue",value:function(){r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"setValue",this).apply(this,arguments),this.isRadio&&this.attrs.onChange.dispatch(Event,{bubbles:!0})}},{key:"changeRadio",value:function(){for(var e="input[type=radio][name='"+this.el.getAttribute("name")+"']:not([scope='"+this.scope.__name+"'])",t=a.default.root.children(e),n=0,r=t.length;n<r;n++){var o=t[n];o.setChecked(o.el.checked)}}}]),t}(i.default);u.booleanAttributes=["checked","multiple"].concat(i.default.booleanAttributes),u.events=["change"].concat(i.default.events),t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RadioButton=void 0;var r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(6),a=u(i),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var h=function(e){function t(){var e;l(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.iterable=i.el.hasAttribute("in"),i}return f(t,e),o(t,null,[{key:"define",value:function(){s.default.component("radio",this),s.default.component("radio-button",this.RadioButton)}}]),o(t,[{key:"created",value:function(){if(this.iterable)return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"created",this).apply(this,arguments)}},{key:"compiled",value:function(){var e=this;if(this.el.addEventListener("change",(function(){s.default.nextTick((function(){var t=e.getRadioValue();t!==e.prevValue&&(e.prevValue=t,e.attrs.onRadio.trigger(t,{bubbles:!0}))}))})),this.iterable)return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}},{key:"resolved",value:function(){var e=this;if(this.attr("in",(function(){return e.setNames()}),{callOnStart:!1}),this.attr("value",this.setValue),this.attr("name",this.setNames),this.iterable)return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"resolved",this).apply(this,arguments)}},{key:"setNames",value:function(e){for(var t=this.children("input[type=radio]"),n=0,r=t.length;n<r;n++)t[n].el.setAttribute("name",e||this.attrs.name)}},{key:"setValue",value:function(e){if(e!==this.prevValue){var t=this.prevValue,n=this.children("input[type=radio]"),r=!1;this.prevValue=e;for(var o=0,i=n.length;o<i;o++){var a=n[o],s=a.el.value===e;s&&(r=!0),a.setChecked(s)}if(!r)if(null===e){if(void 0===t)return}else this.prevValue=void 0,e=null;this.attrs.onRadio.trigger(e,{bubbles:!0})}}},{key:"getRadioValue",value:function(){for(var e=this.children("input[type=radio]"),t=0,n=e.length;t<n;t++){var r=e[t];if(r.el.checked)return r.el.value}return null}}]),t}(a.default);h.matches="[name]",h.events=["radio"].concat(a.default.events),t.default=h;var _=t.RadioButton=function(e){function t(){var e;l(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)))}return f(t,e),o(t,[{key:"compiled",value:function(){return this.attr("value","value"),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}}]),t}(i.Loop);_.template='<label><input type="radio" value="${this.value}"/>${this.__content}</label>',h.RadioButton=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(5)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("textarea",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(5)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.el.hasAttribute("editable")&&(i.el.setAttribute("contenteditable",i.el.getAttribute("editable")),i.el.removeAttribute("editable")),"inline"==getComputedStyle(i.el).display&&(i.el.style.display="block"),i.valueKey="innerHTML",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("content",this),i.default.alias("[contenteditable]","content")}}]),r(t,[{key:"setElementFocus",value:function(){var e=document.createRange(),t=window.getSelection();e.selectNodeContents(this.el),e.collapse(!1),t.removeAllRanges(),t.addRange(e),this.el.focus()}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(3)),i=s(n(0)),a=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.html=i.el.innerHTML,i.el.innerHTML="",i.connection=null,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("include",this)}}]),r(t,[{key:"compiled",value:function(){return this.attr("cache",this.setCache),this.attr("url",this.setTemplate)}},{key:"setCache",value:function(e){this.cache=e}},{key:"setTemplate",value:function(e){var t=this;return this.connection&&this.connection.abort(),a.default.get(e,{cache:this.cache,onStart:function(e){t.connection=e}}).then((function(e){return t.connection=null,t.empty(),t.el.innerHTML=t.html,i.default.setTemplate(t.el,e.data),i.default.compile(t.el,{recompile:!0}).then((function(){t.attrs.onLoad.trigger(void 0,{bubbles:!1})}))})).catch((function(e){throw t.attrs.onError.trigger(e,{bubbles:!1}),e}))}}]),t}(o.default);u.transparent=!0,u.matches="[url]",u.events=["load","error"],t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("iframe",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("img",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("embed",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("audio",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("video",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("track",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("source",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.urlAttribute="data",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("object",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(3)),a=u(n(12)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.state=null,i.params={},i.query={},i.options={},i.isUrl=i.el.hasAttribute("url"),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"define",value:function(){s.default.component("a",this)}}]),o(t,[{key:"compiled",value:function(){var e=this;this.el.addEventListener("click",(function(t){t.preventDefault(),e.isUrl?a.default.location(e.attrs.url,e.options):a.default.state(e.state.name,e.params,e.query,e.hash,e.options)})),this.onStateChanged=function(){return e.state&&e.setActivity()},window.addEventListener("state-changed",this.onStateChanged),this.attr("state",this.setState),this.attr("params",this.setParams),this.attr("query",this.setQuery),this.attr("hash",this.setHash),this.attr("options",this.setOptions),this.attr("url",this.setUrl),this.attr("state",this.resetHref,{callOnStart:!1}),this.attr("params",this.resetHref,{callOnStart:!1}),this.attr("query",this.resetHref,{callOnStart:!1}),this.attr("hash",this.resetHref,{callOnStart:!1}),this.attr("url",this.resetHref,{callOnStart:!1}),this.resetHref()}},{key:"removed",value:function(){window.removeEventListener("state-changed",this.onStateChanged)}},{key:"setUrl",value:function(e){this.url=e}},{key:"setState",value:function(e){this.state=this.getState(e),this.setActivity()}},{key:"setActivity",value:function(){this.scope.isActiveState=a.default.isActiveState(this.state),this.scope.inActiveState=a.default.inActiveState(this.state)}},{key:"setParams",value:function(e){if("object"!=(void 0===e?"undefined":r(e))||!e)throw new Error("Router state params must be an object");this.params=e}},{key:"setQuery",value:function(e){if("object"!=(void 0===e?"undefined":r(e))||!e)throw new Error("Router state query must be an object");this.query=e}},{key:"setHash",value:function(e){if("string"!=typeof e&&null!=e)throw new Error("Router state hash must be a string|null");this.hash=e}},{key:"setOptions",value:function(e){if("object"!=(void 0===e?"undefined":r(e))||!e)throw new Error("Router state options must be an object");this.options=e}},{key:"getState",value:function(e){var t=a.default.getState(e);if(!t)throw new Error('Not found router state with name "'+e+'"');return t}},{key:"resetHref",value:function(){this.url?this.attrs.href=this.url:this.attrs.href=a.default.createStateUrl(this.state,this.params,this.query,this.hash,this.options)}}]),t}(i.default);l.matches="[state]:not([url]),[url]:not([state])",l.controlAttributes=!0,t.default=l}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,