/*!
 * Akili is a javascript framework
 * 
 * const Akili = makeItEasy(js + html);
 * 
 * @version 1.0.18
 * @author Alexandr Balasyan <mywebstreet@gmail.com>
 * {@link http://akilijs.com}
 * {@link https://github.com/ortexx/akili}
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Akili=t():e.Akili=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=M(n(3)),a=M(n(13)),s=M(n(6)),u=M(n(14)),l=M(n(15)),c=M(n(16)),f=M(n(5)),h=M(n(17)),_=M(n(18)),p=M(n(19)),d=M(n(20)),v=M(n(21)),y=M(n(22)),m=M(n(23)),b=M(n(24)),g=M(n(25)),w=M(n(26)),k=M(n(27)),O=M(n(11)),P=M(n(2)),j=M(n(28)),S=M(n(7)),A=M(n(8)),E=M(n(4)),T=M(n(12)),C=M(n(9)),L=M(n(1)),x=M(n(10));function M(e){return e&&e.__esModule?e:{default:e}}var B={options:{debug:!0},__init:null,__root:null,__components:{},__aliases:{},__scopes:{},__storeLinks:{},__window:{},__tags:{},__isolation:null,__evaluation:null,__wrapping:!1,__rootOuterHTML:"",__onError:function(){return B.triggerInit(!1)},htmlBooleanAttributes:["disabled","contenteditable","hidden"],components:{},services:{}};B.Component=i.default,B.EventEmitter=A.default,B.Scope=S.default,B.utils=L.default,B.globals=x.default,B.components.A=j.default,B.components.Audio=m.default,B.components.Content=_.default,B.components.For=s.default,B.components.Embed=y.default,B.components.If=a.default,B.components.Include=p.default,B.components.Input=l.default,B.components.Iframe=d.default,B.components.Image=v.default,B.components.Object=k.default,B.components.Radio=c.default,B.components.Route=O.default,B.components.Select=u.default,B.components.Source=w.default,B.components.Text=f.default,B.components.Textarea=h.default,B.components.Track=g.default,B.components.Url=P.default,B.components.Video=b.default,B.services.request=E.default,B.services.router=T.default,B.services.store=C.default,B.define=function(){j.default.define(),m.default.define(),_.default.define(),i.default.define(),y.default.define(),s.default.define(),p.default.define(),d.default.define(),v.default.define(),l.default.define(),a.default.define(),k.default.define(),c.default.define(),O.default.define(),u.default.define(),w.default.define(),h.default.define(),g.default.define(),b.default.define()},B.clearGlobals=function(){for(var e in x.default)delete x.default[e];for(var t in this.__window.Element.prototype)Element.prototype[t]=this.__window.Element.prototype[t];for(var n in this.__window.Array.prototype)Array.prototype[n]=this.__window.Array.prototype[n];for(var r in this.options.globals)this.options.globals[r]=this.unwrap(this.options.globals[r]);window.setTimeout=this.__window.setTimeout,window.setInterval=this.__window.setInterval,window.Promise=this.__window.Promise,window.removeEventListener("error",this.__onError)},B.joinBindingKeys=function(e){return e.map((function(e){return e.toString()})).join(".")},B.addScope=function(e){if(this.__scopes[e.__name])throw new Error("Scope name "+e.__name+" already exists");this.__scopes[e.__name]=e},B.getScope=function(e){return this.__scopes[e]},B.removeScope=function(e){delete this.__scopes[e]},B.getAkiliParents=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=[];function r(e){e.parentNode&&(e.parentNode.__akili&&(n.push(e.parentNode),!t)||r(e.parentNode))}return r(e),t?n:n[0]},B.setTemplate=function(e,t){return t=t.replace(/\${(((?!\${)\s*this\.__content\s*)*)}/,e.innerHTML),e.innerHTML=t,e.innerHTML},B.createScopeName=function(){var e=this;return L.default.createRandomString(16,(function(t){return!!e.__scopes[t]}))},B.isolate=function(e){if(this.__isolation)return e();this.__isolation={};var t=e(),n=[];for(var r in this.__isolation)n.push(this.__isolation[r]);this.__isolation=null;for(var o=0,i=n.length;o<i;o++){var a=n[o],s=L.default.getPropertyByKeys(a.keys,a.component.__scope);a.component.__isResolved&&a.component.__triggerStoreAndAttr(a.keys),a.component.__evaluateByKeys(a.keys,s,a.isDeleted)}return t},B.unevaluate=function(e){var t,n=this.__evaluation;return this.__evaluation=null,t=e(),this.__evaluation=n,t},B.wrapping=function(e){if(this.__wrapping)return e();this.__wrapping=!0;var t=e();return this.__wrapping=!1,t},B.unisolate=function(e){var t,n=this.__isolation;return this.__isolation=null,t=e(),this.__isolation=n,t},B.nextTick=function(e){return new Promise((function(t){return setTimeout((function(){return Promise.resolve(e()).then(t)}))}))},B.initialize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.recompile,r=e.__akili;if(r)return n?(r.__recompile(!0===n?{}:n),r):void 0;var o=e===this.__root,i=L.default.toDashCase(e.getAttribute("component")||e.tagName.toLowerCase()),a=this.__components[i];e:if(!a){var s=Object.keys(this.__aliases);if(!s.length)break e;var u=s.join(",");if(!e.matches(u))break e;for(var l=0,c=s.length;l<c;l++){var f=s[l];if(e.matches(f)){a=this.__components[this.__aliases[f]];break}}}return!a&&!o||(a||(a=this.Component),a.matches&&!e.matches(a.matches)||(r=new a(e,{})).__cancelled||B.getAkiliParents(e).find((function(e){return e.__akili.__prevent})))?void 0:(r.__create(),r)},B.compile=function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{recompile:!1},r=[];if(window.AKILI_SSR)for(var o=e.querySelectorAll("[no-ssr]"),i=0,a=o.length;i<a;i++)o[i].remove();var s=function e(o){var i=t.initialize(o,n),a=o.children;i&&r.push(i);for(var s=0,u=a.length;s<u;s++){e(a[s])}};s(e);for(var u=[],l=0,c=r.length;l<c;l++){var f=r[l];u.push(f.__compile())}return Promise.all(u).then((function(){for(var e=[],t=r.length-1;t>=0;t--){var n=r[t];e.push(n.__resolve())}return Promise.all(e)}))},B.component=function(e,t){if(e=e.toLowerCase(),!t)return this.__components[e]||null;this.__components[e]&&B.options.debug&&console.warn("Component "+e+" already was added"),this.__components[e]=t},B.removeComponent=function(e){delete this.__components[e]},B.alias=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(!(t=t.toLowerCase()))return this.__aliases[e]||null;this.__aliases[e]&&B.options.debug&&console.warn("Alias with selector "+e+" already was added"),this.__aliases[e]=t},B.removeAlias=function(e){delete this.__aliases[e]},B.isolateArrayPrototype=function(){var e=this;this.__window.Array={prototype:{}};for(var t=Object.getOwnPropertyNames(Array.prototype),n=function(n,r){var o=t[n],i=Array.prototype[o];if("function"!=typeof i||"constructor"==o)return"continue";e.__window.Array.prototype[o]=i,Array.prototype[o]=function(){var e=this,t=arguments;return B.unevaluate((function(){return e.__isProxy?B.isolate((function(){return i.apply(e,t)})):i.apply(e,t)}))}},r=0,o=t.length;r<o;r++)n(r)},B.isolateWindowFunctions=function(){this.__window.setTimeout=setTimeout,this.__window.setInterval=setInterval,this.__window.Promise=window.Promise,window.setTimeout=this.createCallbackIsolation(window.setTimeout,0),window.setInterval=this.createCallbackIsolation(window.setInterval,0),window.AKILI_SSR||(window.Promise.constructor=this.createCallbackIsolation(window.Promise.constructor),window.Promise.prototype.then=this.createCallbackIsolation(window.Promise.prototype.then,[0,"last"]),window.Promise.prototype.catch=this.createCallbackIsolation(window.Promise.prototype.catch))},B.isolateGlobals=function(){x.default.__target.utils=this.wrap(L.default),this.isolateEvents(),this.isolateArrayPrototype(),this.isolateWindowFunctions()},B.isolateEvents=function(){this.__window.Element={prototype:{}},window.AKILI_SSR||(this.__window.Element.prototype.addEventListener=Element.prototype.addEventListener,this.__window.Element.prototype.removeEventListener=Element.prototype.removeEventListener,this.__window.Element.prototype.remove=Element.prototype.remove,Element.prototype.remove=function(){return delete this.__akiliListeners,B.__window.Element.prototype.remove.apply(this,arguments)},Element.prototype.addEventListener=function(e,t){var n=[].slice.call(arguments);return this.__akiliListeners||(this.__akiliListeners={}),this.__akiliListeners[e]||(this.__akiliListeners[e]=[]),"function"==typeof t&&(n[1]=function(){var e=this,n=arguments;return B.isolate((function(){return t.apply(e,n)}))}),this.__akiliListeners[e].push({link:t,fn:n[1]}),B.__window.Element.prototype.addEventListener.apply(this,n)},Element.prototype.removeEventListener=function(e,t){var n=[].slice.call(arguments);this.__akiliListeners||(this.__akiliListeners={}),this.__akiliListeners[e]||(this.__akiliListeners[e]=[]);for(var r=0,o=this.__akiliListeners[e].length;r<o;r++){var i=this.__akiliListeners[e][r];if(i.link===t){this.__akiliListeners[e].splice(r,1),n[1]=i.fn,r--,o--;break}}return this.__akiliListeners[e].length||delete this.__akiliListeners[e],B.__window.Element.prototype.removeEventListener.apply(this,n)})},B.createCallbackIsolation=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"last";return function(){var n=[].slice.call(arguments);!Array.isArray(t)&&(t=[t]);for(var r=function(e,r){var o=t[e],i=o,a=n[o];if("last"==o&&(i=n.length-1,a=n[i]),"function"!=typeof a)return"continue";a.__isolated||(n[i]=function(){var e=arguments;return B.isolate((function(){return a.apply(a,e)}))},Object.defineProperty(n[i],"__isolated",{enumerable:!1,value:a}))},o=0,i=t.length;o<i;o++)r(o,i);return e.apply(this,n)}},B.wrap=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e;if("function"==typeof e){if((e=this.wrapFunction(e,t))===n)return e}else if(!e||"object"!=(void 0===e?"undefined":o(e))||Array.isArray(e))return e;for(var i=Object.getOwnPropertyNames(e),a=0,s=i.length;a<s;a++){var u=i[a],l=Object.getOwnPropertyDescriptor(e,u);l.configurable&&l.writable&&(t.reverse?Object.defineProperty(e,u,r({},l,{value:e[u].__akili||e[u]})):Object.defineProperty(e,u,r({},l,{value:this.wrap(e[u],t)})))}return e},B.unwrap=function(e){return this.wrap(e,{reverse:!0})},B.wrapFunction=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(e.__akili)return e;var n=function(){var n=this,r=arguments;return t.tag&&B.__evaluation&&B.addTag(t.tag,B.__evaluation.node),B.wrapping((function(){return e.apply(n,r)}))},r=Object.keys(e);n.prototype=e.prototype;for(var o=0,i=r.length;o<i;o++){var a=r[o];n[a]=e[a]}return Object.defineProperty(n,"__akili",{enumerable:!1,value:e}),n},B.addTag=function(e,t){this.hasTag(e,t)||(this.__tags[t.__name]||(this.__tags[t.__name]={}),this.__tags[t.__name][e]||(this.__tags[t.__name][e]=[]),this.__tags[t.__name][e].push({node:t}))},B.hasTag=function(e,t){if(!t){for(var n in this.__tags)for(var r in this.__tags[n])if(r==e)return!0;return!1}return!!this.__tags[t.__name]&&!!this.__tags[t.__name][e]},B.removeTag=function(e,t){if("object"==(void 0===e?"undefined":o(e))&&(t=e,e=void 0),e)if(t){for(var n in this.__tags[t.__name])n==e&&delete this.__tags[t.__name][n];Object.keys(this.__tags[t.__name]).length||delete this.__tags[t.__name]}else for(var r in this.__tags){for(var i in this.__tags[r])i==e&&delete this.__tags[r][i];Object.keys(this.__tags[r]).length||delete this.__tags[r]}else delete this.__tags[t.__name]},B.triggerTag=function(e){for(var t in this.__tags)for(var n in this.__tags[t])if(n==e)for(var r=this.__tags[t][n],o=0,i=r.length;o<i;o++){var a=r[o];a.node.__component.__evaluateNode(a.node,!1)}},B.handleErrors=function(){window.addEventListener("error",this.__onError)},B.triggerInit=function(e){B.__init=e,window.dispatchEvent(new CustomEvent("akili-init",{detail:e}))},B.init=function(e){var t=this;if(e=e||document.body,this.__rootOuterHTML=e.outerHTML,!(e instanceof Element))throw new Error("Root element must be an html element");if(e===document.documentElement)throw new Error('"html" can\'t be the root element');return this.__root=e,window.AKILI_SERVER?(B.initServerSideHtml(window.AKILI_SERVER.html),B.initServerSideRequestCache(window.AKILI_SERVER.requestCache)):window.AKILI_CLIENT={html:this.prepareServerSideHtml()},this.compile(this.__root).then((function(){if(T.default.__init)return T.default.changeState({init:!0})})).then((function(){window.AKILI_CLIENT&&(window.AKILI_CLIENT.requestCache=t.prepareServerSideRequestCache()),t.triggerInit(!0)})).catch((function(e){throw t.triggerInit(!1),e}))},B.deinit=function(){for(var e in this.__root&&(this.__root.outerHTML=this.__rootOuterHTML),this.__scopes){var t=this.__scopes[e].__component;t&&t.remove()}this.__rootOuterHTML="",this.__init=null,this.__root=null,this.__scopes={},this.__storeLinks={},this.__tags={}},B.destroy=function(){this.deinit(),this.clearGlobals();for(var e=Object.keys(C.default.__target),t=0,n=e.length;t<n;t++)delete C.default.__target[e[t]];for(var r in T.default.__init&&T.default.deinit(),delete window.AKILI_SERVER,delete window.AKILI_CLIENT,delete window.AKILI_SSR,B)delete B[r];delete window.Akili},B.initServerSideHtml=function(e){for(var t=this.__root.attributes.length-1;t>=0;t--)this.__root.removeAttribute(this.__root.attributes[t].name);var n=(new DOMParser).parseFromString(e,"text/html").querySelector(this.__root===document.body?"body":"body > *");this.__root.innerHTML=n.innerHTML;for(var r=n.attributes.length-1;r>=0;r--){var o=n.attributes[r];this.__root.setAttribute(o.name,o.value)}},B.initServerSideRequestCache=function(e){var t=function(e,t){for(var n in t)e.__cache[n]=t[n]};for(var n in e){t("__main"===n?E.default:E.default.__instances[n],e[n])}},B.prepareServerSideHtml=function(){return this.__root.outerHTML},B.prepareServerSideRequestCache=function(){var e={__main:E.default.__cache};for(var t in E.default.__instances)e[t]=E.default.__instances[t].__cache;return e},t.default=B,window.Akili=B,B.define(),B.handleErrors(),B.isolateGlobals()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=n(8),s=(r=a)&&r.__esModule?r:{default:r};var u={class:function(e){if(!e||"object"!==(void 0===e?"undefined":i(e)))return"";for(var t=[],n=Object.keys(e),r=0,o=n.length;r<o;r++){var a=n[r];e[a]&&t.push(a)}return t.join(" ")},style:function(e){if(!e||"object"!==(void 0===e?"undefined":i(e)))return"";for(var t=[],n=Object.keys(e),r=0,o=n.length;r<o;r++){var a=n[r],s=e[a];s&&t.push(this.toDashCase(a)+":"+s)}return t.join(";")},split:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=[],o="";if(!t)return e.split("");if(t instanceof RegExp)return e.split(t);if(-1==e.indexOf(t))o=e;else for(var i=e.split(""),a="",s=0,u=i.length;s<u;s++){var l=i[s],c=n.indexOf(l);c>-1&&(!a||a==l)&&(a=a?"":n[c]),l!=t||a?o+=l:(r.push(o),o="")}return o&&r.push(o),r},filter:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=[];if(n&&!Array.isArray(n)&&(n=[n]),"function"!=typeof t){var o=t?(t+"").toLowerCase():"";t=function(e){return(e?(e+"").toLowerCase():"").match(o)}}for(var i=0,a=e.length;i<a;i++){var s=e[i],u=!1;if(!n&&t(s))u=!0;else if(n)for(var l=0,c=n.length;l<c;l++){var f=n[l],h=(f=Array.isArray(f)?f:[f])?this.getPropertyByKeys(f,s):s;t(h)&&(u=!0)}u&&r.push(s)}return r},sort:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];e=e.slice(),!0===n?(n=[],r=[!0]):!1===n&&(n=[],r=[!1]),Array.isArray(n)||(n=[n]),Array.isArray(r)||(r=[r]);var o=n.length;return e.sort((function(e,i){var a=0,s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return e instanceof Date&&(e=e.getTime()),t instanceof Date&&(t=t.getTime()),e>t?n?-1:1:e<t?n?1:-1:0};return o?function u(){if(a>=o)return 0;var l=n[a];Array.isArray(l)||(l=[l]);var c=t.getPropertyByKeys(l,e),f=t.getPropertyByKeys(l,i),h=s(c,f,!1===r[a]);return 0!==h?h:(a++,u())}():s(e,i,!1===r[a])})),e},includeKeys:function(e,t){for(var n={},r=Object.keys(e),o=0,i=r.length;o<i;o++){var a=r[o];-1!=t.indexOf(a)&&(n[a]=e[a])}return n},excludeKeys:function(e,t){for(var n={},r=Object.keys(e),o=0,i=r.length;o<i;o++){var a=r[o];-1==t.indexOf(a)&&(n[a]=e[a])}return n},isScopeProxy:function(e){return!(!e||"object"!=(void 0===e?"undefined":i(e))||!e.__isProxy)},isPlainObject:function(e){return!(!e||"object"!=(void 0===e?"undefined":i(e))||e.constructor!=Object&&e.constructor!=Array)},copy:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("object"!=(void 0===e?"undefined":i(e))||!e)return e;n=o({nested:!0,enumerable:!0,plain:!1},n);var r=function e(r){if(n.plain&&!t.isPlainObject(r))return r;r=t.isScopeProxy(r)?r.__target:r;for(var a=n.enumerable?Object.keys(r):Object.getOwnPropertyNames(r),s=Array.isArray(r)?[]:{},u=0,l=a.length;u<l;u++){var c=a[u],f=r[c];f=f&&"object"==(void 0===f?"undefined":i(f))&&n.nested?e(f):f,r.propertyIsEnumerable(c)?s[c]=f:Object.defineProperty(s,c,o({},Object.getOwnPropertyDescriptor(r,c),{value:f}))}return s};return r(e)},makeAttributeValue:function(e){return!1===e||null==e?"":e instanceof s.default?"[object Event]":"function"==typeof e?"[object Function]":"object"==(void 0===e?"undefined":i(e))?Object.prototype.toString.call(e):e+""},compare:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if("function"==typeof e&&"function"==typeof t)return e.toString()===t.toString();if("object"==(void 0===e?"undefined":i(e))&&"object"==(void 0===t?"undefined":i(t))){if(null===e||null===t)return e===t;var r=function(e){for(var t=Array.isArray(e)?[]:{},r=n.enumerable?Object.keys(e):Object.getOwnPropertyNames(),o=0,i=r.length;o<i;o++){var a=r[o];void 0!==e[a]&&(t[a]=e[a])}return t};(n=o({enumerable:!0,ignoreUndefined:!0},n)).ignoreUndefined&&(e=r(e),t=r(t));var a=n.enumerable?Object.keys(e):Object.getOwnPropertyNames(),s=n.enumerable?Object.keys(t):Object.getOwnPropertyNames();if(a.length!=s.length)return!1;e=this.isScopeProxy(e)?e.__target:e,t=this.isScopeProxy(t)?t.__target:t;for(var u=0,l=a.length;u<l;u++){var c=a[u];if(!this.compare(e[c],t[c]))return!1}return!0}return e===t},createHash:function(e){"object"==(void 0===e?"undefined":i(e))&&(e=JSON.stringify(e)),"string"!=typeof e&&(e="⠀"+String(e));for(var t=0,n=0;n<e.length;n++){t=(t<<5)-t+e.charCodeAt(n),t&=t}return t+""},encodeHtmlEntities:function(e){var t,n=document.createElement("div");return n.textContent=e,t=n.innerHTML,n.remove(),n=null,t},decodeHtmlEntities:function(e){var t,n=document.createElement("textarea");return n.innerHTML=e,t=n.value,n.remove(),n=null,t},toCamelCase:function(e){return e.replace(/\W+(.)/g,(function(e,t){return t.toUpperCase()}))},capitalize:function(e){return e[0].toUpperCase()+e.slice(1)},toDashCase:function(e){return e.replace(/([A-Z])/g,(function(e,t){return"-"+t.toLowerCase()}))},getPropertyByKeys:function(e,t){var n=void 0,r=e.length,o=0;return e.reduce((function(e,t){return o++,"object"!=(void 0===e?"undefined":i(e))?e:void 0===e[t]?{}:(o==r&&(n=e[t]),e[t])}),t),n},hasPropertyByKeys:function(e,t){var n=!1,r=e.length,o=0;return e.reduce((function(e,t){return o++,e&&"object"==(void 0===e?"undefined":i(e))?e.hasOwnProperty(t)?(o==r&&(n=e.hasOwnProperty(t)),e[t]):{}:!!e}),t),n},setPropertyByKeys:function(e,t,n){var r=void 0,o=e.length,a=0;return e.reduce((function(e,t){if(a++,e&&"object"==(void 0===e?"undefined":i(e)))return e.hasOwnProperty(t)||(e[t]=void 0),e[t]=n(a==o,e[t]),r=e,e[t]}),t),r},deletePropertyByKeys:function(e,t,n){var r=e.length,o=void 0,a=0;return e.reduce((function(e,t){if(a++,e&&"object"==(void 0===e?"undefined":i(e)))return e.hasOwnProperty(t)?a==r?(o=e[t],(!n||n(o))&&delete e[t],o):e[t]:{}}),t),o},getEnumerablePropertyTarget:function(e,t){return function e(n){if(n.propertyIsEnumerable(t))return n;var r=Object.getPrototypeOf(n);return r?e(r):null}(e)},getOwnPropertyTarget:function(e,t){return function e(n){if(n.hasOwnProperty(t))return n;var r=Object.getPrototypeOf(n);return r?e(r):null}(e)},createRandomString:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=Math.random().toString(36).substring(2,e+2),r=Date.now(),o="",i=0,a=n.length;i<a;i++)o+=r%i?n[i]:n[i].toUpperCase();return t&&t(o)?this.createRandomString(e,t):o},debounce:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return function(){clearTimeout(e.__debounceTimeout),e.__debounceTimeout=setTimeout((function(){e(),clearTimeout(e.__debounceTimeout),delete e.__debounceTimeout}),t)}}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(3);var a=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.urlAttribute="src",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"compiled",value:function(){this.attr("url",this.setUrl)}},{key:"setUrl",value:function(e){this.attrs[this.urlAttribute]=e}}]),t}(((r=i)&&r.__esModule?r:{default:r}).default);a.matches="[url]",t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.systemAttributes=t.evaluationRegexGlobal=t.evaluationRegex=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=h(n(0)),s=h(n(7)),u=h(n(4)),l=h(n(9)),c=h(n(10)),f=h(n(1));function h(e){return e&&e.__esModule?e:{default:e}}function _(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var p=t.evaluationRegex=/\${(((?!\${).)*)}/,d=t.evaluationRegexGlobal=new RegExp(p.source,"g"),v=t.systemAttributes=["component","scope","no-ssr"],y=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t instanceof Element))throw new Error("You must pass an html element to the component constructor");this.__isMounted=!1,this.__isCompiled=!1,this.__isResolved=!1,this.__cancelled=!1,this.__prevent=!1,this.__bindings={},this.__evaluatingEvent=null,this.__recompiling=null,this.__compiling=null,this.__disableProxy={},this.__disableStoreKeys={},this.__disableAttrKeys={},this.__children=[],this.__parent=null,this.__parents=[],this.__content="",this.__attrs={},this.__attrLinks={},this.__storeLinks={},this.__attributeOf=null,this.__evaluationComponent=this,this.scope=n,this.el=t}return i(e,null,[{key:"define",value:function(){a.default.component("component",e)}},{key:"parse",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=[],o=[],i=f.default.split(t,";",['"',"'","`"]);for(var a in i[i.length-1]="return "+i[i.length-1],n)r.push(a),o.push(n[a]);return(new(Function.prototype.bind.apply(Function,[null].concat(r,[""+i.join("; ")])))).apply(e,o)}}]),i(e,[{key:"__createCompilationOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o({checkChanges:!1,setEvents:!0,setParents:!0,setBooleanAttributes:!0,defineAttributes:!0},e)}},{key:"__createRecompilationOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o({},this.__createCompilationOptions(),{setEvents:!1,setParents:!1,defineAttributes:!1},e)}},{key:"__recompile",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.__isMounted=!1,this.__recompiling=!0,this.__evaluationComponent.__disableProxy={},this.__compiling=this.__createRecompilationOptions(e),this.__compiling.setEvents&&this.__setEvents(),this.__compiling.setParents&&this.__setParents(),this.__compiling.setBooleanAttributes&&this.__setBooleanAttributes(),this.__compiling.defineAttributes&&this.__defineAttributes()}},{key:"__create",value:function(){var e=this;this.__compiling=this.__createCompilationOptions(),this.__initialize(),this.__setEvents(),this.__setParents(),this.__setBooleanAttributes(),this.__defineAttributes(),a.default.isolate((function(){return e.created(e.attrs)}))}},{key:"__compile",value:function(){var e=this,t=this.__controlAttributes||!this.__evaluationParent,n=Promise.resolve();this.__attributeOf=t?this:this.__evaluationParent.__akili,(!this.__recompiling||this.__compiling.newParent||this.__controlAttributes)&&this.__interpolateAttributes(this.el,this.__attributeOf);!function t(n,r){for(var o=0,i=n.length;o<i;o++){var a=n[o];3==a.nodeType&&e.__initializeNode(a,r)?e.__evaluateNode(a,!!e.__compiling&&e.__compiling.checkChanges):1!=a.nodeType||a.__akili||(e.__interpolateAttributes(a),t(a.childNodes,a))}}(this.el.childNodes,this.el),this.__isMounted=!0;var r=void 0;return this.__recompiling?r=a.default.isolate((function(){e.attrs.onRecompiled&&e.attrs.onRecompiled.trigger(void 0,{bubbles:!1}),e.recompiled()})):(r=a.default.isolate((function(){return e.attrs.onCompiled&&e.attrs.onCompiled.trigger(void 0,{bubbles:!1}),e.compiled()})),this.constructor.templateUrl&&(n=u.default.get(this.constructor.templateUrl,{cache:this.constructor.templateCache}).then((function(t){return e.el.innerHTML=e.__content,a.default.setTemplate(e.el,t.data),delete e.__content,a.default.compile(e.el,{recompile:!0})})))),this.__recompiling=null,this.__compiling=null,n.then((function(){return e.__isCompiled=!0,r}))}},{key:"__resolve",value:function(){var e=this;return this.__isResolved?Promise.resolve():(this.attrs.onResolved&&this.attrs.onResolved.trigger(void 0,{bubbles:!1}),Promise.resolve(a.default.isolate((function(){return e.resolved()}))).then((function(t){return e.__isResolved=!0,t})))}},{key:"__initialize",value:function(){var e=a.default.getAkiliParents(this.el,!1),t=this.constructor.scope||a.default.Scope,n=void 0,r=a.default.__root===this.el;this.el.__akili=this,e?n=new t(this.el.getAttribute("scope")||a.default.createScopeName(),this.el,this):(n=new t(r?"root":a.default.createScopeName(),this.el,this),r&&(a.default.root=this));var o=n,i=Object.assign(n,this.scope),s=this.constructor.controlAttributes,u=this.constructor.events;return this.constructor.template&&a.default.setTemplate(this.el,this.constructor.template),this.constructor.templateUrl&&(this.__content=this.el.innerHTML,this.el.innerHTML=""),this.__scope=o,this.__events=u,this.__controlAttributes=s,a.default.addScope(n),this.scope=this.__nestedObserve(i,[]),!0}},{key:"__setBooleanAttributes",value:function(){var e=this;this.booleanAttributes=[].concat(a.default.htmlBooleanAttributes,this.constructor.booleanAttributes);!function t(n){for(var r=0,o=n.attributes,i=o.length;r<i;r++){var a=o[r];if(-1!=e.booleanAttributes.indexOf(a.nodeName)){if(n.hasAttribute("boolean-"+a.nodeName))continue;n.setAttribute("boolean-"+a.nodeName,n.getAttribute(a.nodeName)||a.nodeName),n.removeAttribute(a.nodeName)}}for(var s=0,u=n.children.length;s<u;s++){var l=n.children[s];l.__akili||t(l)}}(this.el)}},{key:"__setEvents",value:function(){for(var e=0,t=this.__events.length;e<t;e++){var n=this.__events[e];!/^on-/i.test(n)&&(n="on-"+n),this.el.hasAttribute(n)||this.el.setAttribute(n,"")}}},{key:"__setParents",value:function(){var e=a.default.getAkiliParents(this.el);if(e.length){for(var t=this.__parent!==e[0],n=null,r=0,o=e.length;r<o;r++){var i=e[r];if(!i.__akili.constructor.transparent){n=i;break}}this.__compiling.newParent=t,t&&this.__detach(),this.constructor.transparent&&(this.__evaluationComponent=n.__akili),this.__evaluationParent=n,this.__parent=e[0],this.__parents=e,this.scope.__parent=this.__evaluationParent.__akili.scope,!this.__recompiling&&this.__parent.__akili.__addChild(this.el),Object.setPrototypeOf(this.scope,this.__parent.__akili.__scope)}}},{key:"__addChild",value:function(e){this.__children.push(e)}},{key:"__spliceChild",value:function(e){for(var t=0,n=this.__children.length;t<n;t++){this.__children[t]===e&&(this.__children.splice(t,1),t--,n--)}}},{key:"__getParsedExpression",value:function(e){return e}},{key:"__checkEvaluation",value:function(e){if(!Object.keys(e.__properties).length)return!0;for(var t in e.__properties)if(e.__properties.hasOwnProperty(t)){var n=e.__properties[t],r=f.default.getPropertyByKeys(n.keys,n.component.__scope);if(!e.__component.__compareNodePropertyValue(n,r))return!0}return!1}},{key:"__checkNodePropertyChange",value:function(e,t,n){var r=this.__getNodeProperty(e,t);return!r||!e.__component.__compareNodePropertyValue(r,n)}},{key:"__compareNodePropertyValue",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return f.default.compare(f.default.createHash(t),e.hash,n)}},{key:"__createExceptionMessage",value:function(e,t){var n=e.__component.el.tagName,r=(e.__component.el.getAttribute("component")||n).toLowerCase(),o=e.__element.tagName.toLowerCase(),i=e instanceof window.Attr?e.name.toLowerCase():"",a=[t.message,e.__expression.trim()];return i&&a.push("[attribute "+i+"]"),"Expression error: "+(a=a.concat(["[element "+o+"]","[component "+r+"]"])).join("\n\tat ")}},{key:"__evaluate",value:function(e){var t=this,n=0,i=void 0,s=void 0,u=e.__attributeOf||e.__component;return e.__component.parents((function(e){return e.__prevent})).length?{res:e.__expression}:e instanceof window.Attr||!e.__component.__prevent?{res:e.__expression.replace(d,(function(l,h){n++;var _=void 0,p=[],d={},v={},y=e.__component.__getParsedExpression(h);a.default.__evaluation={node:e,list:[],component:e.__component};try{_=t.constructor.parse(u.__evaluationComponent.scope,y,o({},c.default))}catch(n){throw t.__createExceptionMessage(e,n)}a.default.__evaluation&&(p=a.default.__evaluation.list,a.default.__evaluation.list=null,a.default.__evaluation=null);for(var m=p.length-1;m>=0;m--){var b=p[m],g=b.component.__createKeysHash(b.keys),w=b.component.__createKeysHash(b.parents);if(!b.notBinding&&!d[g]){var k=f.default.getPropertyByKeys(b.parents,b.component.__scope);k&&"object"==(void 0===k?"undefined":r(k))&&(a.default.options.debug&&50==v[w]&&console.warn(["For higher performance, don't loop Proxy arrays/objects inside expression functions, or use Akili.unevaluate() to wrap you code.",""+e.__expression.trim(),'scope property "'+b.parents.join(".")+'"'].join("\n\tat ")),v[w]?v[w]++:v[w]=1),f.default.isScopeProxy(k)&&b.component!==u.__evaluationComponent&&b.component===b.realComponent||(b.component.__bindAndSetProperty(e,b.keys,b.evaluated),d[g]=!0)}}if(e instanceof window.Attr)return s=l,i=_,f.default.makeAttributeValue(_);if("object"==(void 0===_?"undefined":r(_)))try{return JSON.stringify(_)}catch(e){return _}return _})),counter:n,expression:s,attributeValue:i}:{res:e.__expression}}},{key:"__bindAndSetProperty",value:function(e,t,n){var r=this.__getBoundNode(t,e),o=f.default.getPropertyByKeys(t,this.__scope);r||this.__bind(t,{node:e}),this.__setNodeProperty(e,t,o,n)}},{key:"__evaluateNested",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.__scope,o=[];if(n)o.push({keys:e,value:f.default.getPropertyByKeys(e,r)});else for(var i=[],a=0,s=e.length;a<s;a++){var u=e[a],l=void 0;i=[].concat(_(i),[u]),l=f.default.getPropertyByKeys(i,r),o.push({keys:i,value:l})}var c=o.length,h=function(e){for(var n=e.__akili,r=0;r<c;r++){var i=o[r],a=void 0;if(n===t){var s=n.__getBind(i.keys);a=s&&s.__data||[]}else a=n.__getAllBinds(i.keys);if(a&&a.length)for(var u=0,l=a.length;u<l;u++){var h=a[u];if(h&&h.node&&h.node.__initialized&&n.__checkNodePropertyChange(h.node,i.keys,i.value)){n.__disableKeys(i.keys);var _=n.__getNodeProperty(h.node,i.keys);for(var p in _&&_.evaluated&&n.scope.__set(i.keys,i.value,!1,!0),n.__evaluateNode(h.node,!1),h.node.__properties)if(h.node.__properties.hasOwnProperty(p)){var d=h.node.__properties[p],v=f.default.getPropertyByKeys(d.keys,d.component.__scope);d.component.__setNodeProperty(h.node,d.keys,v)}n.__enableKeys(i.keys)}}}return n},p=function e(t){for(var n=0,r=t.length;n<r;n++){e(h(t[n]).__children)}};h(this.el),p(this.__children)}},{key:"__evaluateByKeys",value:function(e,t){var n=this,o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.__getBind(e),a=function e(o,i){for(var a in o)if(o.hasOwnProperty(a)&&!n.__isSystemBindingKey(a)){var s,u=[].concat(i,[a]),l=u.slice(),c=!1,h=o[a];l.shift(),s=f.default.hasPropertyByKeys(l,t),t&&"object"==(void 0===t?"undefined":r(t))&&!s&&(c=!0),h&&"object"==(void 0===h?"undefined":r(h))&&e(h,u),n.__evaluateNested(u,!0),null!==t&&"object"==(void 0===t?"undefined":r(t))&&s||(n.__unbind(u),c&&f.default.deletePropertyByKeys(l,t))}};i&&a(i,[].concat(e)),this.__evaluateNested(e,!1),o&&(this.__unbind(e),o&&f.default.deletePropertyByKeys(e,this.__scope))}},{key:"__evaluateEvent",value:function(e,t,n){var r=p.exec(e.__expression),i=void 0;if(r){this.__evaluatingEvent={el:t,component:this,event:n,node:e},this.__disableProxy={};try{i=this.constructor.parse(this.__evaluationComponent.scope,r[1],o({},c.default,{event:n}))}catch(t){throw this.__createExceptionMessage(e,t)}return this.__evaluatingEvent=null,i}}},{key:"__evaluateNode",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=e instanceof window.Attr?"value":"nodeValue";if(!t||this.__checkEvaluation(e)){var r=this.__evaluate(e),o=r.res,i=r.attributeValue,a=r.expression,s=r.counter;if(e[n]!=o&&(e[n]=o),e instanceof window.Attr){var u=o,l=!1;1==s&&a&&e.__expression==a&&(u=i);var c=e.nodeName.replace(/^boolean-(.+)/i,"$1"),h=f.default.toCamelCase(c);if(c!=e.nodeName&&(l=!0,u=!!u),e.__attributeOn){var _=e.__attributeOn;u=_.__prepareAttributeIn(e,u),_.__disableAttributeSetter=!0,_.attrs[h]=u,_.__disableAttributeSetter=!1,_.__isMounted&&_.__attrTriggerByName(h,u)}else if(l){var p=e.__element;u?p.setAttribute(h,"true"):p.removeAttribute(h)}}}return e[n]}},{key:"__prepareAttributeIn",value:function(e,t){return f.default.copy(t,{plain:!0})}},{key:"__prepareAttributeOut",value:function(e,t){return f.default.copy(t,{plain:!0})}},{key:"__initializeAttribute",value:function(e,t,n){if(e&&-1==v.indexOf(e.nodeName)&&this.__initializeNode(e,t)){var r=e.nodeName.replace(/^on-(.+)/i,"$1"),o=n||this;if(e.__isEvent){if(e.__event)return;var i=new a.default.EventEmitter(r,e,t,o);return e.__hasBindings&&i.bind((function(n){return o.__evaluateEvent(e,t,n)})),e.__event=i,t.setAttribute(e.nodeName,f.default.makeAttributeValue(i)),void(n&&(this.__disableAttributeSetter=!0,this.attrs[f.default.toCamelCase(e.nodeName)]=i,this.__disableAttributeSetter=!1))}n&&(e.__attributeOn=this,e.__attributeOf=o);var s=!!this.__compiling&&this.__compiling.checkChanges;o.__evaluateNode(e,s)}}},{key:"__initializeNode",value:function(e,t){if(e.__initialized)return!0;var n=e instanceof window.Attr,r=e[n?"value":"nodeValue"],o=p.test(r.trim()),i=!!n&&/^boolean-/i.test(e.nodeName),a=!!n&&/^on-(.+)/i.test(e.nodeName);return!!(t.__akili||o||i||a)&&(e.__name=this.__scope.__name+f.default.createRandomString(16),e.__isEvent=a,e.__hasBindings=o,e.__isBoolean=i,e.__expression=r,e.__properties={},e.__attributeOf=null,e.__attributeOn=null,e.__event=null,e.__initialized=!0,e.__component=this,e.__element=t,!0)}},{key:"__deinitializeNode",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e.__initialized&&(e.__event&&e.__event.remove(),e.__hasBindings&&!t.saveBindings&&(this.__unbindByNodes(e),this.__unbindParentsByNodes(e)),a.default.removeTag(e),delete e.__name,delete e.__hasBindings,delete e.__isBoolean,delete e.__isEvent,delete e.__expression,delete e.__properties,delete e.__attributeOf,delete e.__attributeOn,delete e.__event,delete e.__initialized,delete e.__component,delete e.__element)}},{key:"__interpolateAttributes",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=0,r=e.attributes,o=r.length;n<o;n++)this.__initializeAttribute(r[n],e,t)}},{key:"__defineAttributes",value:function(){var e=this,t=function(t,n){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!e.__disableAttributeSetter){var o=e.el.getAttributeNode(t);if(r)return o&&e.__deinitializeNode(o),void e.el.removeAttribute(t);o?(o.value=n,e.__deinitializeNode(o)):(e.el.setAttribute(t,n),o=e.el.getAttributeNode(t)),e.__initializeAttribute(o,e.el,e.__attributeOf)}};this.attrs=new Proxy(this.__attrs,{get:function(e,t){return"__isProxy"==t||e[t]},set:function(n,r,o){var i=f.default.toDashCase(r);return-1!=e.booleanAttributes.indexOf(i)&&(i="boolean-"+i,o?e.el.setAttribute(r,o):e.el.removeAttribute(r)),n[r]=o,t(i,f.default.makeAttributeValue(o)),!0},deleteProperty:function(e,n,r){var o=f.default.toDashCase(n);return t(o,f.default.makeAttributeValue(r),!0),delete e[n],!0}})}},{key:"__observe",value:function(e,t){var n=this;return new Proxy(e,{get:function(o,i){if("__isProxy"==i)return!0;if("__target"==i)return e;if("__component"==i)return n;if("__keys"==i)return t;if(n.__isSystemKey(i))return o[i];if(a.default.__evaluation){var u=[].concat(t,[i]),l=!1,c=!f.default.hasPropertyByKeys(u,n.__scope),h=n,_=u.slice();if(o instanceof s.default){var p=f.default.getOwnPropertyTarget(o,i);p&&p instanceof s.default&&(h=p.__component)}if(a.default.__wrapping&&u.length>1)return o[i];for(var d=a.default.__evaluation.component.parents((function(e){return e instanceof a.default.components.For})),v=0,y=d.length;v<y;v++)for(var m=0,b=u.length;m<b;m++){var g=d[v].data,w=f.default.getPropertyByKeys(_,h.__scope);if(w&&"object"==(void 0===w?"undefined":r(w))&&g===w)return o[i];_.pop()}return i in o?f.default.getEnumerablePropertyTarget(o,i)||(l=!0):o[i]=void 0,n.__bindNode(a.default.__evaluation.list,h,u,t,o[i],l,c),o[i]}return o[i]},set:function(e,r,o){if(n.__isSystemKey(r))return e[r]=o,!0;"function"==typeof e[r]&&(o=a.default.wrapFunction(o));var i=[].concat(t,[r]);if(n.__checkDisablement(i))return e[r]=o,!0;e:if(t.length>0){var s=t.length>1?f.default.getPropertyByKeys(t.slice(0,-1),n.__scope):n.__scope;for(var u in s)if(s.hasOwnProperty(u)&&s[u]&&s[u].__target===e)break e;return e[r]=o,!0}return e[r]=n.__nestedObserve(o,i),n.__isResolved||n.__triggerStoreAndAttr(i),a.default.__isolation?(n.__createIsolationObject(t,r,!1),!0):(n.__isResolved&&n.__triggerStoreAndAttr(i),n.__isMounted&&n.__evaluateByKeys(i,o),!0)},deleteProperty:function(e,r){var o=[].concat(t,[r]);return n.__checkDisablement(o)?(delete e[r],!0):n.__isSystemKey(r)?(delete e[r],!0):(delete e[r],n.__isResolved||n.__triggerStoreAndAttr(o),a.default.__isolation?(n.__createIsolationObject(t,r,!0),!0):(n.__isResolved&&n.__triggerStoreAndAttr(o),n.__evaluateByKeys(o,void 0,!0),!0))}})}},{key:"__triggerStoreAndAttr",value:function(e){for(var t=0,n=e.length;t<n;t++){var r=e.slice(0,n-t),o=a.default.joinBindingKeys(r),i=f.default.getPropertyByKeys(r,this.__scope);this.__storeLinks[o]&&this.__storeTriggerByKeys(r,i),this.__attrLinks[o]&&this.__attrTriggerByKeys(r,i)}}},{key:"__createKeysHash",value:function(e){return this.__scope.__name+"."+a.default.joinBindingKeys(e)}},{key:"__getDisablementTypeStore",value:function(e){return{proxy:"__disableProxy",store:"__disableStoreKeys",attr:"__disableAttrKeys"}[e]}},{key:"__disableKeys",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"proxy";this[this.__getDisablementTypeStore(t)][e?this.__createKeysHash(e):"__all"]=!0}},{key:"__enableKeys",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"proxy";delete this[this.__getDisablementTypeStore(t)][e?this.__createKeysHash(e):"__all"]}},{key:"__checkDisablement",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"proxy",n=this.__getDisablementTypeStore(t);return!!this[n].__all||this[n][this.__createKeysHash(e)]}},{key:"__storeTriggerByKeys",value:function(e,t){if(!this.__checkDisablement(e,"store")){var n=this.__storeLinks[a.default.joinBindingKeys(e)];if(n&&n.length){t=f.default.copy(t,{plain:!0});for(var r=[],o=0,i=n.length;o<i;o++){var s=n[o];s.set&&r.push(this.__storeTriggerByName(s.name,t))}return Promise.all(r)}}}},{key:"__storeTriggerByName",value:function(e,t){var n=this;l.default.__target[e]=t;var r=(a.default.__storeLinks[e]||[]).concat(a.default.__storeLinks["*"]||[]);if(r&&r.length)return r=f.default.sort(r,["date"],!0),a.default.nextTick((function(){for(var o=function(o,i){var s=r[o],u=s.component;if(u===n)return"continue";if(s.fn)return a.default.unisolate((function(){return s.fn.call(u,t,e)})),"continue";if(!s.get)return"continue";u.__disableKeys(s.keys,"store");var l=f.default.getPropertyByKeys(s.keys,u.__scope);!f.default.compare(l,t)&&u.scope.__set(s.keys,t),u.__enableKeys(s.keys,"store")},i=0,s=r.length;i<s;i++)o(i)}))}},{key:"__storeByKeys",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(n=o({get:!0,set:!0},n),!t)throw new Error('Store link "'+e+'" must have the scope property name');if(!n.get&&!n.set)throw new Error('Store link "'+e+'" must have at least "get" or "set" option as true');Array.isArray(t)||(t=[t]),this.__disableKeys(t,"store"),(l.default.hasOwnProperty(e)||!f.default.hasPropertyByKeys(t,this.__scope))&&this.scope.__set(t,l.default[e]),this.__enableKeys(t,"store");var r=a.default.joinBindingKeys(t),i=void 0;this.__storeLinks[r]||(this.__storeLinks[r]=[]);for(var s=this.__storeLinks[r],u=s.length-1;u>=0;u--){var c=s[u];if(c.component===this&&c.name==e&&c.keyString==r)return c.set=n.set,c.get=n.get,void(c.date=Date.now())}a.default.__storeLinks[e]||(a.default.__storeLinks[e]=[]),i={component:this,name:e,keys:t,keyString:r,date:Date.now(),set:n.set,get:n.get},this.__storeLinks[r].push(i),a.default.__storeLinks[e].push(i)}},{key:"__storeByFunction",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=void 0===r.callOnStart?l.default.__target.hasOwnProperty(e):r.callOnStart;a.default.__storeLinks[e]||(a.default.__storeLinks[e]=[]);for(var i=a.default.__storeLinks[e],s=i.length-1;s>=0;s--){var u=i[s];if(u.component===this&&u.name==e&&u.fn===t)return void(u.date=Date.now())}if(a.default.__storeLinks[e].push({component:this,name:e,fn:t,date:Date.now()}),"*"==e&&!1!==r.callOnStart){for(var c=Object.keys(l.default.__target),f=[],h=function(e,r){var o=c[r],i=l.default.__target[o];f.push(a.default.unisolate((function(){return t.call(n,i,o)})))},_=0,p=c.length;_<p;_++)h(p,_);return Promise.all(f)}if(o)return a.default.unisolate((function(){return t.call(n,l.default[e])}))}},{key:"__unstoreByKeys",value:function(e,t){if(!t)throw new Error('You have to pass the scope property name for store link "'+e+'"');Array.isArray(t)||(t=[t]);var n=a.default.joinBindingKeys(t),r=this.__storeLinks[n];if(r.length){for(var o=r.length-1;o>=0;o--){var i=r[o],s=a.default.__storeLinks[i.name];if(i.component===this&&i.name==e&&i.keyString==n&&(r.splice(o,1),s&&s.length)){for(var u=s.length-1;u>=0;u--){var l=s[u];l.component===this&&l.keyString==n&&s.splice(u,1)}s.length||delete a.default.__storeLinks[e]}}r.length||delete this.__storeLinks[n]}}},{key:"__unstoreByFunction",value:function(e,t){if(a.default.__storeLinks[e]){for(var n=a.default.__storeLinks[e],r=n.length-1;r>=0;r--){var o=n[r];if(o.component===this&&o.name==e&&o.fn===t){n.splice(r,1);break}}n.length||delete a.default.__storeLinks[e]}}},{key:"__attrTriggerByKeys",value:function(e,t){var n=this;if(!this.__checkDisablement(e,"attr")){var r=this.__attrLinks[a.default.joinBindingKeys(e)];if(r&&r.length)return a.default.nextTick((function(){for(var e=0,o=r.length;e<o;e++){var i=r[e];if(!i.fn&&i.set){var a="on"+f.default.capitalize(i.name);n.attrs[a]&&n.attrs[a].trigger(t,{bubbles:!0})}}}))}}},{key:"__attrTriggerByName",value:function(e,t){var n=this,r=(this.__attrLinks[e]||[]).concat(this.__attrLinks["*"]||[]);if(r&&r.length)for(var o=function(o,i){var s=r[o];if(s.fn)return a.default.unisolate((function(){return s.fn.call(n,t,f.default.toDashCase(e))})),"continue";if(!s.get)return"continue";n.__disableKeys(s.keys,"attr");var u=f.default.getPropertyByKeys(s.keys,n.__scope);!f.default.compare(u,t)&&n.scope.__set(s.keys,t),n.__enableKeys(s.keys,"attr")},i=0,s=(r=f.default.sort(r,["date"],!0)).length;i<s;i++)o(i)}},{key:"__attrByKeys",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(n=o({get:!0,set:!0},n),e=f.default.toCamelCase(e),!t)throw new Error('Attribute link "'+e+'" must have the scope property name');Array.isArray(t)||(t=[t]),this.__disableKeys(t,"attr"),(this.attrs.hasOwnProperty(e)||!f.default.hasPropertyByKeys(t,this.__scope))&&this.scope.__set(t,this.attrs[e]),this.__enableKeys(t,"attr");var r=a.default.joinBindingKeys(t);this.__attrLinks[r]||(this.__attrLinks[r]=[]);for(var i=this.__attrLinks[r],s=i.length-1;s>=0;s--){var u=i[s];if(u.name==e&&u.keyString==r)return u.get=n.get,u.set=n.set,void(u.date=Date.now())}this.__attrLinks[r].push({name:e,keys:t,keyString:r,date:Date.now(),set:n.set,get:n.get})}},{key:"__attrByFunction",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};e=f.default.toCamelCase(e);var o=void 0===r.callOnStart?this.attrs.hasOwnProperty(e):r.callOnStart;this.__attrLinks[e]||(this.__attrLinks[e]=[]);for(var i=this.__attrLinks[e],s=i.length-1;s>=0;s--){var u=i[s];if(u.name==e&&u.fn===t)return void(u.date=Date.now())}if(this.__attrLinks[e].push({name:e,fn:t,date:Date.now()}),"*"==e&&!1!==r.callOnStart){for(var l=Object.keys(this.__attrs).filter((function(e){return!(n.__attrs[e]instanceof a.default.EventEmitter)})),c=[],h=function(e,r){var o=l[r],i=n.__attrs[o];c.push(a.default.unisolate((function(){return t.call(n,i,f.default.toDashCase(o))})))},_=0,p=l.length;_<p;_++)h(p,_);return Promise.all(c)}if(o)return a.default.unisolate((function(){return t.call(n,n.attrs[e])}))}},{key:"__unattrByKeys",value:function(e,t){if(!t)throw new Error('You have to pass the scope property name for attribute link "'+e+'"');Array.isArray(t)||(t=[t]);var n=a.default.joinBindingKeys(t),r=this.__attrLinks[n];if(r.length){for(var o=r.length-1;o>=0;o--){var i=r[o];i.name==e&&i.keyString==n&&r.splice(o,1)}r.length||delete this.__attrLinks[n]}}},{key:"__unattrByFunction",value:function(e,t){if(this.__attrLinks[e]){for(var n=this.__attrLinks[e],r=n.length-1;r>=0;r--){var o=n[r];if(o.name==e&&o.fn===t){n.splice(r,1);break}}n.length||delete this.__attrLinks[e]}}},{key:"__isSystemKey",value:function(e){return"__"==e||"_"==e[0]&&"_"==e[1]||-1!=["constructor"].indexOf(e)}},{key:"__nestedObserve",value:function(e,t){var n=this;return function e(t,o){if("object"!=(void 0===t?"undefined":r(t))||null===t)return t;if(!(f.default.isPlainObject(t)||f.default.isScopeProxy(t)||t instanceof s.default))return t;var i=t;e:if(t.__isProxy){if(i=t.__target,n.__disableProxyRedefining)break e;t.__component===n&&a.default.joinBindingKeys(o)==a.default.joinBindingKeys(t.__keys)||(t=i=f.default.copy(i,{nested:!1}))}else n.__disableProxyRedefining||t instanceof s.default||(t=i=f.default.copy(i,{nested:!1}));for(var u=Object.keys(i),l=0,c=u.length;l<c;l++){var h=u[l],_=i[h],p=[].concat(o,[h]);i[h]=e(_,p)}return t.__isProxy?t:n.__observe(t,o)}(e,t||[])}},{key:"__createIsolationObject",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e.length?[e[0]]:[t],o=this.__createKeysHash(r);return e.length&&(n=!1),a.default.__isolation[o]||(a.default.__isolation[o]={updatedAt:(new Date).getTime(),component:this,keys:r}),void 0!==n&&(a.default.__isolation[o].isDeleted=n),a.default.__isolation[o]}},{key:"__bindNode",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]&&arguments[5],s=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=a.default.joinBindingKeys(r),l=this;if(e.length&&!i){var c=e.length-1,f=e[c];f.realComponent===this&&f.keysString==u&&(l=f.component),f.keysString==u&&f.component===l&&e.splice(c,1)}e.push({component:l,realComponent:t,keysString:a.default.joinBindingKeys(n),parents:r,keys:n,value:o,evaluated:s,notBinding:i})}},{key:"__isSystemBindingKey",value:function(e){return"__data"==e}},{key:"__getBind",value:function(e){return f.default.getPropertyByKeys(e,this.__bindings)||null}},{key:"__getAllBinds",value:function(e){var t=this.__getBind(e);if(!t)return[];var n=[];return function e(t){for(var r in n=n.concat(t.__data||[]),t)t.hasOwnProperty(r)&&"__data"!=r&&e(t[r])}(t),n}},{key:"__getBoundNode",value:function(e,t){var n=f.default.getPropertyByKeys(e,this.__bindings);if(!n||!n.__data||!n.__data.length)return null;for(var r=0,o=n.__data.length;r<o;r++){var i=n.__data[r];if(i.node===t)return i}return null}},{key:"__setNodeProperty",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=this.__getNodeProperty(e,t),i=f.default.createHash(n);if(o){var a=e.__component.__compareNodePropertyValue(o,n);return o.value=n,o.hash=i,!a}return e.__properties[this.__createKeysHash(t)]={component:this,value:n,hash:i,node:e,keys:t,evaluated:r},!0}},{key:"__getNodeProperty",value:function(e,t){return e.__properties[this.__createKeysHash(t)]||null}},{key:"__deleteNodeProperty",value:function(e,t){var n=this.__scope.__name+"."+a.default.joinBindingKeys(t);delete e.__properties[n]}},{key:"__mapNodes",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n=o({rootAttrs:!0,attrs:!0,node:!0,el:!0},n);var r=function r(o){if(o){if(n.attrs&&(o!==t.el||n.rootAttrs))for(var i=0,a=o.attributes,s=a.length;i<s;i++)e(a[i]);for(var u=o.childNodes.length-1;u>=0;u--){var l=o.childNodes[u];3==l.nodeType?n.node&&e(l):1!=l.nodeType||l.__akili||(r(l),n.el&&e(l))}}};r(this.el)}},{key:"__getAllNodes",value:function(){var e=[];return this.__mapNodes((function(t){return e.push(t)})),e}},{key:"__bind",value:function(e,t){f.default.setPropertyByKeys(e,this.__bindings,(function(e,n){var o={__data:[]};return e?("object"==(void 0===n?"undefined":r(n))&&(o=n),o.__data||(o.__data=[]),o.__data.push(t),o):n||o}))}},{key:"__unbind",value:function(e){var t=f.default.getPropertyByKeys(e,this.__bindings);if(t&&t.__data){for(var n=0,r=t.__data.length;n<r;n++){var o=t.__data[n].node;this.__deleteNodeProperty(o,e)}f.default.deletePropertyByKeys(e,this.__bindings,(function(e){return!(Object.keys(e).length>1)||(e.__data=[],!1)}))}}},{key:"__unbindByNodes",value:function(e){var t=this;e instanceof Node&&(e=[e]);!function n(r,o,i){for(var a=Object.keys(r),s=0,u=a.length;s<u;s++){var l=a[s];if("__data"==l){for(var c=r[l]||[],f=c.length,h=0;h<f;h++){var _=c[h];-1!=e.indexOf(_.node)&&(delete _.node,c.splice(h,1),h--,f--)}f||delete r[l]}else t.__isSystemBindingKey(l)||n(r[l],r,l);o&&!Object.keys(r).length&&delete o[i]}}(this.__bindings)}},{key:"__unbindParentsByNodes",value:function(e){for(var t=0,n=this.__parents.length;t<n;t++){var r=this.__parents[t];r&&r.__akili&&r.__akili.__unbindByNodes(e)}}},{key:"__clearStoreLinks",value:function(){var e=a.default.__storeLinks;for(var t in e){for(var n=e[t],r=n.length-1;r>=0;r--){n[r].component===this&&n.splice(r,1)}n.length||delete e[t]}}},{key:"__remove",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.attrs.onRemoved&&this.attrs.onRemoved.trigger(void 0,{bubbles:!1}),this.removed();var t=this.__detach({saveBindings:!0,deinitializeNodes:!0}),n=[].concat(t,this.__empty({saveBindings:!0}));return this.__unbindByNodes(t),!e.saveBindings&&this.__unbindParentsByNodes(n),this.__clearStoreLinks(),this.__scope.__remove(),delete this.__scope,delete this.scope,this.el.remove(),delete this.el.__akili,delete this.el,delete this.__parent,delete this.__attributeOf,delete this.__evaluationComponent,delete this.__evaluationParent,delete this.__parents,delete this.__bindings,delete this.__attrLinks,delete this.__storeLinks,delete this.__attrs,delete this.attrs,n}},{key:"__removeChildren",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=[],n=0;n<this.__children.length;n++){var r=this.__children[n];t=t.concat(r.__akili.__remove(e)),n--}return t}},{key:"__detach",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.__parent&&this.__parent.__akili.__spliceChild(this.el);for(var t=[],n=0,r=this.el.attributes.length;n<r;n++){var o=this.el.attributes[n];o.__initialized&&(t.push(o),e.deinitializeNodes&&this.__deinitializeNode(o,{saveBindings:!0}))}return!e.saveBindings&&this.__unbindParentsByNodes(t),t}},{key:"__empty",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=this.__removeChildren({saveBindings:!0});return this.__mapNodes((function(t){1!=t.nodeType?t.__initialized&&(e.__deinitializeNode(t,{saveBindings:!0}),n.push(t)):t.remove()}),{rootAttrs:!1}),this.__unbindByNodes(n),!t.saveBindings&&this.__unbindParentsByNodes(n),this.el.innerHTML="",n}},{key:"__getParent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=[],i=0;"object"!=(void 0===n?"undefined":r(n))&&(n=[n]);var a=function r(a){if(a){if((!n||-1!=n.indexOf(i))&&(!e||a.__akili.matches(e))){if(!t)return void o.push(a.__akili);o.push(a.__akili)}i++,r(a.__akili.__parent)}};return a(this.__parent),t?o:o[0]||null}},{key:"__getChildren",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,o=[],i=0;"object"!=(void 0===n?"undefined":r(n))&&(n=[n]);var a=function r(a){for(var s=0,u=a.length;s<u;s++){var l=a[s];if((!n||-1!=n.indexOf(i))&&(!e||l.__akili.matches(e))){if(!t)return void o.push(l.__akili);o.push(l.__akili)}}i++;for(var c=0,f=a.length;c<f;c++)r(a[c].__akili.__children)};return a(this.__children),t?o:o[0]||null}},{key:"__getNear",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.__parent)return null;var r=this.__parent.__akili.__children.slice(),o=[];n&&r.reverse();for(var i=0,a=r.length;i<a;i++){var s=r[i];if(s===this.el)break;e&&!s.__akili.matches(e)||o.push(s.__akili)}return o.reverse(),t?o:o.length?o[0]:null}},{key:"store",value:function(e,t){if(!this.__isMounted)throw new Error('Method "store" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__storeByFunction.apply(this,_(n)):this.__storeByKeys.apply(this,_(n))}},{key:"attr",value:function(e,t){if(!this.__isMounted)throw new Error('Method "attr" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__attrByFunction.apply(this,_(n)):this.__attrByKeys.apply(this,_(n))}},{key:"unstore",value:function(e,t){if(!this.__isMounted)throw new Error('Method "unstore" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__unstoreByFunction.apply(this,arguments):this.__unstoreByKeys.apply(this,arguments)}},{key:"unattr",value:function(e,t){if(!this.__isMounted)throw new Error('Method "unattr" must be called after the compilation. For example, in "compiled" method.');var n=[].slice.call(arguments);return"function"==typeof e&&(n.unshift("*"),t=e),"function"==typeof t?this.__unattrByFunction.apply(this,arguments):this.__unattrByKeys.apply(this,arguments)}},{key:"matches",value:function(e){return"function"==typeof e?e(this):this.el.matches(e)}},{key:"parent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getParent(e,!1,t)}},{key:"parents",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getParent(e,!0,t)}},{key:"child",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getChildren(e,!1,t)}},{key:"children",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return this.__getChildren(e,!0,t)}},{key:"before",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!0,!1)}},{key:"after",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!0,!0)}},{key:"prev",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!1,!1)}},{key:"next",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return this.__getNear(e,!1,!0)}},{key:"appendTo",value:function(e){return e.appendChild(this.el),a.default.compile(this.el,{recompile:{setParents:!0,checkChanges:!1}})}},{key:"cancel",value:function(){this.__cancelled=!0}},{key:"prevent",value:function(){this.__prevent=!0}},{key:"empty",value:function(){return this.__empty.apply(this,arguments)}},{key:"remove",value:function(){return this.__remove.apply(this,arguments)}},{key:"created",value:function(){}},{key:"compiled",value:function(){}},{key:"recompiled",value:function(){}},{key:"resolved",value:function(){}},{key:"removed",value:function(){}},{key:"transition",get:function(){return this.__scope.__transition||null}}]),e}();y.matches="",y.booleanAttributes=[],y.events=[],y.controlAttributes=!1,y.transparent=!1,y.template="",y.templateUrl="",y.scope=null,t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Request=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(1)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var l=t.Request=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.__cache={},this.getHeaders=function(e){for(var t={},n=e.getAllResponseHeaders().split("\r\n"),r=0,o=n.length;r<o;r++){var i=n[r],a=i.indexOf(": ");if(a>0){var s=i.substring(0,a),u=i.substring(a+2);t[s]=u}}return t},this.baseUrl=t?t.replace(/\/$/,"")+"/":"",this.defaults=o({statusErrorPattern:/^[^23]/,cache:!1},n||{})}return i(e,[{key:"query",value:function(e){var t=this;return new Promise((function(n,r){(e=o({},t.defaults,e||{})).url=t.baseUrl?""+t.baseUrl+e.url.replace(/^\//,""):e.url,e.method=e.method||"GET";var i=new XMLHttpRequest,a=t.transformBefore(i,e);if(i=a.xhr,"function"==typeof(e=a.options).onStart&&e.onStart(i),e.headers=e.headers||{},e.json?(!0!==e.json&&(e.body=JSON.stringify(e.json)),e.headers["content-type"]="application/json",e.responseType=e.responseType||"json"):e.form&&(e.body=t.createFormData(e.form),e.headers["content-type"]="multipart/form-data"),e.params){var u=t.paramsToQuery(e.params);u&&(e.url+="?"+u)}var l=null,c="function"==typeof e.cache?e.cache(e):e.cache;if(!window.AKILI_SSR&&!s.default.__init&&(c=!0),"GET"!=e.method.toUpperCase()||e.body&&"string"!=typeof e.body||(l=t.createCacheHash({url:e.url,method:e.method,user:e.user,password:e.password,body:e.body})),c&&l){var f=t.getCache(l),h=(new Date).getTime();if(f&&(!0===c||h-f.createdAt<=c))return n(t.transformAfter(f.result))}i.open(e.method,e.url,!0,e.user,e.password),e.hasOwnProperty("timeout")&&(i.timeout=e.timeout),e.responseType&&(i.responseType=e.responseType),e.withCredentials&&(i.withCredentials=e.withCredentials);for(var _=Object.keys(e.headers),p=0,d=_.length;p<d;p++){var v=_[p];i.setRequestHeader(v,e.headers[v])}"function"==typeof e.onProgress&&(i.onprogress=function(){return e.onProgress(i)}),i.onload=function(){var o={response:i.response,status:i.status,readyState:i.readyState,statusText:i.statusText,withCredentials:i.withCredentials,responseType:i.responseType,responseText:"text"==i.responseType?i.responseText:"",responseXML:"document"==i.responseType?i.responseXML:"",responseURL:i.responseURL,timeout:i.timeout,headers:t.getHeaders(i)},a=t.transformAfter(o);if(e.statusErrorPattern&&(i.status+"").match(e.statusErrorPattern)){var s=new Error('Request to "'+e.url+'" returns failure status code '+i.status);return s.response=a,r(s)}(c||window.AKILI_SSR)&&l&&t.createCache(l,o),n(a)},i.ontimeout=function(){r(new Error('Request to "'+e.url+'" timed out'))},i.onerror=r,i.send(e.body)}))}},{key:"getCache",value:function(e){return this.__cache[e]||null}},{key:"createCache",value:function(e,t){this.__cache[e]={result:t,createdAt:(new Date).getTime()}}},{key:"removeCache",value:function(e){delete this.__cache[e]}},{key:"createCacheHash",value:function(e){return a.default.createHash(e)}},{key:"paramsToQuery",value:function(e){return e&&"object"===(void 0===e?"undefined":r(e))?Object.keys(e).map((function(t){var n=encodeURIComponent(t);if(Array.isArray(e[t]))return n=encodeURIComponent(t),e[t].map((function(e,t){return n+"["+t+"]="+encodeURIComponent(e)})).join("&");if(e[t]&&"object"===r(e[t])){var o=[];return Object.keys(e[t]).map((function(r){return o.push(n+"["+r+"]="+encodeURIComponent(e[t][r]))})),o.join("&")}return n+"="+encodeURIComponent(e[t])})).join("&"):""}},{key:"paramsFromQuery",value:function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("="),a=decodeURIComponent(i[0]),s=decodeURIComponent(i[1]);a&&(Array.isArray(t[a])?t[a].push(s):t[a]?t[a]=[t[a],s]:t[a]=s)}return t}},{key:"createFormData",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=t||new FormData;for(var o in e)if(e.hasOwnProperty(o)&&e[o]){var i=n?n+"["+o+"]":o;e[o]instanceof Date?r.append(i,e[o].toISOString()):a.default.isPlainObject(e[o])?this.createFormData(e[o],r,i):r.append(i,e[o])}return r}},{key:"transformBefore",value:function(e,t){return{xhr:e,options:t}}},{key:"transformAfter",value:function(e){return o({},e,{data:e.response})}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="GET",this.query(t)}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="DELETE",this.query(t)}},{key:"post",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="POST",this.query(t)}},{key:"put",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="PUT",this.query(t)}},{key:"patch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="PATCH",this.query(t)}},{key:"head",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t.url=e,t.method="HEAD",this.query(t)}}]),e}(),c=new l;c.__instances={},c.__cache={},c.addInstance=function(e,t){this.__instances[e]=t},c.removeInstance=function(e){delete this.__instances[e]},Object.defineProperty(c,"use",{get:function(){return c.__instances}}),c.Request=l,t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(3)),i=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.valueKey="value",i.debounceInterval=500,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"compiled",value:function(){var e=this;this.el.hasAttribute("on-debounce")&&this.el.addEventListener("input",i.default.debounce((function(){return e.attrs.onDebounce.trigger(void 0,{bubbles:!0})}),this.debounceInterval)),this.attr("focus",this.setFocus),this.attr("value",this.setValue),this.attr("debounce",this.setDebounce)}},{key:"setDebounce",value:function(e){this.debounceInterval=+e}},{key:"setFocus",value:function(e){e?this.setElementFocus():this.setElementBlur()}},{key:"setValue",value:function(e){this.el[this.valueKey]!==e&&(this.el[this.valueKey]=0===e?"0":e||"")}},{key:"setElementFocus",value:function(){this.el.focus()}},{key:"setElementBlur",value:function(){this.el.blur()}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Loop=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(3)),s=l(n(0)),u=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function h(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var _=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.iterators=[],i.iteratorEl=null,i.reset(),i}return h(t,e),i(t,null,[{key:"define",value:function(){s.default.component("for",this),s.default.component("ol",this),s.default.component("ul",this),s.default.component("thead",this),s.default.component("tbody",this),s.default.component("tfoot",this),s.default.component("tr",this.Loop),s.default.component("loop",this.Loop)}}]),i(t,[{key:"__prepareAttributeIn",value:function(e,n){return e instanceof window.Attr&&"in"==e.name?n:o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"__prepareAttributeIn",this).apply(this,arguments)}},{key:"__compareNodePropertyValue",value:function(e,n){var r=e.node;return!(r instanceof window.Attr&&"in"==r.name&&e.value!==n)&&o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"__compareNodePropertyValue",this).apply(this,arguments)}},{key:"created",value:function(){this.createIterator()}},{key:"compiled",value:function(){this.attr("in",this.draw)}},{key:"removed",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"removed",this).apply(this,arguments),this.iteratorEl&&this.iteratorEl.remove(),delete this.html,delete this.iterators,delete this.iteratorEl,delete this.__iterator,delete this.__value}},{key:"createIterator",value:function(){for(var e=void 0,n=0,r=this.el.children.length;n<r;n++){var o=this.el.children[n];if("loop"==o.getAttribute("component")){e=o;break}e=o}e||((e=document.createElement("loop")).innerHTML=this.el.innerHTML,this.el.innerHTML="",this.el.appendChild(e));var i=e.getAttribute("component");if("loop"!=i){var a=s.default.component(i||e.tagName);if(a){if(!(a.prototype instanceof t)){var u=document.createElement("loop");u.appendChild(e),e=u}}else e.setAttribute("component","loop")}this.html=e.innerHTML,this.iteratorEl=this.createIteratorElement(e.outerHTML),e.remove()}},{key:"createIteratorElement",value:function(e){var t=document.createElement("template");return t.innerHTML=e,t.content.firstChild}},{key:"loop",value:function(e,t,n){if(this.__index=n,this.__key=e,this.__value=t,this.__hash=u.default.createHash(t),this.iterators.length>n){var r=this.iterators[n];return r.setIndex(this.__index===r.index),r.setKey(this.__key===r.key),r.setValue(u.default.compare(this.__hash,r.hash)),this.__promises.push(s.default.compile(r.el,{recompile:{checkChanges:!0}})),r}var o=this.iteratorEl.cloneNode();return o.innerHTML=this.html,this.el.appendChild(o),this.__promises.push(s.default.compile(o)),this.iterators.push(o.__akili),o.__akili}},{key:"draw",value:function(e){var t=this;"object"==(void 0===e?"undefined":r(e))&&null!==e||(s.default.options.debug&&console.warn('"For" component "in" attribute value type must be an object/array'),e=[]),this.data=e;var n=0,o=[].slice.call(this.el.children);this.iterators.sort((function(e,t){return o.indexOf(e.el)-o.indexOf(t.el)})),this.__children.sort((function(e,t){return o.indexOf(e)-o.indexOf(t)}));var i=function(e,n,r){return t.loop(e,n,r).iterate(r)};if(Array.isArray(e))for(var a=e.length;n<a;n++)i(n,e[n],n);else for(var u=Object.keys(e),l=u.length;n<l;n++){var c=u[n];i(c,e[c],n)}for(var f=n,h=this.iterators.length;f<h;f++){this.iterators[f].__remove(),this.iterators.splice(f,1),h--,f--}return Promise.all(this.__promises).then((function(){t.reset(),t.attrs.onOut.trigger(e,{bubbles:!0})}))}},{key:"reset",value:function(){this.__iterator=null,this.__index=0,this.__key="",this.__value=null,this.__hash="",this.__promises=[]}}]),t}(a.default);_.matches="[in]",_.events=["out"],t.default=_;var p=t.Loop=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.for=null,i.html=i.el.innerHTML,i.isFor=i.el.hasAttribute("in"),i.isFor||i.el.parentNode.__akili instanceof _||i.cancel(),i}return h(t,e),i(t,[{key:"created",value:function(){if(this.__parent.__akili.__iterator=this,this.for=this.__parent.__akili,this.setIndex(!0),this.setKey(!0),this.setValue(!0),this.isFor)return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"created",this).apply(this,arguments)}},{key:"compiled",value:function(){if(this.isFor)return o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}},{key:"removed",value:function(){o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"removed",this).apply(this,arguments),delete this.for,delete this.value}},{key:"setIndex",value:function(e){this.index=this.for.__index,this.scope.__set("loopIndex",this.index,!1,e)}},{key:"setKey",value:function(e){this.key=this.for.__key,this.scope.__set("loopKey",this.key,!1,e)}},{key:"setValue",value:function(e){this.value=this.for.__value,this.scope.__set("loopValue",this.value,!0,e),this.hash=this.for.__hash}},{key:"iterate",value:function(){}}]),t}(_);p.matches="",p.controlAttributes=!0,_.Loop=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(0)),i=a(n(1));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.__name=t,this.__el=n,this.__component=r,n.setAttribute("scope",t)}return r(e,[{key:"__set",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3&&void 0!==arguments[3]&&arguments[3];Array.isArray(e)||(e=[e]),o.default.unisolate((function(){r&&(n.__component.__disableProxyRedefining=!0),i.default.setPropertyByKeys(e,a?n.__target:n,(function(e,n){return e?t:n||{}})),r&&(n.__component.__disableProxyRedefining=!1)}))}},{key:"__remove",value:function(){for(var e in o.default.removeScope(this.__name),this)this.hasOwnProperty(e)&&delete this[e]}}]),e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name=t,this.node=n,this.el=r,this.component=o}return o(e,[{key:"trigger",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.__removed||!n&&this.inEvaluating()||this.el.dispatchEvent(new CustomEvent(this.name,this.prepareOptions(r({detail:e},t))))}},{key:"dispatch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.__removed||!n&&this.inEvaluating()||this.el.dispatchEvent(new e(this.name,this.prepareOptions(t)))}},{key:"prepareOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e=r({bubbles:!0},e),this.node.__component.__prepareAttributeOut(this.node,e.detail),e}},{key:"inEvaluating",value:function(){var e=this.component.__evaluatingEvent;return!!e&&(e.el===this.el&&e.event.type===this.name&&e.component===this.component)}},{key:"bind",value:function(e){this.el.addEventListener(this.name,this.fn=e)}},{key:"unbind",value:function(){this.fn&&this.el.removeEventListener(this.name,this.fn)}},{key:"remove",value:function(){this.unbind(),delete this.name,delete this.node,delete this.component,delete this.el,this.__removed=!0}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(0)),o=i(n(1));function i(e){return e&&e.__esModule?e:{default:e}}var a=new Proxy({},{get:function(e,t){return"__target"==t?e:e[t]},set:function(e,t,n){return!!o.default.compare(e[t],n)||(n=o.default.copy(n,{plain:!0}),e[t]=n,r.default.root&&r.default.root.__storeTriggerByName(t,n),!0)},deleteProperty:function(e,t){return r.default.root&&r.default.root.__storeTriggerByName(t,void 0),delete e[t],!0}});t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(0));var o={},i=new Proxy(o,{get:function(e,t){return"__target"==t?o:e[t]},set:function(e,t,n){return e[t]=r.default.wrap(n,{tag:t}),!0},deleteProperty:function(e,t){return r.default.removeTag(t),delete e[t],!0}});t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(3)),i=s(n(0)),a=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.el.innerHTML="",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("route",this)}}]),r(t,[{key:"setTransition",value:function(e){var t=this,n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=e.path.state,o=function e(t){return t.parent?t.parent.component?t.parent.component.__scope.__transition.path:e(t.parent):null},s=function(e){t.empty();var n="component";if(r.component){var o=!1;for(var a in i.default.__components){if(i.default.__components[a]===r.component){n=a,o=!0;break}}if(!o)throw new Error('Router state "'+r.name+'" has no defined component')}return t.el.innerHTML="<"+n+">"+e+"</"+n+">",i.default.compile(t.el,{recompile:!0})};return this.__scope.__transition={parent:o(e.path),state:e.path.state,data:e.path.data,url:e.path.url,params:e.path.params,query:e.path.query,hash:e.path.hash},n?Promise.resolve().then((function(){return r.template?r.template:r.templateUrl?a.default.get(r.templateUrl).then((function(e){return e.data})):void 0})).then((function(e){return s(e)})):i.default.compile(this.el,{recompile:{checkChanges:!0}})}}]),t}(o.default);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Transition=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=c(n(0)),s=c(n(1)),u=c(n(4)),l=c(n(11));function c(e){return e&&e.__esModule?e:{default:e}}var f=t.Transition=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.url=t,this.previous=n,this.path=null,this.routes=[],this.states={},this.__cancelled=!1,this.__finished=!1}return i(e,[{key:"redirect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};return i=o({},h.transition.path.options,i),this.cancel(),h.state.call(h,e,t,n,r,i)}},{key:"reload",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return e=o({},this.path.params,e),t=o({},this.path.query,t),n=void 0===n?this.path.hash:n,this.redirect(this.path.state.name,e,t,n,r)}},{key:"setPath",value:function(e){e.parent=this.path||null,this.path=o({params:{},query:{}},e),this.routes.push(this.path),this.states[this.path.state.name]=this.path}},{key:"getRoute",value:function(e){for(var t=0,n=this.routes.length;t<n;t++){var r=this.routes[t];if(r.state===e)return r}return null}},{key:"hasState",value:function(e){return!!this.states[e.name]}},{key:"isRouteChanged",value:function(e){if(!this.previous)return!0;var t=e.state;if(!this.previous.hasState(t))return!0;var n=[];for(var r in t.fullPattern.replace(h.__paramRegex,(function(e,t,r){return n.push(r)})),t.params)-1==n.indexOf(r)&&n.push(r);var o=Object.keys(t.query),i=void 0!==t.hash,a=this.previous.getRoute(t),u={params:s.default.includeKeys(a.params,n),query:s.default.includeKeys(a.query,o)},l={params:s.default.includeKeys(e.params,n),query:s.default.includeKeys(e.query,o)};return i&&(u.hash=a.hash,l.hash=e.hash),!s.default.compare(u,l)}},{key:"cancel",value:function(){this.__cancelled=!0,this.finish()}},{key:"finish",value:function(){this.__finished=!0,delete this.previous;var e=h.__queue.indexOf(this);e>=0&&h.__queue.splice(e,1)}}]),e}(),h={baseUrl:"/",states:[],hashMode:!0,transition:null,__queue:[],__redirects:0,__init:!1,__paramRegex:/(\/?:([\w\d-]+))/g,__routeSelector:function(e){return e instanceof l.default},add:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("object"==(void 0===e?"undefined":r(e))&&(t=(n=e).pattern,e=n.state,delete n.pattern,delete n.state),!e)throw new Error("Router state must have a name");var i={template:"",templateUrl:"",abstract:!1,component:null,params:{},query:{},handler:function(){}};if(a.default.options.debug&&n.component&&(n.template||n.templateUrl)&&console.warn('Router state "'+e+'" must only have a component or template option'),n.template||n.templateUrl||n.component||(n.abstract=!0),this.has(e))throw new Error('Router state "'+e+'" is already exists');return this.setState(e,t,o({},i,n)),this},remove:function(e){for(var t=0,n=this.states.length;t<n;t++)if(this.states[t].name==e)return void this.states.splice(t,1)},has:function(e){for(var t=0,n=this.states.length;t<n;t++)if(this.states[t].name==e)return!0;return!1},state:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};if("object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e)),!e)throw new Error("Not found route state with name "+e);(s=o({},s)).manual=!0;var u=this.prepareStateArgs(e,t,n,a,s,!1);t=u.params,n=u.query,a=u.hash,s=u.options;var l=this.createStateUrl(e,t,n,a,s);return this.isolate((function(){return i.setUrl(l)})),this.changeState(s)},back:function(){return window.history.back.apply(window.history,arguments)},go:function(){return window.history.go.apply(window.history,arguments)},forward:function(){return window.history.forward.apply(window.history,arguments)},location:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(n=o({},n)).manual=!0,this.isolate((function(){return t.setUrl(e)})),this.changeState(n)},init:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=window.history.pushState;window.history.pushState=function(){var e=r.apply(this,arguments);return h.changeState().catch((function(e){return console.error(e)})),e},this.__onStateChangeHandler=function(){e.changeState().catch((function(e){return console.error(e)}))},this.defaultUrl=t,this.hashMode=n,this.states.sort((function(e,t){return(e=e.name.split(".").length)-(t=t.name.split(".").length)}));for(var o=0,i=this.states.length;o<i;o++)this.initState(this.states[o]);!this.states.length&&a.default.options.debug&&console.warn("You didn't add any routes to the router"),window.addEventListener("popstate",this.__onStateChangeHandler),this.__init=!0},initState:function(e){var t=[];if(e.children=[],(t=e.name.split(".")).pop(),e.level=e.abstract?null:t.length,t.length){var n=t.join("."),r=this.getState(n);if(!r)throw new Error('Not found parent route state "'+n+'" for "'+e.name+'"');null!==e.level&&r.abstract&&e.level--,e.fullPattern=this.splitSlashes(r.fullPattern+"/"+e.pattern),r.children.push(e)}else e.fullPattern=e.pattern},getState:function(e){for(var t=0,n=this.states.length;t<n;t++){var r=this.states[t];if(r.name==e)return r}return null},setState:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=o({},n,{name:e,pattern:t});return this.states.push(r),this.__init&&this.initState(r),r},removeState:function(e){for(var t=0,n=this.states.length;t<n;t++){if(this.states[t].name==e)return void this.states.splice(t,1)}},setUrl:function(e){this.hashMode?this.setHashUrl(e):this.setHistoryUrl(e)},setHistoryUrl:function(e){window.history.pushState(void 0,void 0,e)},setHashUrl:function(e){window.location.hash="#"+(e||"/")},replaceUrl:function(e){this.hashMode?this.replaceHashUrl(e):this.replaceHistoryUrl(e)},replaceHistoryUrl:function(e){window.history.replaceState(void 0,void 0,e)},replaceHashUrl:function(e){window.history.replaceState(void 0,void 0,"#"+(e||"/"))},getUrl:function(){return this.hashMode?this.getHashUrl():this.getHistoryUrl()},getHistoryUrl:function(){return window.location.pathname+window.location.search+window.location.hash},getHashUrl:function(){return window.location.hash.replace(/^#/,"")},getUrlQuery:function(){return this.hashMode?this.getHashUrlQuery():this.getHistoryUrlQuery()},getHistoryUrlQuery:function(){return u.default.paramsFromQuery(window.location.search.replace(/^\?/,""))},getHashUrlQuery:function(){return u.default.paramsFromQuery(window.location.hash.split("?")[1]||"")},createStateUrl:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},s=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];if("object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e)),a=o({},a),s){var l=this.prepareStateArgs(e,t,n,i,a);t=l.params,n=l.query,i=l.hash,a=l.options}var c=e.fullPattern.replace(this.__paramRegex,(function(e,n,r){return"/"+(t[r]||"")}));return c=c.replace(/^\^/,""),c=this.splitSlashes(c),Object.keys(n).length&&(c+="?"+u.default.paramsToQuery(n)),!this.hashMode&&i&&(c+="#"+i.replace("#","")),c},prepareStateArgs:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{},i={params:t,query:n,hash:r,options:o},a=0;a<27;a++){var u=this.prepareStateParams(e,t,i),l=this.prepareStateQuery(e,n,i),c=this.prepareStateHash(e,r,i);null===c?o.emptyHash=null:""===c&&(o.emptyHash="");var f={params:u,query:l,hash:c,options:o};if(s.default.compare(f,i))break;i=f}return i},prepareStateParams:function(e,t,n){"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var o=e.name.split(".");t=Object.assign({},t);for(var i=o.length-1;i>=0;i--){var a=o.slice(0,o.length-i).join(".");t=this.createStateObjectArgs(t,this.getState(a).params,n)}return t},prepareStateQuery:function(e,t,n){"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var o=e.name.split(".");t=Object.assign({},t);for(var i=o.length-1;i>=0;i--){var a=o.slice(0,o.length-i).join(".");t=this.createStateObjectArgs(t,this.getState(a).query,n)}return t},createStateObjectArgs:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{params:{},query:{}},r=Object.assign({},e);for(var o in t){var i=t[o];null!==r[o]&&("function"==typeof i&&(r[o]=i(n)),void 0===r[o]&&(r[o]=i))}for(var a in r)null===r[a]&&delete r[a];return r},prepareStateHash:function(e,t,n){if(null===t)return t;"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));for(var o=e.name.split("."),i=o.length-1;i>=0;i--){var a=o.slice(0,o.length-i).join(".");t=this.createStateHashArgs(t,this.getState(a).hash,n)}return t},createStateHashArgs:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{params:{},query:{}};return null===e?e:"function"==typeof t?t(n):void 0===e?t:e},splitSlashes:function(e){return e.replace(/[/]+/g,"/")},getPatternContent:function(e,t){"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var n=[],o={};t=(t=t.split("?")[0]).split("#")[0];var i=e.fullPattern.replace(this.__paramRegex,(function(e,t,r){return n.push(r),"/?([^/]*)"}));i=i.replace(/([^^/]+)[/]+$/,"$1");var a=new RegExp(i,"g");return t.match(a)?(t.replace(a,(function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];for(var a=0,s=(r=r.slice(0,r.length-2)).length;a<s;a++){var u=r[a];u&&(o[n[a]]=u)}})),{params:o}):null},isActiveState:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];"object"!==(void 0===e?"undefined":r(e))&&(e=this.getState(e));var n=h.transition&&!h.transition.__finished?h.transition.url:this.getUrl();n=this.splitSlashes("/"+n.split("?")[0]+"/");var o=e.fullPattern.replace(this.__paramRegex,"/?([^/]*)");o=o.replace(/^\^/,"").replace(/\$$/,"");var i=t?o:this.splitSlashes("^/"+o+"/$"),a=new RegExp(i);return a.test(n)},inActiveState:function(e){return h.isActiveState(e,!0)},getRoute:function(e){var t=this,n=0;return function r(o){var i=o.child(t.__routeSelector);return i?n==e?i:(n++,r(i)):null}(a.default.root)},getArrayPatternContent:function(e,t){for(var n=0,r=e.length;n<r;n++){var i=e[n],a=this.getPatternContent(i,t);if(a)return o({state:i},a)}return null},getStatesByLevel:function(e){for(var t=[],n=0,r=this.states.length;n<r;n++){var o=this.states[n];if(!(o.level<e)){if(o.level>e)break;t.push(o)}}return t},reload:function(){var e;if(!this.transition)throw new Error("Not found an active transition to reload the state");return(e=this.transition).reload.apply(e,arguments)},isolate:function(e){this.__isolated=!0;var t=e();return this.__isolated=!1,t},changeState:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.__isolated)return Promise.resolve();var n=this.getUrl(),r=new f(n);return this.__queue.push(r),new Promise((function(t){var n=setInterval((function(){e.__queue[0]===r&&(clearInterval(n),t())}))})).then((function(){r.previous=h.transition||null,h.transition=r,window.dispatchEvent(new CustomEvent("state-change",{detail:r}));var i={},s=e.getUrlQuery(),u=e.hashMode?"":window.location.hash.replace("#",""),l=0;return function a(c){if(!c.length)return Promise.resolve();var f=e.getArrayPatternContent(c,n);if(!f)return Promise.resolve();var h=f.state;r.setPath({state:h,component:d}),i=o({},i,f.params),u=u||t.emptyHash;var _=e.prepareStateArgs(h,i,s,u,t);i=_.params,s=_.query,u=_.hash,t=_.options,u=u||"";var p=e.createStateUrl(h,i,s,u,t,!1);e.isolate((function(){return e.replaceUrl(p)}));var d=h.abstract?null:e.getRoute(l);if(!d&&!h.abstract)throw new Error('Not found route component for state "'+h.name+'"');r.path.params=i,r.path.query=s,r.path.hash=u,r.path.url=p,r.path.options=t,!h.abstract&&l++;var v=!0;p!=n&&(v=r.isRouteChanged(r.path));var y=v&&!1!==t.reload;return Promise.resolve(y?h.handler(r):r.path.data).then((function(e){if(r.path.data=e,h.title&&(document.title="function"==typeof h.title?h.title(r):h.title),!r.__cancelled&&!h.abstract){var t=r.previous&&r.previous.getRoute(h);return t&&!t.loaded&&(y=!0),d.setTransition(r,y).then((function(){return r.path.loaded=!0}))}})).then((function(){return a(h.children)}))}(e.getStatesByLevel(0)).then((function(){if(!r.routes.length){if(e.__redirects)throw new Error('Wrong router default url "'+e.defaultUrl+'"');if(e.defaultUrl){if(e.defaultUrl==e.getUrl())throw new Error("Not found any routes");return e.isolate((function(){return e.replaceUrl(e.defaultUrl)})),e.__redirects++,r.finish(),e.changeState(t)}a.default.options.debug&&console.warn('Not found a default route. You can pass it in "router.init(defaultUrl)" function')}return t.saveScrollPosition||r.path&&r.path.hash||window.scrollTo(0,0),e.__redirects=0,r.finish(),window.dispatchEvent(new CustomEvent("state-changed",{detail:r})),r}))})).catch((function(e){throw r&&r.finish(),e}))},deinit:function(){window.removeEventListener("popstate",this.__onStateChangeHandler),this.__init=!1}};h.Transition=f,t.default=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Else=t.ElseIf=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(3)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c=function(e){function t(){var e;s(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.html=i.el.innerHTML,i.el.innerHTML="",i.state=!1,i.active=!1,i.recreate=!1,i.isCompiled=!1,i.display=getComputedStyle(i.el).display,i}return l(t,e),r(t,null,[{key:"define",value:function(){i.default.component("if",this),i.default.component("else-if",this.ElseIf),i.default.component("else",this.Else)}}]),r(t,[{key:"compiled",value:function(){return this.attr("recreate",this.setRecreation),this.attr("is",this.setIs)}},{key:"setIs",value:function(e){return this.state=!!e,this.setState()}},{key:"setActivity",value:function(e){this.active=e}},{key:"setRecreation",value:function(e){this.recreate=e}},{key:"setState",value:function(){var e,t=this.compilation(),n=this.el.nextElementSibling;if(n&&n.matches("else-if,else"))return n.__akili.setActivity(this.active||this.state),n.__akili.setRecreation(this.recreate),e=n.__akili.setState(),Promise.resolve(t).then((function(){return e}))}},{key:"compilation",value:function(){var e=Promise.resolve();return this.state&&!this.active?(!this.recreate&&this.isCompiled||(e=this.compile()),this.el.style.setProperty("display",this.display,"important")):(this.recreate?this.empty():this.isCompiled||(e=this.compile()),this.el.style.setProperty("display","none","important")),e}},{key:"compile",value:function(){var e;return this.empty(),this.el.innerHTML=this.html,e=i.default.compile(this.el,{recompile:!0}),this.isCompiled=!0,e}}]),t}(o.default);c.transparent=!0,c.matches="[is]",c.booleanAttributes=["recreate"],t.default=c;var f=t.ElseIf=function(e){function t(){var e;s(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.active=!0,i}return l(t,e),t}(c),h=t.Else=function(e){function t(){var e;s(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.el.setAttribute("is","true"),i}return l(t,e),t}(f);h.matches="",c.ElseIf=f,c.Else=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Option=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(6),s=c(a),u=c(n(1)),l=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var p=function(e){function t(){var e;f(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=h(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.iteratorTagName="option",i.isMultiple=!1,i}return _(t,e),i(t,null,[{key:"define",value:function(){l.default.component("select",this),l.default.component("option",this.Option)}}]),i(t,[{key:"compiled",value:function(){var e=this;this.el.addEventListener("change",(function(){return e.el.content=e.getContent()}));var n=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments);return this.attr("multiple",this.setMultiple),this.attr("content",this.setContent),this.attr("in",this.drawSelect),n}},{key:"setMultiple",value:function(e){this.isMultiple=e,this.changeValue(this.formatValue(u.default.copy(this.el.content)))}},{key:"setContent",value:function(e){this.changeValue(this.formatValue(e))}},{key:"drawSelect",value:function(){for(var e=[],t=0,n=this.el.options.length;t<n;t++){var r=this.el.options[t].__akili,o=r.attrs.selected;o&&e.push(r.el.value),r.el.selected=o}e.length?this.changeValue(this.formatValue(e)):this.redefine()}},{key:"createIteratorElement",value:function(){var e=o(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"createIteratorElement",this).apply(this,arguments);return e.hasAttribute("value")||e.setAttribute("value",this.html.trim()),e}},{key:"getContent",value:function(){if(!this.isMultiple)return this.el.value;for(var e=[],t=0,n=this.el.options.length;t<n;t++){var r=this.el.options[t];r.selected&&e.push(r.value)}return e}},{key:"formatValue",value:function(e){return this.isMultiple?Array.isArray(e)||(e=null!=e?[e]:[]):Array.isArray(e)?e=e.length?e[0]:"":"object"!=(void 0===e?"undefined":r(e))&&"function"!=typeof e||(e=""),e}},{key:"redefine",value:function(){this.changeValue(this.getContent())}},{key:"changeValue",value:function(e){if(!u.default.compare(this.el.content,e)){if(Array.isArray(e)){this.el.value=e[e.length-1];for(var t=0,n=this.el.options.length;t<n;t++){var r=this.el.options[t];r.selected=-1!=e.indexOf(r.value)}}else{this.el.value=e;for(var o=0,i=this.el.options.length;o<i;o++){var a=this.el.options[o];a.selected=a.value==e}}this.el.content=e,this.attrs.onChange.dispatch(Event,{bubbles:!0})}}}]),t}(s.default);p.booleanAttributes=["multiple"].concat(s.default.booleanAttributes),p.events=["change"].concat(s.default.events),t.default=p;var d=t.Option=function(e){function t(){return f(this,t),h(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return _(t,e),i(t,[{key:"__getParsedExpression",value:function(e){return u.default.decodeHtmlEntities(e)}},{key:"changedSelected",value:function(e){this.setSelected(e)}},{key:"setSelected",value:function(e){this.el.selected=e,this.for.redefine()}}]),t}(a.Loop);d.booleanAttributes=["selected"],p.Option=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=s(n(5)),a=s(n(0));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.isCheckbox="checkbox"==i.el.type,i.isRadio="radio"==i.el.type,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"define",value:function(){a.default.component("input",this)}}]),o(t,[{key:"compiled",value:function(){return(this.isCheckbox||this.isRadio)&&this.attr("checked",this.setChecked),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}},{key:"setChecked",value:function(e){e=!!e,this.el.checked!==e&&(this.el.checked=e,this.__isCompiled&&this.attrs.onChange.dispatch(Event,{bubbles:!0}),this.isRadio&&this.changeRadio())}},{key:"setValue",value:function(){r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"setValue",this).apply(this,arguments),this.isRadio&&this.attrs.onChange.dispatch(Event,{bubbles:!0})}},{key:"changeRadio",value:function(){for(var e="input[type=radio][name='"+this.el.getAttribute("name")+"']:not([scope='"+this.scope.__name+"'])",t=a.default.root.children(e),n=0,r=t.length;n<r;n++){var o=t[n];o.setChecked(o.el.checked)}}}]),t}(i.default);u.booleanAttributes=["checked","multiple"].concat(i.default.booleanAttributes),u.events=["change"].concat(i.default.events),t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RadioButton=void 0;var r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var i=Object.getPrototypeOf(t);return null===i?void 0:e(i,n,r)}if("value"in o)return o.value;var a=o.get;return void 0!==a?a.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(6),a=u(i),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var h=function(e){function t(){var e;l(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.iterable=i.el.hasAttribute("in"),i}return f(t,e),o(t,null,[{key:"define",value:function(){s.default.component("radio",this),s.default.component("radio-button",this.RadioButton)}}]),o(t,[{key:"created",value:function(){if(this.iterable)return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"created",this).apply(this,arguments)}},{key:"compiled",value:function(){var e=this;if(this.el.addEventListener("change",(function(){s.default.nextTick((function(){var t=e.getRadioValue();t!==e.prevValue&&(e.prevValue=t,e.attrs.onRadio.trigger(t,{bubbles:!0}))}))})),this.iterable)return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}},{key:"resolved",value:function(){var e=this;if(this.attr("in",(function(){return e.setNames()}),{callOnStart:!1}),this.attr("value",this.setValue),this.attr("name",this.setNames),this.iterable)return r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"resolved",this).apply(this,arguments)}},{key:"setNames",value:function(e){for(var t=this.children("input[type=radio]"),n=0,r=t.length;n<r;n++)t[n].el.setAttribute("name",e||this.attrs.name)}},{key:"setValue",value:function(e){if(e!==this.prevValue){var t=this.prevValue,n=this.children("input[type=radio]"),r=!1;this.prevValue=e;for(var o=0,i=n.length;o<i;o++){var a=n[o],s=a.el.value===e;s&&(r=!0),a.setChecked(s)}if(!r)if(null===e){if(void 0===t)return}else this.prevValue=void 0,e=null;this.attrs.onRadio.trigger(e,{bubbles:!0})}}},{key:"getRadioValue",value:function(){for(var e=this.children("input[type=radio]"),t=0,n=e.length;t<n;t++){var r=e[t];if(r.el.checked)return r.el.value}return null}}]),t}(a.default);h.matches="[name]",h.events=["radio"].concat(a.default.events),t.default=h;var _=t.RadioButton=function(e){function t(){var e;l(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)))}return f(t,e),o(t,[{key:"compiled",value:function(){return this.attr("value","value"),r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"compiled",this).apply(this,arguments)}}]),t}(i.Loop);_.template='<label><input type="radio" value="${this.value}"/>${this.__content}</label>',h.RadioButton=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(5)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("textarea",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(5)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.el.hasAttribute("editable")&&(i.el.setAttribute("contenteditable",i.el.getAttribute("editable")),i.el.removeAttribute("editable")),"inline"==getComputedStyle(i.el).display&&(i.el.style.display="block"),i.valueKey="innerHTML",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("content",this),i.default.alias("[contenteditable]","content")}}]),r(t,[{key:"setElementFocus",value:function(){var e=document.createRange(),t=window.getSelection();e.selectNodeContents(this.el),e.collapse(!1),t.removeAllRanges(),t.addRange(e),this.el.focus()}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(3)),i=s(n(0)),a=s(n(4));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.html=i.el.innerHTML,i.el.innerHTML="",i.connection=null,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("include",this)}}]),r(t,[{key:"compiled",value:function(){return this.attr("cache",this.setCache),this.attr("url",this.setTemplate)}},{key:"setCache",value:function(e){this.cache=e}},{key:"setTemplate",value:function(e){var t=this;return this.connection&&this.connection.abort(),a.default.get(e,{cache:this.cache,onStart:function(e){t.connection=e}}).then((function(e){return t.connection=null,t.empty(),t.el.innerHTML=t.html,i.default.setTemplate(t.el,e.data),i.default.compile(t.el,{recompile:!0}).then((function(){t.attrs.onLoad.trigger(void 0,{bubbles:!1})}))})).catch((function(e){throw t.attrs.onError.trigger(e,{bubbles:!1}),e}))}}]),t}(o.default);u.transparent=!0,u.matches="[url]",u.events=["load","error"],t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("iframe",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("img",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("embed",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("audio",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("video",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("track",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("source",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(2)),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.urlAttribute="data",i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,null,[{key:"define",value:function(){i.default.component("object",this)}}]),t}(o.default);t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(3)),a=u(n(12)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return i.state=null,i.params={},i.query={},i.options={},i.isUrl=i.el.hasAttribute("url"),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,null,[{key:"define",value:function(){s.default.component("a",this)}}]),o(t,[{key:"compiled",value:function(){var e=this;this.el.addEventListener("click",(function(t){t.preventDefault(),e.isUrl?a.default.location(e.attrs.url,e.options):a.default.state(e.state.name,e.params,e.query,e.hash,e.options)})),this.onStateChanged=function(){return e.state&&e.setActivity()},window.addEventListener("state-changed",this.onStateChanged),this.attr("state",this.setState),this.attr("params",this.setParams),this.attr("query",this.setQuery),this.attr("hash",this.setHash),this.attr("options",this.setOptions),this.attr("url",this.setUrl),this.attr("state",this.resetHref,{callOnStart:!1}),this.attr("params",this.resetHref,{callOnStart:!1}),this.attr("query",this.resetHref,{callOnStart:!1}),this.attr("hash",this.resetHref,{callOnStart:!1}),this.attr("url",this.resetHref,{callOnStart:!1}),this.resetHref()}},{key:"removed",value:function(){window.removeEventListener("state-changed",this.onStateChanged)}},{key:"setUrl",value:function(e){this.url=e}},{key:"setState",value:function(e){this.state=this.getState(e),this.setActivity()}},{key:"setActivity",value:function(){this.scope.isActiveState=a.default.isActiveState(this.state),this.scope.inActiveState=a.default.inActiveState(this.state)}},{key:"setParams",value:function(e){if("object"!=(void 0===e?"undefined":r(e))||!e)throw new Error("Router state params must be an object");this.params=e}},{key:"setQuery",value:function(e){if("object"!=(void 0===e?"undefined":r(e))||!e)throw new Error("Router state query must be an object");this.query=e}},{key:"setHash",value:function(e){if("string"!=typeof e&&null!=e)throw new Error("Router state hash must be a string|null");this.hash=e}},{key:"setOptions",value:function(e){if("object"!=(void 0===e?"undefined":r(e))||!e)throw new Error("Router state options must be an object");this.options=e}},{key:"getState",value:function(e){var t=a.default.getState(e);if(!t)throw new Error('Not found router state with name "'+e+'"');return t}},{key:"resetHref",value:function(){this.url?this.attrs.href=this.url:this.attrs.href=a.default.createStateUrl(this.state,this.params,this.query,this.hash,this.options)}}]),t}(i.default);l.matches="[state]:not([url]),[url]:not([state])",l.controlAttributes=!0,t.default=l}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ba2lsaS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vQWtpbGkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvYWtpbGkuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50cy91cmwuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50LmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL3NlcnZpY2VzL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50cy90ZXh0LmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvZm9yLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL3Njb3BlLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2V2ZW50LWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvc2VydmljZXMvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvZ2xvYmFscy5qcyIsIndlYnBhY2s6Ly9Ba2lsaS8uL3NyYy9jb21wb25lbnRzL3JvdXRlLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL3NlcnZpY2VzL3JvdXRlci5qcyIsIndlYnBhY2s6Ly9Ba2lsaS8uL3NyYy9jb21wb25lbnRzL2lmLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvc2VsZWN0LmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvaW5wdXQuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50cy9yYWRpby5qcyIsIndlYnBhY2s6Ly9Ba2lsaS8uL3NyYy9jb21wb25lbnRzL3RleHRhcmVhLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvY29udGVudC5qcyIsIndlYnBhY2s6Ly9Ba2lsaS8uL3NyYy9jb21wb25lbnRzL2luY2x1ZGUuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50cy9pZnJhbWUuanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50cy9pbWFnZS5qcyIsIndlYnBhY2s6Ly9Ba2lsaS8uL3NyYy9jb21wb25lbnRzL2VtYmVkLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvYXVkaW8uanMiLCJ3ZWJwYWNrOi8vQWtpbGkvLi9zcmMvY29tcG9uZW50cy92aWRlby5qcyIsIndlYnBhY2s6Ly9Ba2lsaS8uL3NyYy9jb21wb25lbnRzL3RyYWNrLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvc291cmNlLmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvb2JqZWN0LmpzIiwid2VicGFjazovL0FraWxpLy4vc3JjL2NvbXBvbmVudHMvYS5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ3aW5kb3ciLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQWtpbGkiLCJkZWJ1ZyIsInRyaWdnZXJJbml0IiwiQ29tcG9uZW50IiwiRXZlbnRFbWl0dGVyIiwiU2NvcGUiLCJ1dGlscyIsImdsb2JhbHMiLCJjb21wb25lbnRzIiwiQSIsIkF1ZGlvIiwiQ29udGVudCIsIkZvciIsIkVtYmVkIiwiSWYiLCJJbmNsdWRlIiwiSW5wdXQiLCJJZnJhbWUiLCJJbWFnZSIsIk9iamVjdHMiLCJSYWRpbyIsIlJvdXRlIiwiU2VsZWN0IiwiU291cmNlIiwiVGV4dCIsIlRleHRhcmVhIiwiVHJhY2siLCJVcmwiLCJWaWRlbyIsInNlcnZpY2VzIiwicmVxdWVzdCIsInJvdXRlciIsInN0b3JlIiwiY2xlYXJHbG9iYWxzIiwidGhpcyIsIl9fd2luZG93IiwiRWxlbWVudCIsIkFycmF5Iiwib3B0aW9ucyIsInVud3JhcCIsInNldFRpbWVvdXQiLCJzZXRJbnRlcnZhbCIsIlByb21pc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX19vbkVycm9yIiwiam9pbkJpbmRpbmdLZXlzIiwia2V5cyIsIm1hcCIsImVsIiwidG9TdHJpbmciLCJqb2luIiwiYWRkU2NvcGUiLCJzY29wZSIsIl9fc2NvcGVzIiwiX19uYW1lIiwiRXJyb3IiLCJnZXRTY29wZSIsInJlbW92ZVNjb3BlIiwiZ2V0QWtpbGlQYXJlbnRzIiwidHJlZSIsImFyciIsImNoZWNrIiwibm9kZSIsInBhcmVudE5vZGUiLCJfX2FraWxpIiwicHVzaCIsInNldFRlbXBsYXRlIiwidGVtcGxhdGUiLCJyZXBsYWNlIiwiaW5uZXJIVE1MIiwiY3JlYXRlU2NvcGVOYW1lIiwiY3JlYXRlUmFuZG9tU3RyaW5nIiwic3RyIiwiaXNvbGF0ZSIsImZuIiwiX19pc29sYXRpb24iLCJyZXMiLCJwcm9wcyIsImsiLCJsZW5ndGgiLCJwcm9wIiwidmFsIiwiZ2V0UHJvcGVydHlCeUtleXMiLCJjb21wb25lbnQiLCJfX3Njb3BlIiwiX19pc1Jlc29sdmVkIiwiX190cmlnZ2VyU3RvcmVBbmRBdHRyIiwiX19ldmFsdWF0ZUJ5S2V5cyIsImlzRGVsZXRlZCIsInVuZXZhbHVhdGUiLCJldmFsdWF0aW9uIiwiX19ldmFsdWF0aW9uIiwid3JhcHBpbmciLCJfX3dyYXBwaW5nIiwidW5pc29sYXRlIiwiaXNvbGF0aW9uIiwibmV4dFRpY2siLCJyZXNvbHZlIiwidGhlbiIsImluaXRpYWxpemUiLCJyZWNvbXBpbGUiLCJfX3JlY29tcGlsZSIsImlzUm9vdCIsIl9fcm9vdCIsImNvbXBvbmVudE5hbWUiLCJ0b0Rhc2hDYXNlIiwiZ2V0QXR0cmlidXRlIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiX0NvbXBvbmVudCIsIl9fY29tcG9uZW50cyIsIkNIRUNLX0FMSUFTRVMiLCJzZWxlY3RvcnMiLCJfX2FsaWFzZXMiLCJzZWxlY3RvckFsbCIsIm1hdGNoZXMiLCJzZWxlY3RvciIsIl9fY2FuY2VsbGVkIiwiZmluZCIsIl9fcHJldmVudCIsIl9fY3JlYXRlIiwiY29tcGlsZSIsImVsZW1lbnRzIiwiQUtJTElfU1NSIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZSIsIm5lc3RlZEluaXRpYWxpemluZyIsImNoaWxkcmVuIiwiX19jb21waWxlIiwiYWxsIiwiX19yZXNvbHZlIiwiY29uc29sZSIsIndhcm4iLCJyZW1vdmVDb21wb25lbnQiLCJhbGlhcyIsInJlbW92ZUFsaWFzIiwiaXNvbGF0ZUFycmF5UHJvdG90eXBlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9sZCIsIl9faXNQcm94eSIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNvbGF0ZVdpbmRvd0Z1bmN0aW9ucyIsImNyZWF0ZUNhbGxiYWNrSXNvbGF0aW9uIiwiY29uc3RydWN0b3IiLCJjYXRjaCIsImlzb2xhdGVHbG9iYWxzIiwiX190YXJnZXQiLCJ3cmFwIiwiaXNvbGF0ZUV2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfX2FraWxpTGlzdGVuZXJzIiwiYXJncyIsInNsaWNlIiwibGluayIsImxpc3RlbmVyIiwic3BsaWNlIiwicG9zIiwiaXNBcnJheSIsIm51bSIsImluZGV4IiwiY2FsbGJhY2siLCJfX2lzb2xhdGVkIiwib2JqIiwiY3VycmVudCIsIndyYXBGdW5jdGlvbiIsImRlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInJldmVyc2UiLCJha2lsaVdyYXBwZWRGdW5jdGlvbiIsInRhZyIsImFkZFRhZyIsImhhc1RhZyIsIl9fdGFncyIsInJlbW92ZVRhZyIsInVuZGVmaW5lZCIsInRyaWdnZXJUYWciLCJfX2NvbXBvbmVudCIsIl9fZXZhbHVhdGVOb2RlIiwiaGFuZGxlRXJyb3JzIiwic3RhdHVzIiwiX19pbml0IiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiaW5pdCIsImRvY3VtZW50IiwiYm9keSIsIl9fcm9vdE91dGVySFRNTCIsIm91dGVySFRNTCIsImRvY3VtZW50RWxlbWVudCIsIkFLSUxJX1NFUlZFUiIsImluaXRTZXJ2ZXJTaWRlSHRtbCIsImh0bWwiLCJpbml0U2VydmVyU2lkZVJlcXVlc3RDYWNoZSIsInJlcXVlc3RDYWNoZSIsIkFLSUxJX0NMSUVOVCIsInByZXBhcmVTZXJ2ZXJTaWRlSHRtbCIsImNoYW5nZVN0YXRlIiwicHJlcGFyZVNlcnZlclNpZGVSZXF1ZXN0Q2FjaGUiLCJlcnIiLCJkZWluaXQiLCJfX3N0b3JlTGlua3MiLCJkZXN0cm95Iiwic3RvcmVLZXlzIiwiYXR0cmlidXRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInF1ZXJ5U2VsZWN0b3IiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwiaW5zdGFuY2UiLCJfX2NhY2hlIiwiX19pbnN0YW5jZXMiLCJjYWNoZSIsIl9fbWFpbiIsImNsYXNzZXMiLCJzdHlsZXMiLCJkZWwiLCJleGNsdWRlIiwiZXhwcyIsImxhc3QiLCJzcGxpdCIsIlJlZ0V4cCIsImluZGV4T2YiLCJvcGVuIiwiaGFuZGxlciIsIm1hdGNoIiwiaXRlbSIsImZpbHRlcmVkIiwib3JkZXIiLCJzb3J0IiwiYSIsImIiLCJEYXRlIiwiZ2V0VGltZSIsIm5leHQiLCJhViIsImJWIiwibmV3T2JqIiwib2JqS2V5cyIsIm5lc3RlZCIsInBsYWluIiwiaXNQbGFpbk9iamVjdCIsImlzU2NvcGVQcm94eSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY2xlYXJVbmRlZmluZWQiLCJpZ25vcmVVbmRlZmluZWQiLCJhS2V5cyIsImJLZXlzIiwiY29tcGFyZSIsInNvdXJjZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJTdHJpbmciLCJoYXNoIiwiY2hhckNvZGVBdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsInRvVXBwZXJDYXNlIiwicmVkdWNlIiwiaGFzIiwidGFyZ2V0IiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJub3ciLCJkZWxheSIsImNsZWFyVGltZW91dCIsIl9fZGVib3VuY2VUaW1lb3V0IiwidXJsQXR0cmlidXRlIiwic2V0VXJsIiwidXJsIiwiYXR0cnMiLCJldmFsdWF0aW9uUmVnZXgiLCJldmFsdWF0aW9uUmVnZXhHbG9iYWwiLCJzeXN0ZW1BdHRyaWJ1dGVzIiwiX19pc01vdW50ZWQiLCJfX2lzQ29tcGlsZWQiLCJfX2JpbmRpbmdzIiwiX19ldmFsdWF0aW5nRXZlbnQiLCJfX3JlY29tcGlsaW5nIiwiX19jb21waWxpbmciLCJfX2Rpc2FibGVQcm94eSIsIl9fZGlzYWJsZVN0b3JlS2V5cyIsIl9fZGlzYWJsZUF0dHJLZXlzIiwiX19jaGlsZHJlbiIsIl9fcGFyZW50IiwiX19wYXJlbnRzIiwiX19jb250ZW50IiwiX19hdHRycyIsIl9fYXR0ckxpbmtzIiwiX19hdHRyaWJ1dGVPZiIsIl9fZXZhbHVhdGlvbkNvbXBvbmVudCIsImNvbnRleHQiLCJleHByZXNzaW9uIiwidmFyaWFibGVzIiwidmFycyIsIkZ1bmN0aW9uIiwiY2hlY2tDaGFuZ2VzIiwic2V0RXZlbnRzIiwic2V0UGFyZW50cyIsInNldEJvb2xlYW5BdHRyaWJ1dGVzIiwiZGVmaW5lQXR0cmlidXRlcyIsIl9fY3JlYXRlQ29tcGlsYXRpb25PcHRpb25zIiwiX19jcmVhdGVSZWNvbXBpbGF0aW9uT3B0aW9ucyIsIl9fc2V0RXZlbnRzIiwiX19zZXRQYXJlbnRzIiwiX19zZXRCb29sZWFuQXR0cmlidXRlcyIsIl9fZGVmaW5lQXR0cmlidXRlcyIsIl9faW5pdGlhbGl6ZSIsImNyZWF0ZWQiLCJjb250cm9sIiwiX19jb250cm9sQXR0cmlidXRlcyIsIl9fZXZhbHVhdGlvblBhcmVudCIsIm5ld1BhcmVudCIsIl9faW50ZXJwb2xhdGVBdHRyaWJ1dGVzIiwiaW50ZXJwb2xhdGUiLCJwYXJlbnQiLCJjaGlsZCIsIm5vZGVUeXBlIiwiX19pbml0aWFsaXplTm9kZSIsImNoaWxkTm9kZXMiLCJvblJlY29tcGlsZWQiLCJ0cmlnZ2VyIiwiYnViYmxlcyIsInJlY29tcGlsZWQiLCJvbkNvbXBpbGVkIiwiY29tcGlsZWQiLCJ0ZW1wbGF0ZVVybCIsInRlbXBsYXRlQ2FjaGUiLCJkYXRhIiwib25SZXNvbHZlZCIsInJlc29sdmVkIiwiX3Njb3BlIiwiYXNzaWduIiwiY29udHJvbEF0dHJpYnV0ZXMiLCJldmVudHMiLCJfX2V2ZW50cyIsIl9fbmVzdGVkT2JzZXJ2ZSIsImJvb2xlYW5BdHRyaWJ1dGVzIiwiY29uY2F0IiwiaHRtbEJvb2xlYW5BdHRyaWJ1dGVzIiwic2V0QXR0ciIsIm5vZGVOYW1lIiwiaGFzQXR0cmlidXRlIiwiZXYiLCJ0ZXN0IiwicGFyZW50cyIsImV2YWx1YXRpb25QYXJlbnQiLCJ0cmFuc3BhcmVudCIsIl9fZGV0YWNoIiwiX19hZGRDaGlsZCIsInNldFByb3RvdHlwZU9mIiwiX19wcm9wZXJ0aWVzIiwiX19jb21wYXJlTm9kZVByb3BlcnR5VmFsdWUiLCJfX2dldE5vZGVQcm9wZXJ0eSIsImNyZWF0ZUhhc2giLCJlbGVtZW50TmFtZSIsIl9fZWxlbWVudCIsImF0dHJpYnV0ZU5hbWUiLCJBdHRyIiwibWVzc2FnZXMiLCJtZXNzYWdlIiwiX19leHByZXNzaW9uIiwidHJpbSIsImNvdW50ZXIiLCJhdHRyaWJ1dGVWYWx1ZSIsImV2YWxDb21wb25lbnQiLCJjb20iLCJldmFsdWF0ZSIsImV4aXN0aW5nQmluZGluZ3MiLCJwYXJlbnRCaW5kaW5ncyIsInBhcnNlVmFsdWUiLCJfX2dldFBhcnNlZEV4cHJlc3Npb24iLCJsaXN0IiwicGFyc2UiLCJfX2NyZWF0ZUV4Y2VwdGlvbk1lc3NhZ2UiLCJfX2NyZWF0ZUtleXNIYXNoIiwicGFyZW50c0hhc2giLCJub3RCaW5kaW5nIiwicGFyZW50VmFsdWUiLCJyZWFsQ29tcG9uZW50IiwiX19iaW5kQW5kU2V0UHJvcGVydHkiLCJldmFsdWF0ZWQiLCJtYWtlQXR0cmlidXRlVmFsdWUiLCJlIiwiX19nZXRCb3VuZE5vZGUiLCJfX2JpbmQiLCJfX3NldE5vZGVQcm9wZXJ0eSIsIndpdGhvdXRQYXJlbnRzIiwibGFzdFByb3BzIiwicHJvcHNMZW5ndGgiLCJlbEV2YWx1YXRlIiwiZWxlbWVudCIsIl9fZ2V0QmluZCIsIl9fZGF0YSIsIl9fZ2V0QWxsQmluZHMiLCJfX2luaXRpYWxpemVkIiwiX19jaGVja05vZGVQcm9wZXJ0eUNoYW5nZSIsIl9fZGlzYWJsZUtleXMiLCJjaGVja1Byb3AiLCJfayIsIl9fc2V0IiwiX3Byb3AiLCJfX2VuYWJsZUtleXMiLCJ1bmJpbmQiLCJfX2lzU3lzdGVtQmluZGluZ0tleSIsImhhc0tleSIsIl9rZXlzIiwiX19rZXlzIiwiX2lzRGVsZXRlZCIsInNoaWZ0IiwiaGFzUHJvcGVydHlCeUtleXMiLCJfX2V2YWx1YXRlTmVzdGVkIiwiX191bmJpbmQiLCJkZWxldGVQcm9wZXJ0eUJ5S2V5cyIsImV4ZWMiLCJldmVudCIsIl9fY2hlY2tFdmFsdWF0aW9uIiwiX19ldmFsdWF0ZSIsImlzQm9vbGVhbkF0dHJpYnV0ZSIsImNsZWFyQXR0cmlidXRlIiwiY2FtZWxBdHRyaWJ1dGUiLCJ0b0NhbWVsQ2FzZSIsIl9fYXR0cmlidXRlT24iLCJfX3ByZXBhcmVBdHRyaWJ1dGVJbiIsIl9fZGlzYWJsZUF0dHJpYnV0ZVNldHRlciIsIl9fYXR0clRyaWdnZXJCeU5hbWUiLCJjb3B5IiwiYXR0cmlidXRlT2YiLCJldmVudE5hbWUiLCJfX2lzRXZlbnQiLCJfX2V2ZW50IiwiZW1pdHRlciIsIl9faGFzQmluZGluZ3MiLCJfX2V2YWx1YXRlRXZlbnQiLCJpc0F0dHIiLCJoYXNCaW5kaW5ncyIsImlzQm9vbGVhbiIsImlzRXZlbnQiLCJfX2lzQm9vbGVhbiIsInNhdmVCaW5kaW5ncyIsIl9fdW5iaW5kQnlOb2RlcyIsIl9fdW5iaW5kUGFyZW50c0J5Tm9kZXMiLCJfX2luaXRpYWxpemVBdHRyaWJ1dGUiLCJjaGFuZ2VBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiX19kZWluaXRpYWxpemVOb2RlIiwiUHJveHkiLCJzZXQiLCJhdHRyS2V5IiwiZGVsZXRlUHJvcGVydHkiLCJfX2lzU3lzdGVtS2V5IiwiZXhjQXJyIiwicmVhbFRhcmdldCIsImdldE93blByb3BlcnR5VGFyZ2V0IiwiZm9yUGFyZW50cyIsImZvckRhdGEiLCJwb3AiLCJnZXRFbnVtZXJhYmxlUHJvcGVydHlUYXJnZXQiLCJfX2JpbmROb2RlIiwiX19jaGVja0Rpc2FibGVtZW50IiwiQ0hFQ0tfRVhJU1RFTkNFIiwidGFyZ2V0UGFyZW50VmFsdWUiLCJfX2NyZWF0ZUlzb2xhdGlvbk9iamVjdCIsImN1cnJlbnRLZXlzIiwiY3VycmVudEtleVN0cmluZyIsIl9fc3RvcmVUcmlnZ2VyQnlLZXlzIiwiX19hdHRyVHJpZ2dlckJ5S2V5cyIsInR5cGUiLCJwcm94eSIsIl9fZ2V0RGlzYWJsZW1lbnRUeXBlU3RvcmUiLCJfX2FsbCIsImxpbmtzIiwiX19zdG9yZVRyaWdnZXJCeU5hbWUiLCJrZXlTdHJpbmciLCJpbmZvIiwiZGF0ZSIsImNhbGxPblN0YXJ0IiwiY2FwaXRhbGl6ZSIsImF0dHJzS2V5cyIsImZpbHRlciIsInN0YXJ0S2V5cyIsIm9ic2VydmUiLCJDSEVDS19QUk9YWSIsIl9fZGlzYWJsZVByb3h5UmVkZWZpbmluZyIsInRhcmdldEtleXMiLCJfX29ic2VydmUiLCJpc29sYXRpb25IYXNoIiwidXBkYXRlZEF0IiwicGFyZW50S2V5c1N0cmluZyIsImtleXNTdHJpbmciLCJjb2xsZWN0Iiwicm9vdEF0dHJzIiwibm9kZXMiLCJfX21hcE5vZGVzIiwic2V0UHJvcGVydHlCeUtleXMiLCJfX2RlbGV0ZU5vZGVQcm9wZXJ0eSIsIk5vZGUiLCJqIiwib25SZW1vdmVkIiwicmVtb3ZlZCIsImRldGFjaE5vZGVzIiwiZGVpbml0aWFsaXplTm9kZXMiLCJfX2VtcHR5IiwiX19jbGVhclN0b3JlTGlua3MiLCJfX3JlbW92ZSIsIl9fc3BsaWNlQ2hpbGQiLCJfX3JlbW92ZUNoaWxkcmVuIiwiZmluZEFsbCIsImxldmVscyIsImxldmVsIiwicmlnaHQiLCJsZXZlbEVsZW1lbnRzIiwidW5zaGlmdCIsIl9fc3RvcmVCeUZ1bmN0aW9uIiwiX19zdG9yZUJ5S2V5cyIsIl9fYXR0ckJ5RnVuY3Rpb24iLCJfX2F0dHJCeUtleXMiLCJfX3Vuc3RvcmVCeUZ1bmN0aW9uIiwiX191bnN0b3JlQnlLZXlzIiwiX191bmF0dHJCeUZ1bmN0aW9uIiwiX191bmF0dHJCeUtleXMiLCJfX2dldFBhcmVudCIsIl9fZ2V0Q2hpbGRyZW4iLCJfX2dldE5lYXIiLCJhcHBlbmRDaGlsZCIsIl9fdHJhbnNpdGlvbiIsIlJlcXVlc3QiLCJiYXNlVXJsIiwiZGVmYXVsdHMiLCJnZXRIZWFkZXJzIiwieGhyIiwiaGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImxpbmUiLCJzdGF0dXNFcnJvclBhdHRlcm4iLCJyZWplY3QiLCJtZXRob2QiLCJYTUxIdHRwUmVxdWVzdCIsImJlZm9yZSIsInRyYW5zZm9ybUJlZm9yZSIsIm9uU3RhcnQiLCJqc29uIiwicmVzcG9uc2VUeXBlIiwiZm9ybSIsImNyZWF0ZUZvcm1EYXRhIiwicGFyYW1zIiwicGFyYW1zVG9RdWVyeSIsImNyZWF0ZUNhY2hlSGFzaCIsInVzZXIiLCJwYXNzd29yZCIsIl9jYWNoZSIsImdldENhY2hlIiwiY3JlYXRlZEF0IiwidHJhbnNmb3JtQWZ0ZXIiLCJyZXN1bHQiLCJ0aW1lb3V0Iiwid2l0aENyZWRlbnRpYWxzIiwiaGVhZGVyS2V5cyIsInNldFJlcXVlc3RIZWFkZXIiLCJvblByb2dyZXNzIiwib25wcm9ncmVzcyIsIm9ubG9hZCIsInJlc3BvbnNlIiwicmVhZHlTdGF0ZSIsInN0YXR1c1RleHQiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZVhNTCIsInJlc3BvbnNlVVJMIiwiY3JlYXRlQ2FjaGUiLCJvbnRpbWVvdXQiLCJvbmVycm9yIiwic2VuZCIsImtzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidiIsIm9wdCIsInF1ZXJ5IiwiYW1wcyIsImVxcyIsImRlY29kZVVSSUNvbXBvbmVudCIsIm5hbWVzcGFjZSIsImZkIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJ0b0lTT1N0cmluZyIsImFkZEluc3RhbmNlIiwicmVtb3ZlSW5zdGFuY2UiLCJ2YWx1ZUtleSIsImRlYm91bmNlSW50ZXJ2YWwiLCJkZWJvdW5jZSIsIm9uRGVib3VuY2UiLCJzZXRGb2N1cyIsInNldFZhbHVlIiwic2V0RGVib3VuY2UiLCJpbnRlcnZhbCIsInNldEVsZW1lbnRGb2N1cyIsInNldEVsZW1lbnRCbHVyIiwiZm9jdXMiLCJibHVyIiwiaXRlcmF0b3JzIiwiaXRlcmF0b3JFbCIsInJlc2V0IiwiTG9vcCIsImNyZWF0ZUl0ZXJhdG9yIiwiZHJhdyIsIl9faXRlcmF0b3IiLCJfX3ZhbHVlIiwibWFzayIsImNyZWF0ZUl0ZXJhdG9yRWxlbWVudCIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwiX19pbmRleCIsIl9fa2V5IiwiX19oYXNoIiwiaXRlcmF0b3IiLCJzZXRJbmRleCIsInNldEtleSIsIl9fcHJvbWlzZXMiLCJjbG9uZU5vZGUiLCJsb29wIiwiaXRlcmF0ZSIsIm9uT3V0IiwiZm9yIiwiaXNGb3IiLCJjYW5jZWwiLCJfX2VsIiwic3RyaWN0IiwiZm9yY2UiLCJfX3JlbW92ZWQiLCJpbkV2YWx1YXRpbmciLCJwcmVwYXJlT3B0aW9ucyIsIl9FdmVudCIsIl9fcHJlcGFyZUF0dHJpYnV0ZU91dCIsInRyYW5zaXRpb24iLCJsb2FkIiwic3RhdGUiLCJwYXRoIiwiZ2V0UGFyZW50U2NvcGVUcmFuc2l0aW9uIiwiZW1wdHkiLCJleGlzdHMiLCJUcmFuc2l0aW9uIiwicHJldmlvdXMiLCJyb3V0ZXMiLCJzdGF0ZXMiLCJfX2ZpbmlzaGVkIiwicmVkaXJlY3QiLCJyb3V0ZSIsImhhc1N0YXRlIiwicGFyYW1LZXlzIiwiZnVsbFBhdHRlcm4iLCJfX3BhcmFtUmVnZXgiLCJmIiwicXVlcnlLZXlzIiwid2F0Y2hIYXNoIiwicHJldlJvdXRlIiwiZ2V0Um91dGUiLCJwcmV2IiwiaW5jbHVkZUtleXMiLCJmaW5pc2giLCJfX3F1ZXVlIiwicGF0dGVybiIsImRlZmF1bHRPcHRpb25zIiwiYWJzdHJhY3QiLCJzZXRTdGF0ZSIsImdldFN0YXRlIiwibWFudWFsIiwicHJlcGFyZVN0YXRlQXJncyIsImNyZWF0ZVN0YXRlVXJsIiwiaGlzdG9yeSIsImJhY2siLCJnbyIsImZvcndhcmQiLCJkZWZhdWx0VXJsIiwiaGFzaE1vZGUiLCJvbGRQdXNoU3RhdGUiLCJwdXNoU3RhdGUiLCJlcnJvciIsIl9fb25TdGF0ZUNoYW5nZUhhbmRsZXIiLCJpbml0U3RhdGUiLCJwYXJlbnROYW1lIiwic3BsaXRTbGFzaGVzIiwic2V0SGFzaFVybCIsInNldEhpc3RvcnlVcmwiLCJsb2NhdGlvbiIsInJlcGxhY2VIYXNoVXJsIiwicmVwbGFjZUhpc3RvcnlVcmwiLCJyZXBsYWNlU3RhdGUiLCJnZXRIYXNoVXJsIiwiZ2V0SGlzdG9yeVVybCIsInBhdGhuYW1lIiwic2VhcmNoIiwiZ2V0SGFzaFVybFF1ZXJ5IiwiZ2V0SGlzdG9yeVVybFF1ZXJ5IiwicGFyYW1zRnJvbVF1ZXJ5IiwicHJlcGFyZSIsInBhcmFtc1RlbXAiLCJwcmVwYXJlU3RhdGVQYXJhbXMiLCJxdWVyeVRlbXAiLCJwcmVwYXJlU3RhdGVRdWVyeSIsImhhc2hUZW1wIiwicHJlcGFyZVN0YXRlSGFzaCIsImVtcHR5SGFzaCIsIm5ld0FyZ3MiLCJjcmVhdGVTdGF0ZU9iamVjdEFyZ3MiLCJjcmVhdGVTdGF0ZUhhc2hBcmdzIiwidXJsUGF0dGVybiIsInJlZ2V4IiwiaW5jbHVkZXMiLCJnZXRVcmwiLCJpc0FjdGl2ZVN0YXRlIiwiX19yb3V0ZVNlbGVjdG9yIiwiZ2V0UGF0dGVybkNvbnRlbnQiLCJyZWxvYWQiLCJjbGVhckludGVydmFsIiwiZ2V0VXJsUXVlcnkiLCJnZXRBcnJheVBhdHRlcm5Db250ZW50Iiwic2V0UGF0aCIsInJlYWxVcmwiLCJyZXBsYWNlVXJsIiwiaXNEaWZmZXJlbnQiLCJpc1JvdXRlQ2hhbmdlZCIsInRpdGxlIiwibG9hZGVkIiwic2V0VHJhbnNpdGlvbiIsImdldFN0YXRlc0J5TGV2ZWwiLCJfX3JlZGlyZWN0cyIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFRvIiwiYWN0aXZlIiwicmVjcmVhdGUiLCJpc0NvbXBpbGVkIiwiZGlzcGxheSIsImdldENvbXB1dGVkU3R5bGUiLCJFbHNlSWYiLCJFbHNlIiwic2V0UmVjcmVhdGlvbiIsInNldElzIiwiY29tcGlsYXRpb24iLCJuZXh0RWxlbWVudFNpYmxpbmciLCJzZXRBY3Rpdml0eSIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJpdGVyYXRvclRhZ05hbWUiLCJpc011bHRpcGxlIiwiT3B0aW9uIiwiZ2V0Q29udGVudCIsInNldE11bHRpcGxlIiwic2V0Q29udGVudCIsImRyYXdTZWxlY3QiLCJjaGFuZ2VWYWx1ZSIsImZvcm1hdFZhbHVlIiwic2VsZWN0ZWQiLCJvcHRpb24iLCJzZWxlY3Rpb24iLCJyZWRlZmluZSIsIm9uQ2hhbmdlIiwiZGlzcGF0Y2giLCJFdmVudCIsImRlY29kZUh0bWxFbnRpdGllcyIsInNldFNlbGVjdGVkIiwiaXNDaGVja2JveCIsImlzUmFkaW8iLCJzZXRDaGVja2VkIiwiY2hlY2tlZCIsImNoYW5nZVJhZGlvIiwicmFkaW8iLCJpdGVyYWJsZSIsIlJhZGlvQnV0dG9uIiwiZ2V0UmFkaW9WYWx1ZSIsInByZXZWYWx1ZSIsIm9uUmFkaW8iLCJzZXROYW1lcyIsImlzVHJ1ZSIsImlzU2VsZWN0ZWQiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwiZ2V0U2VsZWN0aW9uIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwiY29sbGFwc2UiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNvbm5lY3Rpb24iLCJzZXRDYWNoZSIsImFib3J0Iiwib25Mb2FkIiwib25FcnJvciIsImlzVXJsIiwicHJldmVudERlZmF1bHQiLCJvblN0YXRlQ2hhbmdlZCIsInNldFBhcmFtcyIsInNldFF1ZXJ5Iiwic2V0SGFzaCIsInNldE9wdGlvbnMiLCJyZXNldEhyZWYiLCJpbkFjdGl2ZVN0YXRlIiwiaHJlZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBZSxNQUFJRCxJQUVuQkQsRUFBWSxNQUFJQyxJQVJsQixDQVNHSyxRQUFRLFdBQ1gsTyxZQ1RFLElBQUlDLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVQLFFBR25DLElBQUlDLEVBQVNJLEVBQWlCRSxHQUFZLENBQ3pDQyxFQUFHRCxFQUNIRSxHQUFHLEVBQ0hULFFBQVMsSUFVVixPQU5BVSxFQUFRSCxHQUFVSSxLQUFLVixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTTSxHQUcvREwsRUFBT1EsR0FBSSxFQUdKUixFQUFPRCxRQTBEZixPQXJEQU0sRUFBb0JNLEVBQUlGLEVBR3hCSixFQUFvQk8sRUFBSVIsRUFHeEJDLEVBQW9CUSxFQUFJLFNBQVNkLEVBQVNlLEVBQU1DLEdBQzNDVixFQUFvQlcsRUFBRWpCLEVBQVNlLElBQ2xDRyxPQUFPQyxlQUFlbkIsRUFBU2UsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFVixFQUFvQmdCLEVBQUksU0FBU3RCLEdBQ1gsb0JBQVh1QixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWVuQixFQUFT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QUc3QzFGLEdBQ1IsR0FBcUIsZ0JBQWpCLElBQU9BLEVBQVAsY0FBT0EsTUFBdUJBLEVBQ2hDLE1BQU0sSUFBSWxmLE1BQUoseUNBR1JyQixLQUFLdWdCLE9BQVNBLEksK0JBR1ArQixHQUNQLEdBQW9CLGdCQUFoQixJQUFPQSxFQUFQLGNBQU9BLE1BQXNCQSxFQUMvQixNQUFNLElBQUlqaEIsTUFBSix3Q0FHUnJCLEtBQUtzaUIsTUFBUUEsSSw4QkFHUHRVLEdBQ04sR0FBbUIsaUJBQVJBLEdBQVAsTUFBMkJBLEVBQzdCLE1BQU0sSUFBSTNNLE1BQUosMkNBR1JyQixLQUFLZ08sS0FBT0EsSSxpQ0FHSDVOLEdBQ1QsR0FBc0IsZ0JBQWxCLElBQU9BLEVBQVAsY0FBT0EsTUFBd0JBLEVBQ2pDLE1BQU0sSUFBSWlCLE1BQUosMENBR1JyQixLQUFLSSxRQUFVQSxJLCtCQUdSL0QsR0FDUCxJQUFJNHBCLEVBQVFwbUIsVUFBT2lvQixTQUFTenJCLEdBRTVCLElBQUs0cEIsRUFDSCxNQUFNLElBQUk1a0IsTUFBSixxQ0FBK0NoRixFQUEvQyxLQUdSLE9BQU80cEIsSSxrQ0FJSGptQixLQUFLbVAsSUFDUG5QLEtBQUtvUCxNQUFNNmdCLEtBQU9qd0IsS0FBS21QLElBR3ZCblAsS0FBS29QLE1BQU02Z0IsS0FBT3B3QixVQUFPb29CLGVBQWVqb0IsS0FBS2ltQixNQUFPam1CLEtBQUt1Z0IsT0FBUXZnQixLQUFLc2lCLE1BQU90aUIsS0FBS2dPLEtBQU1oTyxLQUFLSSxhLEdBaEhwRW5DLFdBQVZNLEVBQ1owRyxRQUFVLHdDQURFMUcsRUFFWjRVLG1CQUFvQixFLFVBRlI1VSxLIiwiZmlsZSI6ImFraWxpLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkFraWxpXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkFraWxpXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKipcbiAqIEphdmFzY3JpcHQgZnJhbWV3b3JrXG4gKlxuICogY29uc3QgQWtpbGkgPSBtYWtlSXRFYXN5KGpzICsgaHRtbCk7XG4gKlxuICogQGF1dGhvciBBbGV4YW5kciBCYWxhc3lhbiA8bXl3ZWJzdHJlZXRAZ21haWwuY29tPlxuICogQGxpbmsgaHR0cDovL2FraWxpanMuY29tXG4gKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgSWYgZnJvbSAnLi9jb21wb25lbnRzL2lmLmpzJztcbmltcG9ydCBGb3IgZnJvbSAnLi9jb21wb25lbnRzL2Zvci5qcyc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4vY29tcG9uZW50cy9zZWxlY3QuanMnO1xuaW1wb3J0IElucHV0IGZyb20gJy4vY29tcG9uZW50cy9pbnB1dC5qcyc7XG5pbXBvcnQgUmFkaW8gZnJvbSAnLi9jb21wb25lbnRzL3JhZGlvLmpzJztcbmltcG9ydCBUZXh0IGZyb20gJy4vY29tcG9uZW50cy90ZXh0LmpzJztcbmltcG9ydCBUZXh0YXJlYSBmcm9tICcuL2NvbXBvbmVudHMvdGV4dGFyZWEuanMnO1xuaW1wb3J0IENvbnRlbnQgZnJvbSAnLi9jb21wb25lbnRzL2NvbnRlbnQuanMnO1xuaW1wb3J0IEluY2x1ZGUgZnJvbSAnLi9jb21wb25lbnRzL2luY2x1ZGUuanMnO1xuaW1wb3J0IElmcmFtZSBmcm9tICcuL2NvbXBvbmVudHMvaWZyYW1lLmpzJztcbmltcG9ydCBJbWFnZSBmcm9tICcuL2NvbXBvbmVudHMvaW1hZ2UuanMnO1xuaW1wb3J0IEVtYmVkIGZyb20gJy4vY29tcG9uZW50cy9lbWJlZC5qcyc7XG5pbXBvcnQgQXVkaW8gZnJvbSAnLi9jb21wb25lbnRzL2F1ZGlvLmpzJztcbmltcG9ydCBWaWRlbyBmcm9tICcuL2NvbXBvbmVudHMvdmlkZW8uanMnO1xuaW1wb3J0IFRyYWNrIGZyb20gJy4vY29tcG9uZW50cy90cmFjay5qcyc7XG5pbXBvcnQgU291cmNlIGZyb20gJy4vY29tcG9uZW50cy9zb3VyY2UuanMnO1xuaW1wb3J0IE9iamVjdHMgZnJvbSAnLi9jb21wb25lbnRzL29iamVjdC5qcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9jb21wb25lbnRzL3JvdXRlLmpzJztcbmltcG9ydCBVcmwgZnJvbSAnLi9jb21wb25lbnRzL3VybC5qcyc7XG5pbXBvcnQgQSBmcm9tICcuL2NvbXBvbmVudHMvYS5qcyc7XG5pbXBvcnQgU2NvcGUgZnJvbSAnLi9zY29wZS5qcyc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vZXZlbnQtZW1pdHRlci5qcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICcuL3NlcnZpY2VzL3JlcXVlc3QuanMnO1xuaW1wb3J0IHJvdXRlciBmcm9tICcuL3NlcnZpY2VzL3JvdXRlci5qcyc7XG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zZXJ2aWNlcy9zdG9yZS5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgZ2xvYmFscyBmcm9tICcuL2dsb2JhbHMuanMnO1xuXG4vKipcbiAqIFRoZSBmcmFtZXdvcmsgbWFpbiBvYmplY3RcbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9nZXR0aW5nLXN0YXJ0ZWR9XG4gKi9cbmNvbnN0IEFraWxpID0ge307XG5cbkFraWxpLm9wdGlvbnMgPSB7XG4gIGRlYnVnOiB0cnVlXG59O1xuXG5Ba2lsaS5fX2luaXQgPSBudWxsO1xuQWtpbGkuX19yb290ID0gbnVsbDtcbkFraWxpLl9fY29tcG9uZW50cyA9IHt9O1xuQWtpbGkuX19hbGlhc2VzID0ge307XG5Ba2lsaS5fX3Njb3BlcyA9IHt9O1xuQWtpbGkuX19zdG9yZUxpbmtzID0ge307XG5Ba2lsaS5fX3dpbmRvdyA9IHt9O1xuQWtpbGkuX190YWdzID0ge307XG5Ba2lsaS5fX2lzb2xhdGlvbiA9IG51bGw7XG5Ba2lsaS5fX2V2YWx1YXRpb24gPSBudWxsO1xuQWtpbGkuX193cmFwcGluZyA9IGZhbHNlOyAgXG5Ba2lsaS5fX3Jvb3RPdXRlckhUTUwgPSAnJztcbkFraWxpLl9fb25FcnJvciA9ICgpID0+IEFraWxpLnRyaWdnZXJJbml0KGZhbHNlKTtcblxuQWtpbGkuaHRtbEJvb2xlYW5BdHRyaWJ1dGVzID0gW1xuICAnZGlzYWJsZWQnLCAnY29udGVudGVkaXRhYmxlJywgJ2hpZGRlbidcbl07XG5cbkFraWxpLmNvbXBvbmVudHMgPSB7fTtcbkFraWxpLnNlcnZpY2VzID0ge307XG5Ba2lsaS5Db21wb25lbnQgPSBDb21wb25lbnQ7XG5Ba2lsaS5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5Ba2lsaS5TY29wZSA9IFNjb3BlO1xuQWtpbGkudXRpbHMgPSB1dGlscztcbkFraWxpLmdsb2JhbHMgPSBnbG9iYWxzO1xuQWtpbGkuY29tcG9uZW50cy5BID0gQTtcbkFraWxpLmNvbXBvbmVudHMuQXVkaW8gPSBBdWRpbztcbkFraWxpLmNvbXBvbmVudHMuQ29udGVudCA9IENvbnRlbnQ7XG5Ba2lsaS5jb21wb25lbnRzLkZvciA9IEZvcjtcbkFraWxpLmNvbXBvbmVudHMuRW1iZWQgPSBFbWJlZDtcbkFraWxpLmNvbXBvbmVudHMuSWYgPSBJZjtcbkFraWxpLmNvbXBvbmVudHMuSW5jbHVkZSA9IEluY2x1ZGU7XG5Ba2lsaS5jb21wb25lbnRzLklucHV0ID0gSW5wdXQ7XG5Ba2lsaS5jb21wb25lbnRzLklmcmFtZSA9IElmcmFtZTtcbkFraWxpLmNvbXBvbmVudHMuSW1hZ2UgPSBJbWFnZTtcbkFraWxpLmNvbXBvbmVudHMuT2JqZWN0ID0gT2JqZWN0cztcbkFraWxpLmNvbXBvbmVudHMuUmFkaW8gPSBSYWRpbztcbkFraWxpLmNvbXBvbmVudHMuUm91dGUgPSBSb3V0ZTtcbkFraWxpLmNvbXBvbmVudHMuU2VsZWN0ID0gU2VsZWN0O1xuQWtpbGkuY29tcG9uZW50cy5Tb3VyY2UgPSBTb3VyY2U7XG5Ba2lsaS5jb21wb25lbnRzLlRleHQgPSBUZXh0O1xuQWtpbGkuY29tcG9uZW50cy5UZXh0YXJlYSA9IFRleHRhcmVhO1xuQWtpbGkuY29tcG9uZW50cy5UcmFjayA9IFRyYWNrO1xuQWtpbGkuY29tcG9uZW50cy5VcmwgPSBVcmw7XG5Ba2lsaS5jb21wb25lbnRzLlZpZGVvID0gVmlkZW87XG5Ba2lsaS5zZXJ2aWNlcy5yZXF1ZXN0ID0gcmVxdWVzdDtcbkFraWxpLnNlcnZpY2VzLnJvdXRlciA9IHJvdXRlcjtcbkFraWxpLnNlcnZpY2VzLnN0b3JlID0gc3RvcmU7XG5cbi8qKlxuICogRGVmaW5lIHRoZSBkZWZhdWx0IGNvbXBvbmVudHNcbiAqL1xuQWtpbGkuZGVmaW5lID0gZnVuY3Rpb24gKCkge1xuICBBLmRlZmluZSgpO1xuICBBdWRpby5kZWZpbmUoKTtcbiAgQ29udGVudC5kZWZpbmUoKTtcbiAgQ29tcG9uZW50LmRlZmluZSgpO1xuICBFbWJlZC5kZWZpbmUoKTtcbiAgRm9yLmRlZmluZSgpO1xuICBJbmNsdWRlLmRlZmluZSgpO1xuICBJZnJhbWUuZGVmaW5lKCk7XG4gIEltYWdlLmRlZmluZSgpO1xuICBJbnB1dC5kZWZpbmUoKTtcbiAgSWYuZGVmaW5lKCk7XG4gIE9iamVjdHMuZGVmaW5lKCk7XG4gIFJhZGlvLmRlZmluZSgpO1xuICBSb3V0ZS5kZWZpbmUoKTtcbiAgU2VsZWN0LmRlZmluZSgpO1xuICBTb3VyY2UuZGVmaW5lKCk7XG4gIFRleHRhcmVhLmRlZmluZSgpO1xuICBUcmFjay5kZWZpbmUoKTtcbiAgVmlkZW8uZGVmaW5lKCk7XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSBnbG9iYWwgY29udGV4dFxuICovXG5Ba2lsaS5jbGVhckdsb2JhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZvcihsZXQga2V5IGluIGdsb2JhbHMpIHtcbiAgICBkZWxldGUgZ2xvYmFsc1trZXldO1xuICB9XG5cbiAgZm9yIChsZXQga2V5IGluIHRoaXMuX193aW5kb3cuRWxlbWVudC5wcm90b3R5cGUpIHtcbiAgICBFbGVtZW50LnByb3RvdHlwZVtrZXldID0gdGhpcy5fX3dpbmRvdy5FbGVtZW50LnByb3RvdHlwZVtrZXldO1xuICB9XG5cbiAgZm9yIChsZXQga2V5IGluIHRoaXMuX193aW5kb3cuQXJyYXkucHJvdG90eXBlKSB7XG4gICAgQXJyYXkucHJvdG90eXBlW2tleV0gPSB0aGlzLl9fd2luZG93LkFycmF5LnByb3RvdHlwZVtrZXldO1xuICB9XG5cbiAgZm9yKGxldCBrZXkgaW4gdGhpcy5vcHRpb25zLmdsb2JhbHMpIHtcbiAgICB0aGlzLm9wdGlvbnMuZ2xvYmFsc1trZXldID0gdGhpcy51bndyYXAodGhpcy5vcHRpb25zLmdsb2JhbHNba2V5XSk7XG4gIH1cblxuICB3aW5kb3cuc2V0VGltZW91dCA9IHRoaXMuX193aW5kb3cuc2V0VGltZW91dDtcbiAgd2luZG93LnNldEludGVydmFsID0gdGhpcy5fX3dpbmRvdy5zZXRJbnRlcnZhbDtcbiAgd2luZG93LlByb21pc2UgPSB0aGlzLl9fd2luZG93LlByb21pc2U7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX19vbkVycm9yKTtcbn07XG5cbi8qKlxuICogSm9pbiB0aGUgYmluZGluZyBrZXlzXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5cyBiaW5kaW5nIGtleXNcbiAqL1xuQWtpbGkuam9pbkJpbmRpbmdLZXlzID0gZnVuY3Rpb24gKGtleXMpIHtcbiAgcmV0dXJuIGtleXMubWFwKGVsID0+IGVsLnRvU3RyaW5nKCkpLmpvaW4oJy4nKTtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBzY29wZVxuICpcbiAqIEBwYXJhbSBzY29wZVxuICovXG5Ba2lsaS5hZGRTY29wZSA9IGZ1bmN0aW9uIChzY29wZSkge1xuICBpZiAodGhpcy5fX3Njb3Blc1tzY29wZS5fX25hbWVdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBTY29wZSBuYW1lICR7c2NvcGUuX19uYW1lfSBhbHJlYWR5IGV4aXN0c2ApO1xuICB9XG5cbiAgdGhpcy5fX3Njb3Blc1tzY29wZS5fX25hbWVdID0gc2NvcGU7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgc2NvcGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIHNjb3BlIG5hbWVcbiAqIEByZXR1cm5zIHtTY29wZX1cbiAqL1xuQWtpbGkuZ2V0U2NvcGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gdGhpcy5fX3Njb3Blc1tuYW1lXTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBzY29wZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gc2NvcGUgbmFtZVxuICovXG5Ba2lsaS5yZW1vdmVTY29wZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlbGV0ZSB0aGlzLl9fc2NvcGVzW25hbWVdO1xufTtcblxuLyoqXG4gKiBHZXQgYWxsIGVsZW1lbnRzIHRoYXQgaXMgd3JhcHBlZCBpbiB0aGUgQWtpbGkgY29tcG9uZW50XG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHBhcmFtIHtib29sZWFufSBbdHJlZT10cnVlXSAtIHJldHVybiBhcnJheSBvZiB0aGUgcGFyZW50cyBpZiB0cnVlLCBjbG9zZXN0IHBhcmVudCBpZiBmYWxzZVxuICogQHJldHVybnMge0FycmF5fEVsZW1lbnR8bnVsbH1cbiAqL1xuQWtpbGkuZ2V0QWtpbGlQYXJlbnRzID0gZnVuY3Rpb24gKGVsLCB0cmVlID0gdHJ1ZSkge1xuICBsZXQgYXJyID0gW107XG5cbiAgZnVuY3Rpb24gY2hlY2sobm9kZSkge1xuICAgIGlmICghbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZS5fX2FraWxpKSB7XG4gICAgICBhcnIucHVzaChub2RlLnBhcmVudE5vZGUpO1xuXG4gICAgICBpZiAoIXRyZWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrKG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICBjaGVjayhlbCk7XG4gIHJldHVybiB0cmVlPyBhcnI6IGFyclswXTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIHRoZSB0ZW1wbGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFwiPGk+SGVsbG88L2k+PGI+V29ybGQ8L2I+XCJcbiAqIGVsLmlubmVySFRNTCA9IFwiPGI+V29ybGQ8L2I+XCI7XG4gKiBBa2lsaS5zZXRUZW1wbGF0ZShlbCwgXCI8aT5IZWxsbzwvaT4ke3RoaXMuX19jaGlsZHJlbn1cIik7XG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5Ba2lsaS5zZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChlbCwgdGVtcGxhdGUpIHtcbiAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXCR7KCgoPyFcXCR7KVxccyp0aGlzXFwuX19jb250ZW50XFxzKikqKX0vLCBlbC5pbm5lckhUTUwpO1xuICBlbC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgcmV0dXJuIGVsLmlubmVySFRNTDtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgdGhlIHVuaXF1ZSBzY29wZSBuYW1lXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuQWtpbGkuY3JlYXRlU2NvcGVOYW1lID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdXRpbHMuY3JlYXRlUmFuZG9tU3RyaW5nKDE2LCBzdHIgPT4gISF0aGlzLl9fc2NvcGVzW3N0cl0pO1xufTtcblxuLyoqXG4gKiBJc29sYXRlIHRoZSBzY29wZSBjaGFuZ2VzXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5Ba2lsaS5pc29sYXRlID0gZnVuY3Rpb24gKGZuKSB7IFxuICBpZiAodGhpcy5fX2lzb2xhdGlvbikge1xuICAgIHJldHVybiBmbigpO1xuICB9XG5cbiAgdGhpcy5fX2lzb2xhdGlvbiA9IHt9O1xuICBsZXQgcmVzID0gZm4oKTtcbiAgbGV0IHByb3BzID0gW107XG5cbiAgZm9yIChsZXQgayBpbiB0aGlzLl9faXNvbGF0aW9uKSB7XG4gICAgcHJvcHMucHVzaCh0aGlzLl9faXNvbGF0aW9uW2tdKTtcbiAgfVxuXG4gIHRoaXMuX19pc29sYXRpb24gPSBudWxsO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcHJvcHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgIGNvbnN0IHZhbCA9IHV0aWxzLmdldFByb3BlcnR5QnlLZXlzKHByb3Aua2V5cywgcHJvcC5jb21wb25lbnQuX19zY29wZSk7ICAgIFxuICAgIHByb3AuY29tcG9uZW50Ll9faXNSZXNvbHZlZCAmJiBwcm9wLmNvbXBvbmVudC5fX3RyaWdnZXJTdG9yZUFuZEF0dHIocHJvcC5rZXlzKTtcbiAgICBwcm9wLmNvbXBvbmVudC5fX2V2YWx1YXRlQnlLZXlzKHByb3Aua2V5cywgdmFsLCBwcm9wLmlzRGVsZXRlZCk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBTdG9wIHRoZSBldmFsdWF0aW9uIGluc2lkZSB0aGUgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICogQHJldHVybnMgeyp9XG4gKi9cbkFraWxpLnVuZXZhbHVhdGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgbGV0IGV2YWx1YXRpb24gPSB0aGlzLl9fZXZhbHVhdGlvbjtcbiAgbGV0IHJlcztcbiAgdGhpcy5fX2V2YWx1YXRpb24gPSBudWxsO1xuICByZXMgPSBmbigpO1xuICB0aGlzLl9fZXZhbHVhdGlvbiA9IGV2YWx1YXRpb247XG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIG9ubHkgdGhlIHJvb3QgcHJvcGVydGllc1xuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuQWtpbGkud3JhcHBpbmcgPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYodGhpcy5fX3dyYXBwaW5nKSB7XG4gICAgcmV0dXJuIGZuKCk7XG4gIH1cbiAgXG4gIHRoaXMuX193cmFwcGluZyA9IHRydWU7XG4gIGxldCByZXMgPSBmbigpOyAgXG4gIHRoaXMuX193cmFwcGluZyA9IGZhbHNlOyAgXG4gIHJldHVybiByZXM7ICAgXG59XG5cbi8qKlxuICogU3RvcCB0aGUgaXNvbGF0aW9uIGluc2lkZSB0aGUgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICogQHJldHVybnMgeyp9XG4gKi9cbkFraWxpLnVuaXNvbGF0ZSA9IGZ1bmN0aW9uIChmbikge1xuICBsZXQgaXNvbGF0aW9uID0gdGhpcy5fX2lzb2xhdGlvbjtcbiAgbGV0IHJlcztcbiAgdGhpcy5fX2lzb2xhdGlvbiA9IG51bGw7XG4gIHJlcyA9IGZuKCk7XG4gIHRoaXMuX19pc29sYXRpb24gPSBpc29sYXRpb247XG4gIHJldHVybiByZXM7XG59O1xuXG4vKipcbiAqIFJ1biB0aGUgZnVuY3Rpb24gb24gdGhlIG5leHQgdGlja1xuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuQWtpbGkubmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiBzZXRUaW1lb3V0KCgpID0+IFByb21pc2UucmVzb2x2ZShmbigpKS50aGVuKHJlcykpKTtcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV1cbiAqIEByZXR1cm5zIHsqfVxuICovXG5Ba2lsaS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHJlY29tcGlsZSA9IG9wdGlvbnMucmVjb21waWxlO1xuICBsZXQgY29tcG9uZW50ID0gZWwuX19ha2lsaTtcblxuICBpZiAoY29tcG9uZW50KSB7XG4gICAgaWYgKHJlY29tcGlsZSkge1xuICAgICAgY29tcG9uZW50Ll9fcmVjb21waWxlKHJlY29tcGlsZSA9PT0gdHJ1ZT8ge306IHJlY29tcGlsZSk7XG4gICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpc1Jvb3QgPSBlbCA9PT0gdGhpcy5fX3Jvb3Q7XG4gIGxldCBjb21wb25lbnROYW1lID0gdXRpbHMudG9EYXNoQ2FzZShlbC5nZXRBdHRyaWJ1dGUoJ2NvbXBvbmVudCcpIHx8IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSk7XG4gIGxldCBfQ29tcG9uZW50ID0gdGhpcy5fX2NvbXBvbmVudHNbY29tcG9uZW50TmFtZV07XG5cbiAgQ0hFQ0tfQUxJQVNFUzogaWYgKCFfQ29tcG9uZW50KSB7XG4gICAgbGV0IHNlbGVjdG9ycyA9IE9iamVjdC5rZXlzKHRoaXMuX19hbGlhc2VzKTtcblxuICAgIGlmICghc2VsZWN0b3JzLmxlbmd0aCkge1xuICAgICAgYnJlYWsgQ0hFQ0tfQUxJQVNFUztcbiAgICB9XG5cbiAgICBsZXQgc2VsZWN0b3JBbGwgPSBzZWxlY3RvcnMuam9pbignLCcpO1xuXG4gICAgaWYgKCFlbC5tYXRjaGVzKHNlbGVjdG9yQWxsKSkge1xuICAgICAgYnJlYWsgQ0hFQ0tfQUxJQVNFUztcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNlbGVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBzZWxlY3RvciA9IHNlbGVjdG9yc1tpXTtcblxuICAgICAgaWYgKGVsLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIF9Db21wb25lbnQgPSB0aGlzLl9fY29tcG9uZW50c1t0aGlzLl9fYWxpYXNlc1tzZWxlY3Rvcl1dO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIV9Db21wb25lbnQgJiYgIWlzUm9vdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghX0NvbXBvbmVudCkge1xuICAgIF9Db21wb25lbnQgPSB0aGlzLkNvbXBvbmVudDtcbiAgfVxuXG4gIGlmIChfQ29tcG9uZW50Lm1hdGNoZXMgJiYgIWVsLm1hdGNoZXMoX0NvbXBvbmVudC5tYXRjaGVzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbXBvbmVudCA9IG5ldyBfQ29tcG9uZW50KGVsLCB7fSk7ICBcbiAgXG4gIGlmIChjb21wb25lbnQuX19jYW5jZWxsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZihBa2lsaS5nZXRBa2lsaVBhcmVudHMoZWwpLmZpbmQocCA9PiBwLl9fYWtpbGkuX19wcmV2ZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbXBvbmVudC5fX2NyZWF0ZSgpO1xuICByZXR1cm4gY29tcG9uZW50O1xufTtcblxuLyoqXG4gKiBDb21waWxlIHRoZSBlbGVtZW50XG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSByb290XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuQWtpbGkuY29tcGlsZSA9IGZ1bmN0aW9uIChyb290LCBvcHRpb25zID0geyByZWNvbXBpbGU6IGZhbHNlIH0pIHsgIFxuICBsZXQgZWxlbWVudHMgPSBbXTtcblxuICBpZih3aW5kb3cuQUtJTElfU1NSKSB7XG4gICAgY29uc3QgYXJyID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKCdbbm8tc3NyXScpO1xuXG4gICAgZm9yKGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGFycltpXS5yZW1vdmUoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBuZXN0ZWRJbml0aWFsaXppbmcgPSBlbCA9PiB7XG4gICAgbGV0IGNvbXBvbmVudCA9IHRoaXMuaW5pdGlhbGl6ZShlbCwgb3B0aW9ucyk7XG4gICAgbGV0IGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gICAgY29tcG9uZW50ICYmIGVsZW1lbnRzLnB1c2goY29tcG9uZW50KTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5lc3RlZEluaXRpYWxpemluZyhjaGlsZCk7XG4gICAgfVxuICB9O1xuICBcbiAgbmVzdGVkSW5pdGlhbGl6aW5nKHJvb3QpO1xuICBsZXQgcCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGNvbXBvbmVudCA9IGVsZW1lbnRzW2ldOyAgICBcbiAgICBwLnB1c2goY29tcG9uZW50Ll9fY29tcGlsZSgpKTsgICAgXG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5hbGwocCkudGhlbigoKSA9PiB7XG4gICAgbGV0IHIgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IGNvbXBvbmVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgci5wdXNoKGNvbXBvbmVudC5fX3Jlc29sdmUoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUmVnaXN0ZXIgdGhlIGNvbXBvbmVudC5cbiAqIE9yIGdldCBpdCBpZiB0aGUgZnVuY3Rpb24gaXMgbm90IHBhc3NlZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge0NvbXBvbmVudH0gW2ZuXVxuICovXG5Ba2lsaS5jb21wb25lbnQgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoIWZuKSB7XG4gICAgcmV0dXJuIHRoaXMuX19jb21wb25lbnRzW25hbWVdIHx8IG51bGw7XG4gIH1cbiAgXG4gIGlmICh0aGlzLl9fY29tcG9uZW50c1tuYW1lXSAmJiBBa2lsaS5vcHRpb25zLmRlYnVnKSB7ICBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihgQ29tcG9uZW50ICR7bmFtZX0gYWxyZWFkeSB3YXMgYWRkZWRgKTtcbiAgfVxuXG4gIHRoaXMuX19jb21wb25lbnRzW25hbWVdID0gZm47XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgY29tcG9uZW50XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuQWtpbGkucmVtb3ZlQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMuX19jb21wb25lbnRzW25hbWVdO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciB0aGUgc2VsZWN0b3IgYWxpYXMuXG4gKiBPciBnZXQgaXQgaWYgdGhlIGNvbXBvbmVudCBuYW1lIGlzIG5vdCBwYXNzZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgLSBET00gc2VsZWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29tcG9uZW50TmFtZV1cbiAqL1xuQWtpbGkuYWxpYXMgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIGNvbXBvbmVudE5hbWUgPSAnJykge1xuICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICghY29tcG9uZW50TmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9fYWxpYXNlc1tzZWxlY3Rvcl0gfHwgbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLl9fYWxpYXNlc1tzZWxlY3Rvcl0gJiYgQWtpbGkub3B0aW9ucy5kZWJ1Zykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGBBbGlhcyB3aXRoIHNlbGVjdG9yICR7c2VsZWN0b3J9IGFscmVhZHkgd2FzIGFkZGVkYCk7XG4gIH1cblxuICB0aGlzLl9fYWxpYXNlc1tzZWxlY3Rvcl0gPSBjb21wb25lbnROYW1lO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIHNlbGVjdG9yIGFsaWFzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKi9cbkFraWxpLnJlbW92ZUFsaWFzID0gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gIGRlbGV0ZSB0aGlzLl9fYWxpYXNlc1tzZWxlY3Rvcl07XG59O1xuXG4vKipcbiAqIElzb2xhdGUgdGhlIGFycmF5IHByb3RvdHlwZSBmdW5jdGlvbnNcbiAqL1xuQWtpbGkuaXNvbGF0ZUFycmF5UHJvdG90eXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9fd2luZG93LkFycmF5ID0geyBwcm90b3R5cGU6IHt9IH07XG4gIGxldCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoQXJyYXkucHJvdG90eXBlKTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGtleSA9IGtleXNbaV07XG4gICAgbGV0IG9sZCA9IEFycmF5LnByb3RvdHlwZVtrZXldO1xuXG4gICAgaWYgKHR5cGVvZiBvbGQgIT0gJ2Z1bmN0aW9uJyB8fCBrZXkgPT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdGhpcy5fX3dpbmRvdy5BcnJheS5wcm90b3R5cGVba2V5XSA9IG9sZDtcblxuICAgIEFycmF5LnByb3RvdHlwZVtrZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEFraWxpLnVuZXZhbHVhdGUoKCkgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuX19pc1Byb3h5KSB7XG4gICAgICAgICAgcmV0dXJuIG9sZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gQWtpbGkuaXNvbGF0ZSgoKSA9PiBvbGQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIElzb2xhdGUgdGhlIHdpbmRvdyBmdW5jdGlvbnNcbiAqL1xuQWtpbGkuaXNvbGF0ZVdpbmRvd0Z1bmN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fX3dpbmRvdy5zZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgdGhpcy5fX3dpbmRvdy5zZXRJbnRlcnZhbCA9IHNldEludGVydmFsO1xuICB0aGlzLl9fd2luZG93LlByb21pc2UgPSB3aW5kb3cuUHJvbWlzZTtcbiAgd2luZG93LnNldFRpbWVvdXQgPSB0aGlzLmNyZWF0ZUNhbGxiYWNrSXNvbGF0aW9uKHdpbmRvdy5zZXRUaW1lb3V0LCAwKTtcbiAgd2luZG93LnNldEludGVydmFsID0gdGhpcy5jcmVhdGVDYWxsYmFja0lzb2xhdGlvbih3aW5kb3cuc2V0SW50ZXJ2YWwsIDApO1xuICBcbiAgaWYoIXdpbmRvdy5BS0lMSV9TU1IpIHtcbiAgICB3aW5kb3cuUHJvbWlzZS5jb25zdHJ1Y3RvciA9IHRoaXMuY3JlYXRlQ2FsbGJhY2tJc29sYXRpb24od2luZG93LlByb21pc2UuY29uc3RydWN0b3IpO1xuICAgIHdpbmRvdy5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gdGhpcy5jcmVhdGVDYWxsYmFja0lzb2xhdGlvbih3aW5kb3cuUHJvbWlzZS5wcm90b3R5cGUudGhlbiwgWzAsICdsYXN0J10pO1xuICAgIHdpbmRvdy5Qcm9taXNlLnByb3RvdHlwZS5jYXRjaCA9IHRoaXMuY3JlYXRlQ2FsbGJhY2tJc29sYXRpb24od2luZG93LlByb21pc2UucHJvdG90eXBlLmNhdGNoKTtcbiAgfSAgXG59O1xuXG4vKipcbiAqIElzb2xhdGUgdGhlIGdsb2JhbHNcbiAqL1xuQWtpbGkuaXNvbGF0ZUdsb2JhbHMgPSBmdW5jdGlvbiAoKSB7ICBcbiAgZ2xvYmFscy5fX3RhcmdldC51dGlscyA9IHRoaXMud3JhcCh1dGlscyk7IFxuICB0aGlzLmlzb2xhdGVFdmVudHMoKTtcbiAgdGhpcy5pc29sYXRlQXJyYXlQcm90b3R5cGUoKTtcbiAgdGhpcy5pc29sYXRlV2luZG93RnVuY3Rpb25zKCk7XG59O1xuXG4vKipcbiAqIElzb2xhdGUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICovXG5Ba2lsaS5pc29sYXRlRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9fd2luZG93LkVsZW1lbnQgPSB7IHByb3RvdHlwZToge30gfTtcblxuICBpZih3aW5kb3cuQUtJTElfU1NSKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFxuICB0aGlzLl9fd2luZG93LkVsZW1lbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBFbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyO1xuICB0aGlzLl9fd2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyO1xuICB0aGlzLl9fd2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSA9IEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZTtcblxuICBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVsZXRlIHRoaXMuX19ha2lsaUxpc3RlbmVycztcbiAgICByZXR1cm4gQWtpbGkuX193aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgRWxlbWVudC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIGxldCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgaWYgKCF0aGlzLl9fYWtpbGlMaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX19ha2lsaUxpc3RlbmVycyA9IHt9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fX2FraWxpTGlzdGVuZXJzW25hbWVdKSB7XG4gICAgICB0aGlzLl9fYWtpbGlMaXN0ZW5lcnNbbmFtZV0gPSBbXTtcbiAgICB9XG4gICAgXG4gICAgaWYodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhcmdzWzFdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQWtpbGkuaXNvbGF0ZSgoKSA9PiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH07XG4gICAgfSAgICBcblxuICAgIHRoaXMuX19ha2lsaUxpc3RlbmVyc1tuYW1lXS5wdXNoKHtcbiAgICAgIGxpbms6IGZuLFxuICAgICAgZm46IGFyZ3NbMV1cbiAgICB9KTtcblxuICAgIHJldHVybiBBa2lsaS5fX3dpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xuXG4gIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICBsZXQgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGlmICghdGhpcy5fX2FraWxpTGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9fYWtpbGlMaXN0ZW5lcnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX19ha2lsaUxpc3RlbmVyc1tuYW1lXSkge1xuICAgICAgdGhpcy5fX2FraWxpTGlzdGVuZXJzW25hbWVdID0gW107XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLl9fYWtpbGlMaXN0ZW5lcnNbbmFtZV0ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgbGlzdGVuZXIgPSB0aGlzLl9fYWtpbGlMaXN0ZW5lcnNbbmFtZV1baV07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5saW5rID09PSBmbikge1xuICAgICAgICB0aGlzLl9fYWtpbGlMaXN0ZW5lcnNbbmFtZV0uc3BsaWNlKGksIDEpO1xuICAgICAgICBhcmdzWzFdID0gbGlzdGVuZXIuZm47XG4gICAgICAgIGktLTtcbiAgICAgICAgbC0tO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX19ha2lsaUxpc3RlbmVyc1tuYW1lXS5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9fYWtpbGlMaXN0ZW5lcnNbbmFtZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIEFraWxpLl9fd2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG59O1xuXG4vKipcbiAqIFdyYXAgdGhlIGZ1bmN0aW9uIGNhbGxiYWNrIHdpdGggdGhlIGlzb2xhdGlvbiBjb250ZXh0XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xudW1iZXJbXXxzdHJpbmdbXX0gW3Bvcz1cImxhc3RcIl1cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xuQWtpbGkuY3JlYXRlQ2FsbGJhY2tJc29sYXRpb24gPSBmdW5jdGlvbiAoZm4sIHBvcyA9ICdsYXN0Jykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGxldCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICFBcnJheS5pc0FycmF5KHBvcykgJiYgKHBvcyA9IFtwb3NdKTtcbiAgICBcbiAgICBmb3IobGV0IGkgPSAwLCBsID0gcG9zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IG51bSA9IHBvc1tpXTtcbiAgICAgIGxldCBpbmRleCA9IG51bTtcbiAgICAgIGxldCBjYWxsYmFjayA9IGFyZ3NbbnVtXTtcblxuICAgICAgaWYobnVtID09ICdsYXN0Jykge1xuICAgICAgICBpbmRleCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgY2FsbGJhY2sgPSBhcmdzW2luZGV4XTtcbiAgICAgIH1cblxuICAgICAgaWYodHlwZW9mIGNhbGxiYWNrICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmKCFjYWxsYmFjay5fX2lzb2xhdGVkKSB7XG4gICAgICAgIGFyZ3NbaW5kZXhdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBBa2lsaS5pc29sYXRlKCgpID0+IGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJnc1tpbmRleF0sICdfX2lzb2xhdGVkJywge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBjYWxsYmFja1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gIH07XG59O1xuXG4vKipcbiAqIFdyYXAgdGhlIG9iamVjdC9mdW5jdGlvbiB0byBpc29sYXRlIGFuZCB1bmV2YWx1YXRlIGRhdGFcbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gb2JqXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFxuICovXG5Ba2lsaS53cmFwID0gZnVuY3Rpb24gKG9iaiwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBjdXJyZW50ID0gb2JqO1xuXG4gIGlmKHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykge1xuICAgIG9iaiA9IHRoaXMud3JhcEZ1bmN0aW9uKG9iaiwgb3B0aW9ucyk7XG5cbiAgICBpZihvYmogPT09IGN1cnJlbnQpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYoIW9iaiB8fCB0eXBlb2Ygb2JqICE9ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBsZXQga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaik7XG5cbiAgZm9yKGxldCBrID0gMCwgYyA9IGtleXMubGVuZ3RoOyBrIDwgYzsgaysrKSB7XG4gICAgbGV0IGtleSA9IGtleXNba107XG4gICAgbGV0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcblxuICAgIGlmKCFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSB8fCAhZGVzY3JpcHRvci53cml0YWJsZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsuLi5kZXNjcmlwdG9yLCB2YWx1ZTogb2JqW2tleV0uX19ha2lsaSB8fCBvYmpba2V5XSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsuLi5kZXNjcmlwdG9yLCB2YWx1ZTogdGhpcy53cmFwKG9ialtrZXldLCBvcHRpb25zKSB9KTtcbiAgfSBcbiAgXG4gIHJldHVybiBvYmo7XG59O1xuXG4vKipcbiAqIFVud3JhcCB0aGUgb2JqZWN0L2Z1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IG9ialxuICovXG5Ba2lsaS51bndyYXAgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0aGlzLndyYXAob2JqLCB7IHJldmVyc2U6IHRydWUgfSk7XG59XG5cbi8qKlxuICogSXNvbGF0ZSB0aGUgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSBcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xuQWtpbGkud3JhcEZ1bmN0aW9uID0gZnVuY3Rpb24gKGZuLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKGZuLl9fYWtpbGkpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBjb25zdCBha2lsaVdyYXBwZWRGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZihvcHRpb25zLnRhZyAmJiBBa2lsaS5fX2V2YWx1YXRpb24pIHtcbiAgICAgIEFraWxpLmFkZFRhZyhvcHRpb25zLnRhZywgQWtpbGkuX19ldmFsdWF0aW9uLm5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBBa2lsaS53cmFwcGluZygoKSA9PiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGZuKTtcbiAgYWtpbGlXcmFwcGVkRnVuY3Rpb24ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuXG4gIGZvcihsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgIGFraWxpV3JhcHBlZEZ1bmN0aW9uW2tleV0gPSBmbltrZXldO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFraWxpV3JhcHBlZEZ1bmN0aW9uLCAnX19ha2lsaScsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZm5cbiAgfSk7XG5cbiAgcmV0dXJuIGFraWxpV3JhcHBlZEZ1bmN0aW9uO1xufTtcblxuLyoqXG4gKiBBZGQgdGhlIHRhZ1xuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqL1xuQWtpbGkuYWRkVGFnID0gZnVuY3Rpb24gKHRhZywgbm9kZSkge1xuICBpZih0aGlzLmhhc1RhZyh0YWcsIG5vZGUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYoIXRoaXMuX190YWdzW25vZGUuX19uYW1lXSkge1xuICAgIHRoaXMuX190YWdzW25vZGUuX19uYW1lXSA9IHt9OyAgICBcbiAgfVxuXG4gIGlmKCF0aGlzLl9fdGFnc1tub2RlLl9fbmFtZV1bdGFnXSkge1xuICAgIHRoaXMuX190YWdzW25vZGUuX19uYW1lXVt0YWddID0gW107ICAgIFxuICB9XG5cbiAgdGhpcy5fX3RhZ3Nbbm9kZS5fX25hbWVdW3RhZ10ucHVzaCh7IG5vZGUgfSk7XG59XG5cbi8qKlxuICogQ2hlY2sgdGhlIHRhZyBleGlzdHNcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ1xuICogQHBhcmFtIHtOb2RlfSBbbm9kZV1cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5Ba2lsaS5oYXNUYWcgPSBmdW5jdGlvbih0YWcsIG5vZGUpIHtcbiAgaWYoIW5vZGUpe1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMuX190YWdzKSB7XG4gICAgICBmb3IobGV0IGsgaW4gdGhpcy5fX3RhZ3Nba2V5XSkge1xuICAgICAgICBpZihrID09IHRhZykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYoIXRoaXMuX190YWdzW25vZGUuX19uYW1lXSkge1xuICAgIHJldHVybiBmYWxzZTsgICAgXG4gIH1cblxuICBpZighdGhpcy5fX3RhZ3Nbbm9kZS5fX25hbWVdW3RhZ10pIHtcbiAgICByZXR1cm4gZmFsc2U7ICAgIFxuICB9IFxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgdGFnXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdGFnXVxuICogQHBhcmFtIHtOb2RlfSBbbm9kZV1cbiAqL1xuQWtpbGkucmVtb3ZlVGFnID0gZnVuY3Rpb24gKHRhZywgbm9kZSkge1xuICBpZih0eXBlb2YgdGFnID09ICdvYmplY3QnKSB7XG4gICAgbm9kZSA9IHRhZztcbiAgICB0YWcgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZighdGFnKSB7IFxuICAgIGRlbGV0ZSB0aGlzLl9fdGFnc1tub2RlLl9fbmFtZV07XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYoIW5vZGUpIHtcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLl9fdGFncykge1xuICAgICAgZm9yKGxldCBrIGluIHRoaXMuX190YWdzW2tleV0pIHtcbiAgICAgICAgaWYoayA9PSB0YWcpIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fX3RhZ3Nba2V5XVtrXVxuICAgICAgICB9XG4gICAgICB9XG4gIFxuICAgICAgaWYoIU9iamVjdC5rZXlzKHRoaXMuX190YWdzW2tleV0pLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgdGhpcy5fX3RhZ3Nba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47ICAgIFxuICB9XG5cbiAgZm9yKGxldCBrZXkgaW4gdGhpcy5fX3RhZ3Nbbm9kZS5fX25hbWVdKSB7XG4gICAgaWYoa2V5ID09IHRhZykge1xuICAgICAgZGVsZXRlIHRoaXMuX190YWdzW25vZGUuX19uYW1lXVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIGlmKCFPYmplY3Qua2V5cyh0aGlzLl9fdGFnc1tub2RlLl9fbmFtZV0pLmxlbmd0aCkge1xuICAgIGRlbGV0ZSB0aGlzLl9fdGFnc1tub2RlLl9fbmFtZV07XG4gIH1cbn1cblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdGFnIGV4cHJlc3Npb25zXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdcbiAqL1xuQWtpbGkudHJpZ2dlclRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgZm9yKGxldCBrZXkgaW4gdGhpcy5fX3RhZ3MpIHtcbiAgICBmb3IobGV0IGsgaW4gdGhpcy5fX3RhZ3Nba2V5XSkge1xuICAgICAgaWYoayA9PSB0YWcpIHtcbiAgICAgICAgY29uc3QgYXJyID0gdGhpcy5fX3RhZ3Nba2V5XVtrXTtcblxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG9iaiA9IGFycltpXTtcbiAgICAgICAgICBvYmoubm9kZS5fX2NvbXBvbmVudC5fX2V2YWx1YXRlTm9kZShvYmoubm9kZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSGFuZGxlIHRoZSBlcnJvcnNcbiAqL1xuQWtpbGkuaGFuZGxlRXJyb3JzID0gZnVuY3Rpb24gKCkge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9fb25FcnJvcik7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgdGhlIGluaXRpYWxpemF0aW9uIHN0YXR1c1xuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdHVzXG4gKi9cbkFraWxpLnRyaWdnZXJJbml0ID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICBBa2lsaS5fX2luaXQgPSBzdGF0dXM7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYWtpbGktaW5pdCcsIHsgZGV0YWlsOiBzdGF0dXMgfSkpO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBhcHBsaWNhdGlvblxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gW3Jvb3RdXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuQWtpbGkuaW5pdCA9IGZ1bmN0aW9uIChyb290KSB7IFxuICByb290ID0gcm9vdCB8fCBkb2N1bWVudC5ib2R5O1xuICB0aGlzLl9fcm9vdE91dGVySFRNTCA9IHJvb3Qub3V0ZXJIVE1MO1xuXG4gIGlmKCEocm9vdCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBSb290IGVsZW1lbnQgbXVzdCBiZSBhbiBodG1sIGVsZW1lbnRgKTtcbiAgfVxuXG4gIGlmKHJvb3QgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgXCJodG1sXCIgY2FuJ3QgYmUgdGhlIHJvb3QgZWxlbWVudGApO1xuICB9XG5cbiAgdGhpcy5fX3Jvb3QgPSByb290O1xuICBcbiAgaWYod2luZG93LkFLSUxJX1NFUlZFUikgeyAgICBcbiAgICBBa2lsaS5pbml0U2VydmVyU2lkZUh0bWwod2luZG93LkFLSUxJX1NFUlZFUi5odG1sKTtcbiAgICBBa2lsaS5pbml0U2VydmVyU2lkZVJlcXVlc3RDYWNoZSh3aW5kb3cuQUtJTElfU0VSVkVSLnJlcXVlc3RDYWNoZSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgd2luZG93LkFLSUxJX0NMSUVOVCA9IHtcbiAgICAgIGh0bWw6IHRoaXMucHJlcGFyZVNlcnZlclNpZGVIdG1sKClcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiB0aGlzLmNvbXBpbGUodGhpcy5fX3Jvb3QpLnRoZW4oKCkgPT4ge1xuICAgIGlmIChyb3V0ZXIuX19pbml0KSB7XG4gICAgICByZXR1cm4gcm91dGVyLmNoYW5nZVN0YXRlKHsgaW5pdDogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pLnRoZW4oKCkgPT4geyAgICBcbiAgICB3aW5kb3cuQUtJTElfQ0xJRU5UICYmICh3aW5kb3cuQUtJTElfQ0xJRU5ULnJlcXVlc3RDYWNoZSA9IHRoaXMucHJlcGFyZVNlcnZlclNpZGVSZXF1ZXN0Q2FjaGUoKSk7XG4gICAgdGhpcy50cmlnZ2VySW5pdCh0cnVlKTtcbiAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICB0aGlzLnRyaWdnZXJJbml0KGZhbHNlKTtcbiAgICB0aHJvdyBlcnI7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBEZWluaXRpYWxpemUgdGhlIGFwcGxpY2F0aW9uXG4gKi9cbkFraWxpLmRlaW5pdCA9IGZ1bmN0aW9uICgpIHsgXG4gIHRoaXMuX19yb290ICYmICh0aGlzLl9fcm9vdC5vdXRlckhUTUwgPSB0aGlzLl9fcm9vdE91dGVySFRNTCk7XG5cbiAgZm9yKGxldCBrZXkgaW4gdGhpcy5fX3Njb3Blcykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuX19zY29wZXNba2V5XS5fX2NvbXBvbmVudDtcbiAgICBjb21wb25lbnQgJiYgY29tcG9uZW50LnJlbW92ZSgpO1xuICB9XG5cbiAgdGhpcy5fX3Jvb3RPdXRlckhUTUwgPSAnJztcbiAgdGhpcy5fX2luaXQgPSBudWxsO1xuICB0aGlzLl9fcm9vdCA9IG51bGw7XG4gIHRoaXMuX19zY29wZXMgPSB7fTtcbiAgdGhpcy5fX3N0b3JlTGlua3MgPSB7fTtcbiAgdGhpcy5fX3RhZ3MgPSB7fTtcbn07XG5cbi8qKlxuICogRGVzdHJveSB0aGUgZnJhbWV3b3JrXG4gKi9cbkFraWxpLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZGVpbml0KCk7ICBcbiAgdGhpcy5jbGVhckdsb2JhbHMoKTtcblxuICBsZXQgc3RvcmVLZXlzID0gT2JqZWN0LmtleXMoc3RvcmUuX190YXJnZXQpO1xuICBcbiAgZm9yKGxldCBpID0gMCwgbCA9IHN0b3JlS2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkZWxldGUgc3RvcmUuX190YXJnZXRbc3RvcmVLZXlzW2ldXTtcbiAgfVxuXG4gIHJvdXRlci5fX2luaXQgJiYgcm91dGVyLmRlaW5pdCgpO1xuICBkZWxldGUgd2luZG93LkFLSUxJX1NFUlZFUjtcbiAgZGVsZXRlIHdpbmRvdy5BS0lMSV9DTElFTlQ7XG4gIGRlbGV0ZSB3aW5kb3cuQUtJTElfU1NSO1xuXG4gIGZvcihsZXQga2V5IGluIEFraWxpKSB7XG4gICAgZGVsZXRlIEFraWxpW2tleV07XG4gIH1cblxuICBkZWxldGUgd2luZG93LkFraWxpO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIFNTUiBodG1sXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKi9cbkFraWxpLmluaXRTZXJ2ZXJTaWRlSHRtbCA9IGZ1bmN0aW9uIChodG1sKSB7XG4gIGZvciAobGV0IGkgPSB0aGlzLl9fcm9vdC5hdHRyaWJ1dGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICB0aGlzLl9fcm9vdC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5fX3Jvb3QuYXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgfVxuXG4gIGxldCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gIGxldCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xuICBsZXQgZWwgPSBkb2MucXVlcnlTZWxlY3Rvcih0aGlzLl9fcm9vdCA9PT0gZG9jdW1lbnQuYm9keT8gJ2JvZHknOiAnYm9keSA+IConKTsgICAgXG4gIHRoaXMuX19yb290LmlubmVySFRNTCA9IGVsLmlubmVySFRNTDtcblxuICBmb3IgKGxldCBpID0gZWwuYXR0cmlidXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCBhdHRyID0gZWwuYXR0cmlidXRlc1tpXTtcbiAgICB0aGlzLl9fcm9vdC5zZXRBdHRyaWJ1dGUoYXR0ci5uYW1lLCBhdHRyLnZhbHVlKTtcbiAgfSAgXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgU1NSIGNhY2hlXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqL1xuQWtpbGkuaW5pdFNlcnZlclNpZGVSZXF1ZXN0Q2FjaGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGNvbnN0IGluaXQgPSAoaW5zdGFuY2UsIG9iaikgPT4ge1xuICAgIGZvcihsZXQga2V5IGluIG9iaikge1xuICAgICAgaW5zdGFuY2UuX19jYWNoZVtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIFxuICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgbGV0IGluc3RhbmNlID0ga2V5ID09PSAnX19tYWluJz8gcmVxdWVzdDogcmVxdWVzdC5fX2luc3RhbmNlc1trZXldO1xuICAgIGluaXQoaW5zdGFuY2UsIG9ialtrZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIFByZXBhcmUgdGhlIFNTUiBodG1sXG4gKi9cbkFraWxpLnByZXBhcmVTZXJ2ZXJTaWRlSHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX19yb290Lm91dGVySFRNTDtcbn1cblxuLyoqXG4gKiBQcmVwYXJlIHRoZSBTU1IgY2FjaGVcbiAqL1xuQWtpbGkucHJlcGFyZVNlcnZlclNpZGVSZXF1ZXN0Q2FjaGUgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBjYWNoZSA9IHsgX19tYWluOiByZXF1ZXN0Ll9fY2FjaGUgfTtcblxuICBmb3IobGV0IGtleSBpbiByZXF1ZXN0Ll9faW5zdGFuY2VzKSB7XG4gICAgY2FjaGVba2V5XSA9IHJlcXVlc3QuX19pbnN0YW5jZXNba2V5XS5fX2NhY2hlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBa2lsaTtcbndpbmRvdy5Ba2lsaSA9IEFraWxpO1xuQWtpbGkuZGVmaW5lKCk7XG5Ba2lsaS5oYW5kbGVFcnJvcnMoKTtcbkFraWxpLmlzb2xhdGVHbG9iYWxzKCk7IiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuL2V2ZW50LWVtaXR0ZXIuanMnXG5cbi8qKlxuICogVGhlIG9iamVjdCB3aXRoIGEgbG90IG9mIHVzZWZ1bCBmdW5jdGlvbnNcbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy91dGlsc31cbiAqL1xuY29uc3QgdXRpbHMgPSB7fTtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIGNsYXNzIGF0dHJpYnV0ZSBmcm9tIHRoZSBvYmplY3RcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyBcInJlZCBhY3RpdmVcIlxuICogdXRpbHMuY2xhc3Moe3JlZDogdHJ1ZSwgYWN0aXZlOiB0cnVlLCBncmVlbjogZmFsc2V9KTtcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG51dGlscy5jbGFzcyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBsZXQgY2xhc3NlcyA9IFtdO1xuICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBrID0ga2V5c1tpXTtcbiAgICBsZXQgdmFsID0gb2JqW2tdO1xuICAgIHZhbCAmJiBjbGFzc2VzLnB1c2goayk7XG4gIH1cblxuICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgc3R5bGUgYXR0cmlidXRlIGZyb20gdGhlIG9iamVjdFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFwiY29sb3I6cmVkO3dpZHRoOjEwcHhcIlxuICogdXRpbHMuc3R5bGUoe2NvbG9yOiBcInJlZFwiLCBiYWNrZ3JvdW5kOiBmYWxzZSwgd2lkdGg6IFwiMTBweFwifSk7XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9ialxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudXRpbHMuc3R5bGUgPSBmdW5jdGlvbihvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBsZXQgc3R5bGVzID0gW107XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGsgPSBrZXlzW2ldO1xuICAgIGxldCB2YWwgPSBvYmpba107XG4gICAgdmFsICYmIHN0eWxlcy5wdXNoKGAke3RoaXMudG9EYXNoQ2FzZShrKX06JHt2YWx9YCk7XG4gIH1cblxuICByZXR1cm4gc3R5bGVzLmpvaW4oJzsnKTtcbn07XG5cbi8qKlxuICogU3BsaXQgdGhlIHN0cmluZyBleHRlbmRlZFxuICogXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyBbXCJIZWxsb1wiLCBcIldvcmxkXCJdXG4gKiB1dGlscy5zcGxpdChcIkhlbGxvIFdvcmxkXCIsIFwiIFwiKTtcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgWyd4ID0gNScsICcgeSA9IFwiMTsyOzNcIiddXG4gKiB1dGlscy5zcGxpdCgneCA9IDU7IHkgPSBcIjE7MjszXCInLCBcIjtcIiwgWydcIiddKTtcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfSBzdHIgXG4gKiBAcGFyYW0ge3N0cmluZ30gW2RlbF1cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtleGNsdWRlXSBcbiAqL1xudXRpbHMuc3BsaXQgPSBmdW5jdGlvbihzdHIsIGRlbCA9ICcnLCBleGNsdWRlID0gW10pIHtcblx0Y29uc3QgZXhwcyA9IFtdOyAgICAgXG4gIGxldCBsYXN0ID0gJyc7XG5cbiAgaWYoIWRlbCkge1xuICAgIHJldHVybiBzdHIuc3BsaXQoJycpO1xuICB9XG4gIGVsc2UgaWYoZGVsIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHN0ci5zcGxpdChkZWwpO1xuICB9XG4gIGVsc2UgaWYoc3RyLmluZGV4T2YoZGVsKSA9PSAtMSkge1xuICAgIGxhc3QgPSBzdHI7XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgYXJyID0gc3RyLnNwbGl0KCcnKTtcbiAgICBsZXQgb3BlbiA9ICcnOyBcblxuICAgIGZvcihsZXQgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgdmFsID0gYXJyW2ldO1xuICAgICAgbGV0IGluZGV4ID0gZXhjbHVkZS5pbmRleE9mKHZhbCk7ICAgICAgXG5cbiAgICAgIGlmKGluZGV4ID4gLTEgJiYgKCFvcGVuIHx8IG9wZW4gPT0gdmFsKSkge1xuICAgICAgICAhb3Blbj8gb3BlbiA9IGV4Y2x1ZGVbaW5kZXhdOiBvcGVuID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmKHZhbCA9PSBkZWwgJiYgIW9wZW4pIHtcbiAgICAgICAgZXhwcy5wdXNoKGxhc3QpO1xuICAgICAgICBsYXN0ID0gJyc7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsYXN0ICs9IHZhbDtcbiAgICB9XG4gIH1cblxuICBsYXN0ICYmIGV4cHMucHVzaChsYXN0KTtcbiAgcmV0dXJuIGV4cHM7XG59XG5cbi8qKlxuICogRmlsdGVyIHRoZSBhcnJheVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFsxLCAxMV1cbiAqIHV0aWxzLmZpbHRlcihbMSwgMiwgMywgMTFdLCAnMScpO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFt7eDogMX0sIHt4OiAxMX1dXG4gKiB1dGlscy5maWx0ZXIoW3t4OiAxfSwge3g6IDJ9LCB7eDogM30sIHt4OiAxMX1dLCAnMScsICd4Jyk7XG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFt7eDogMX0sIHt4OiAxMX1dXG4gKiB1dGlscy5maWx0ZXIoW3t4OiAxfSwge3g6IDJ9LCB7eDogM30sIHt4OiAxMX1dLCAnMScsIFsneCddKTtcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgW3t4OiAxfSwge3g6IDExfV1cbiAqIHV0aWxzLmZpbHRlcihbe3g6IDF9LCB7eDogMn0sIHt4OiAzfSwge3g6IDExfV0sICcxJywgW1sneCddXSk7XG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFt7eDoge3k6IDF9fV1cbiAqIHV0aWxzLmZpbHRlcihbe3g6IHt5OiAxfX0sIHt4OiB7eTogMn19XSwgJzEnLCBbWyd4JywgJ3knXV0pO1xuICogXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyBbe3g6MSwgeTogMn0sIHt4OiAyLCB5OjF9XSBcbiAqIHV0aWxzLmZpbHRlcihbe3g6IDEsIHk6IDJ9LCB7eDogMywgeTogM30sIHt4OiAyLCB5OiAxfV0sICcxJywgWyd4JywgJ3knXSk7XG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFt7eDoxLCB5OiAyfSwge3g6IDIsIHk6MX1dXG4gKiB1dGlscy5maWx0ZXIoW3t4OiAxLCB5OiAyfSwge3g6IDMsIHk6IDN9LCB7eDogMiwgeTogMX1dLCAnMScsIFtbJ3gnXSwgWyd5J11dKTtcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJcbiAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cHxmdW5jdGlvbn0gaGFuZGxlciAtIHR5cGUgb2YgdGhlIGZpbHRlcmluZ1xuICogQHBhcmFtIHtzdHJpbmdbXXxzdHJpbmd9IFtrZXlzXSAtIGZpbHRlciBieSB0aGUga2V5c1xuICogQHJldHVybnMge0FycmF5fSBcbiAqL1xudXRpbHMuZmlsdGVyID0gZnVuY3Rpb24gKGFyciwgaGFuZGxlciwga2V5cyA9IG51bGwpIHtcbiAgbGV0IHJlcyA9IFtdO1xuXG4gIGlmIChrZXlzICYmICFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAga2V5cyA9IFtrZXlzXTtcbiAgfVxuXG4gIGlmKHR5cGVvZiBoYW5kbGVyICE9ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBzdHIgPSBoYW5kbGVyPyAoaGFuZGxlciArICcnKS50b0xvd2VyQ2FzZSgpOiAnJztcbiAgICBoYW5kbGVyID0gdmFsID0+ICh2YWw/ICh2YWwgKyAnJykudG9Mb3dlckNhc2UoKTogJycpLm1hdGNoKHN0cik7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgaXRlbSA9IGFycltpXTtcbiAgICBsZXQgZmlsdGVyZWQgPSBmYWxzZTtcblxuICAgIGlmKCFrZXlzICYmIGhhbmRsZXIoaXRlbSkpIHtcbiAgICAgIGZpbHRlcmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZihrZXlzKSB7XG4gICAgICBmb3IobGV0IGsgPSAwLCBjID0ga2V5cy5sZW5ndGg7IGsgPCBjOyBrKyspIHtcbiAgICAgICAgbGV0IGtleSA9IGtleXNba107XG4gICAgICAgIGtleSA9IEFycmF5LmlzQXJyYXkoa2V5KT8ga2V5OiBba2V5XTtcbiAgICAgICAgbGV0IHZhbCA9IGtleT8gdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5cyhrZXksIGl0ZW0pOiBpdGVtO1xuICAgIFxuICAgICAgICBpZiAoaGFuZGxlcih2YWwpKSB7XG4gICAgICAgICAgZmlsdGVyZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmlsdGVyZWQgJiYgcmVzLnB1c2goaXRlbSk7ICAgXG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBTb3J0IHRoZSBhcnJheVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFsxLCAyLCAzXVxuICogdXRpbHMuc29ydChbMywgMiwgMV0sIHRydWUpO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFszLCAyLCAxXVxuICogdXRpbHMuc29ydChbMSwgMiwgM10sIGZhbHNlKTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyBbe3g6IDF9LCB7eDogMn0sIHt4OiAzfV1cbiAqIHV0aWxzLnNvcnQoW3t4OiAzfSwge3g6IDJ9LCB7eDogMX1dLCBbWyd4J11dLCBbdHJ1ZV0pO1xuICogdXRpbHMuc29ydChbe3g6IDN9LCB7eDogMn0sIHt4OiAxfV0sIFsneCddLCB0cnVlKTtcbiAqIHV0aWxzLnNvcnQoW3t4OiAzfSwge3g6IDJ9LCB7eDogMX1dLCAneCcpO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIFt7eDogM30sIHt4OiAyfSwge3g6IDF9XVxuICogdXRpbHMuc29ydChbe3g6IDF9LCB7eDogMn0sIHt4OiAzfV0sIFtbJ3gnXV0sIFtmYWxzZV0pO1xuICogdXRpbHMuc29ydChbe3g6IDF9LCB7eDogMn0sIHt4OiAzfV0sIFsneCddLCBmYWxzZSk7XG4gKiB1dGlscy5zb3J0KFt7eDogMX0sIHt4OiAyfSwge3g6IDN9XSwgJ3gnLCBmYWxzZSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgW3t4OiAxLCB5OiAzfSwge3g6IDIsIHk6IDF9LCB7eDoyLCB5OiAyfV1cbiAqIHV0aWxzLnNvcnQoW3t4OiAyLCB5OiAyfSwge3g6IDIsIHk6IDF9LCB7eDogMiwgeTogM31dLCBbWyd4J10sIFsneSddXSwgW3RydWUsIHRydWVdKTtcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgW3t4OiB7eTogMX19LCB7eDoge3k6IDJ9fV1cbiAqIHV0aWxzLnNvcnQoW3t4OiB7eTogMn19LCB7eDoge3k6IDF9fV0sIFtbJ3gnLCAneSddXSwgW3RydWVdKTtcbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJcbiAqIEBwYXJhbSB7Ym9vbGVhbnxBcnJheVtdfHN0cmluZ1tdfHN0cmluZ30gW2tleXNdXG4gKiBAcGFyYW0ge2Jvb2xlYW58Ym9vbGVhbltdfSBbb3JkZXJdIC0gcmV2ZXJzZSBvciBub3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xudXRpbHMuc29ydCA9IGZ1bmN0aW9uKGFyciwga2V5cyA9IHRydWUsIG9yZGVyID0gW10pIHtcbiAgYXJyID0gYXJyLnNsaWNlKCk7XG5cbiAgaWYgKGtleXMgPT09IHRydWUpIHtcbiAgICBrZXlzID0gW107XG4gICAgb3JkZXIgPSBbdHJ1ZV07XG4gIH1cbiAgZWxzZSBpZiAoa2V5cyA9PT0gZmFsc2UpIHtcbiAgICBrZXlzID0gW107XG4gICAgb3JkZXIgPSBbZmFsc2VdO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAga2V5cyA9IFtrZXlzXTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShvcmRlcikpIHtcbiAgICBvcmRlciA9IFtvcmRlcl07XG4gIH1cblxuICBsZXQgbCA9IGtleXMubGVuZ3RoO1xuXG4gIGFyci5zb3J0KChhLCBiKSA9PiB7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgY29uc3QgY2hlY2sgPSAoYSwgYiwgcmV2ZXJzZSA9IGZhbHNlKSA9PiB7XG4gICAgICBpZiAoYSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgYSA9IGEuZ2V0VGltZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgYiA9IGIuZ2V0VGltZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmV0dXJuIHJldmVyc2U/IC0xOiAxO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmV0dXJuIHJldmVyc2U/IDE6IC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9O1xuXG4gICAgY29uc3QgbmV4dCA9ICgpID0+IHtcbiAgICAgIGlmIChpID49IGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5KSkge1xuICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgIH1cblxuICAgICAgbGV0IGFWID0gdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5cyhrZXksIGEpO1xuICAgICAgbGV0IGJWID0gdGhpcy5nZXRQcm9wZXJ0eUJ5S2V5cyhrZXksIGIpO1xuICAgICAgbGV0IHJlcyA9IGNoZWNrKGFWLCBiViwgb3JkZXJbaV0gPT09IGZhbHNlKTtcblxuICAgICAgaWYgKHJlcyAhPT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuXG4gICAgICBpKys7XG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH07XG5cbiAgICBpZiAoIWwpIHtcbiAgICAgIHJldHVybiBjaGVjayhhLCBiLCBvcmRlcltpXSA9PT0gZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0KCk7XG4gIH0pO1xuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIGtleXNcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMge3g6IDEsIHo6IDF9XG4gKiB1dGlscy5pbmNsdWRlS2V5cyh7eDogMSwgeTogMSwgejogMX0sIFsneCcsICd6J10pO1xuICogXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gKi9cbnV0aWxzLmluY2x1ZGVLZXlzID0gZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gIGxldCBuZXdPYmogPSB7fTtcbiAgbGV0IG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gIGZvcihsZXQgaSA9IDAsIGwgPSBvYmpLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBrZXkgPSBvYmpLZXlzW2ldO1xuXG4gICAgaWYoa2V5cy5pbmRleE9mKGtleSkgIT0gLTEpIHtcbiAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBuZXcgb2JqZWN0IHdpdGhvdXQgdGhlIHNwZWNpZmllZCBrZXlzXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIHt4OiAxLCB6OiAxfVxuICogdXRpbHMuaW5jbHVkZUtleXMoe3g6IDEsIHk6IDEsIHo6IDF9LCBbJ3knXSk7XG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAqL1xudXRpbHMuZXhjbHVkZUtleXMgPSBmdW5jdGlvbihvYmosIGtleXMpIHtcbiAgbGV0IG5ld09iaiA9IHt9O1xuICBsZXQgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG5cbiAgZm9yKGxldCBpID0gMCwgbCA9IG9iaktleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGtleSA9IG9iaktleXNbaV07XG5cbiAgICBpZihrZXlzLmluZGV4T2Yoa2V5KSA9PSAtMSkge1xuICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG4vKipcbiAqIENoZWNrIHRoZSB2YWx1ZSBpcyB0aGUgc2NvcGUgcHJveHkgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG51dGlscy5pc1Njb3BlUHJveHkgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuICEhKHZhbCAmJiB0eXBlb2YgdmFsID09ICdvYmplY3QnICYmIHZhbC5fX2lzUHJveHkpO1xufTtcblxuLyoqXG4gKiBDaGVjayB0aGUgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbnV0aWxzLmlzUGxhaW5PYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuICEhKG9iaiAmJiB0eXBlb2Ygb2JqID09ICdvYmplY3QnICYmIChvYmouY29uc3RydWN0b3IgPT0gT2JqZWN0IHx8IG9iai5jb25zdHJ1Y3RvciA9PSBBcnJheSkpO1xufTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnNdIFxuICogQHJldHVybnMgeyp9XG4gKi9cbnV0aWxzLmNvcHkgPSBmdW5jdGlvbih2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ29iamVjdCcgfHwgIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgb3B0aW9ucyA9IHsgbmVzdGVkOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBwbGFpbjogZmFsc2UsIC4uLm9wdGlvbnMgfTtcblxuICBjb25zdCBuZXh0ID0gb2JqID0+IHtcbiAgICBpZihvcHRpb25zLnBsYWluICYmICF0aGlzLmlzUGxhaW5PYmplY3Qob2JqKSkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBvYmogPSB0aGlzLmlzU2NvcGVQcm94eShvYmopPyBvYmouX190YXJnZXQ6IG9iajtcbiAgICBsZXQga2V5cyA9ICFvcHRpb25zLmVudW1lcmFibGU/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaik6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgbGV0IG5ld09iaiA9IEFycmF5LmlzQXJyYXkob2JqKT8gW106IHt9O1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgbGV0IHZhbCA9IG9ialtrZXldO1xuICAgICAgdmFsID0gdmFsICYmIHR5cGVvZiB2YWwgPT0gJ29iamVjdCcgJiYgb3B0aW9ucy5uZXN0ZWQ/IG5leHQodmFsKTogdmFsOyAgICAgIFxuICAgICAgXG4gICAgICBpZighb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCB7XG4gICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSksXG4gICAgICAgICAgdmFsdWU6IHZhbFxuICAgICAgICB9KTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbmV3T2JqW2tleV0gPSB2YWw7ICBcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3T2JqO1xuICB9XG5cbiAgcmV0dXJuIG5leHQodmFsdWUpO1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGF0dHJpYnV0ZSB2YWx1ZSB0byB0aGUgYXBwcm9wcmlhdGUgZm9ybWF0XG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybnMgeyp9XG4gKi9cbnV0aWxzLm1ha2VBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlcikge1xuICAgIHJldHVybiAnW29iamVjdCBFdmVudF0nO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWUgKyAnJztcbn07XG5cbi8qKlxuICogQ29tcGFyZSB0d28gdmFsdWVzXG4gKlxuICogQHBhcmFtIHsqfSBhXG4gKiBAcGFyYW0geyp9IGJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG51dGlscy5jb21wYXJlID0gZnVuY3Rpb24gKGEsIGIsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoKGEgaW5zdGFuY2VvZiBEYXRlKSAmJiAoYiBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgYSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICBpZiAoYSA9PT0gbnVsbCB8fCBiID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYSA9PT0gYjtcbiAgICB9XG5cbiAgICBvcHRpb25zID0geyBlbnVtZXJhYmxlOiB0cnVlLCBpZ25vcmVVbmRlZmluZWQ6IHRydWUsIC4uLm9wdGlvbnMgfTtcblxuICAgIGNvbnN0IGNsZWFyVW5kZWZpbmVkID0gdmFsID0+IHtcbiAgICAgIGxldCBvYmogPSBBcnJheS5pc0FycmF5KHZhbCk/IFtdOiB7fTtcbiAgICAgIGxldCBrZXlzID0gIW9wdGlvbnMuZW51bWVyYWJsZT8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKTogT2JqZWN0LmtleXModmFsKTtcblxuICAgICAgZm9yKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YWxba2V5XSAhPT0gdW5kZWZpbmVkICYmIChvYmpba2V5XSA9IHZhbFtrZXldKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIGlmKG9wdGlvbnMuaWdub3JlVW5kZWZpbmVkKSB7XG4gICAgICBhID0gY2xlYXJVbmRlZmluZWQoYSk7XG4gICAgICBiID0gY2xlYXJVbmRlZmluZWQoYik7XG4gICAgfVxuXG4gICAgbGV0IGFLZXlzID0gIW9wdGlvbnMuZW51bWVyYWJsZT8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKTogT2JqZWN0LmtleXMoYSk7XG4gICAgbGV0IGJLZXlzID0gIW9wdGlvbnMuZW51bWVyYWJsZT8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKTogT2JqZWN0LmtleXMoYik7XG4gICAgXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPSBiS2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBhID0gdGhpcy5pc1Njb3BlUHJveHkoYSk/IGEuX190YXJnZXQ6IGE7XG4gICAgYiA9IHRoaXMuaXNTY29wZVByb3h5KGIpPyBiLl9fdGFyZ2V0OiBiO1xuXG4gICAgZm9yKGxldCBpID0gMCwgbCA9IGFLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gYUtleXNbaV07XG5cbiAgICAgIGlmICghdGhpcy5jb21wYXJlKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgaGFzaCBmcm9tIHRoZSBzdHJpbmdcbiAqIFxuICogQHBhcmFtIHsqfSBzb3VyY2VcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnV0aWxzLmNyZWF0ZUhhc2ggPSBmdW5jdGlvbihzb3VyY2UpIHtcbiAgdHlwZW9mIHNvdXJjZSA9PSAnb2JqZWN0JyAmJiAoc291cmNlID0gSlNPTi5zdHJpbmdpZnkoc291cmNlKSk7XG4gIHR5cGVvZiBzb3VyY2UgIT0gJ3N0cmluZycgJiYgKHNvdXJjZSA9ICfioIAnICsgU3RyaW5nKHNvdXJjZSkpO1xuICBsZXQgaGFzaCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY2hhciA9IHNvdXJjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNoYXI7XG4gICAgaGFzaCA9IGhhc2ggJiBoYXNoO1xuICB9XG5cbiAgcmV0dXJuIGhhc2ggKyAnJztcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGh0bWwgZW50aXRpZXNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyBcInlvdSAmYW1wIG1lXCJcbiAqIHV0aWxzLmVuY29kZUh0bWxFbnRpdGllcygneW91ICYgbWUnKTtcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudXRpbHMuZW5jb2RlSHRtbEVudGl0aWVzID0gZnVuY3Rpb24oaHRtbCkge1xuICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBsZXQgdmFsdWU7XG4gIGVsLnRleHRDb250ZW50ID0gaHRtbDtcbiAgdmFsdWUgPSBlbC5pbm5lckhUTUw7XG4gIGVsLnJlbW92ZSgpO1xuICBlbCA9IG51bGw7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogRGVjb2RlIHRoZSBodG1sIGVudGl0aWVzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgXCJ5b3UgJiBtZVwiXG4gKiB1dGlscy5kZWNvZGVIdG1sRW50aXRpZXMoJ3lvdSAmYW1wIG1lJyk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnV0aWxzLmRlY29kZUh0bWxFbnRpdGllcyA9IGZ1bmN0aW9uKGh0bWwpIHtcbiAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICBsZXQgdmFsdWU7XG4gIGVsLmlubmVySFRNTCA9IGh0bWw7XG4gIHZhbHVlID0gZWwudmFsdWU7XG4gIGVsLnJlbW92ZSgpO1xuICBlbCA9IG51bGw7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgc3RyaW5nIGZyb20gYSBkYXNoIHRvIGEgY2FtZWwgY2FzZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnV0aWxzLnRvQ2FtZWxDYXNlID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxXKyguKS9nLCAobSwgYykgPT4gYy50b1VwcGVyQ2FzZSgpKTtcbn07XG5cbi8qKlxuICogQ2FwaXRhbGl6ZSB0aGUgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xudXRpbHMuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIHN0cmluZyBmcm9tIGEgY2FtZWwgdG8gYSBkYXNoIGNhc2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG51dGlscy50b0Rhc2hDYXNlID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFtBLVpdKS9nLCAobSwgYykgPT4gYC0ke2MudG9Mb3dlckNhc2UoKX1gKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBuZXN0ZWQgb2JqZWN0IHByb3BlcnR5IGJ5IGFycmF5IGtleXNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmV0dXJucyA1XG4gKiB1dGlscy5nZXRQcm9wZXJ0eUJ5S2V5cyhbJ3gnLCAneSddLCB7eDoge3k6IDV9fSk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICogQHJldHVybnMgeyp9XG4gKi9cbnV0aWxzLmdldFByb3BlcnR5QnlLZXlzID0gZnVuY3Rpb24oa2V5cywgb2JqZWN0KSB7XG4gIGxldCBjdXJyZW50O1xuICBsZXQgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIGxldCBpID0gMDtcblxuICBrZXlzLnJlZHVjZSgobywgaykgPT4ge1xuICAgIGkrKztcblxuICAgIGlmICh0eXBlb2YgbyAhPSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIG87XG4gICAgfVxuXG4gICAgaWYgKG9ba10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIChpID09IGxlbmd0aCkgJiYgKGN1cnJlbnQgPSBvW2tdKTtcbiAgICByZXR1cm4gb1trXTtcbiAgfSwgb2JqZWN0KTtcblxuICByZXR1cm4gY3VycmVudDtcbn07XG5cbi8qKlxuICogQ2hlY2sgdGhlIG9iamVjdCBuZXN0ZWQgcHJvcGVydHkgZXhpc3RlbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgdHJ1ZVxuICogdXRpbHMuaGFzUHJvcGVydHlCeUtleXMoWyd4JywgJ3knXSwge3g6IHt5OiA1fX0pO1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG51dGlscy5oYXNQcm9wZXJ0eUJ5S2V5cyA9IGZ1bmN0aW9uKGtleXMsIG9iamVjdCkge1xuICBsZXQgaGFzID0gZmFsc2U7XG4gIGxldCBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuXG4gIGtleXMucmVkdWNlKChvLCBrKSA9PiB7XG4gICAgaSsrO1xuXG4gICAgaWYgKCFvIHx8IHR5cGVvZiBvICE9ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gISFvO1xuICAgIH1cblxuICAgIGlmICghby5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIChpID09IGxlbmd0aCkgJiYgKGhhcyA9IG8uaGFzT3duUHJvcGVydHkoaykpO1xuICAgIHJldHVybiBvW2tdO1xuICB9LCBvYmplY3QpO1xuXG4gIHJldHVybiBoYXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgb2JqZWN0IG5lc3RlZCBwcm9wZXJ0eSB2YWx1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZXR1cm5zIHt5OiA2fVxuICogdXRpbHMuc2V0UHJvcGVydHlCeUtleXMoWyd4JywgJ3knXSwge3g6IHt5OiA1fX0sIChsYXN0LCB2YWwpID0+IGxhc3Q/IDY6ICh2YWwgfHwge30pKTtcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICogQHJldHVybnMgeyp9XG4gKi9cbnV0aWxzLnNldFByb3BlcnR5QnlLZXlzID0gZnVuY3Rpb24oa2V5cywgb2JqZWN0LCBmbikge1xuICBsZXQgY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgbGV0IGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG5cbiAga2V5cy5yZWR1Y2UoKG8sIGspID0+IHtcbiAgICBpKys7XG5cbiAgICBpZiAoIW8gfHwgdHlwZW9mIG8gIT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW8uaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIG9ba10gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgb1trXSA9IGZuKGkgPT0gbGVuZ3RoLCBvW2tdKTtcbiAgICBjdXJyZW50ID0gbztcbiAgICByZXR1cm4gb1trXTtcbiAgfSwgb2JqZWN0KTtcblxuICByZXR1cm4gY3VycmVudDtcbn07XG5cbi8qKlxuICogRGVsZXRlIHRoZSBwcm9wZXJ0eSBmcm9tIHRoZSBvYmplY3RcbiAqIFlvdSBjYW4gY2FuY2VsIHRoZSBkZWxldGlvbiByZXR1cm5pbmcgZmFsc2UgaW4gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgNVxuICogdXRpbHMuZGVsZXRlUHJvcGVydHlCeUtleXMoWyd4JywgJ3knXSwge3g6IHt5OiA1fX0pO1xuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgNVxuICogdXRpbHMuZGVsZXRlUHJvcGVydHlCeUtleXMoWyd4JywgJ3knXSwge3g6IHt5OiA1fX0sIHZhbCA9PiB2YWwgIT0gNSk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICogQHBhcmFtIHtvYmplY3R9IG9iamVjdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2ZuXVxuICogQHJldHVybnMgeyp9XG4gKi9cbnV0aWxzLmRlbGV0ZVByb3BlcnR5QnlLZXlzID0gZnVuY3Rpb24oa2V5cywgb2JqZWN0LCBmbikge1xuICBsZXQgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIGxldCB2YWx1ZTtcbiAgbGV0IGkgPSAwO1xuXG4gIGtleXMucmVkdWNlKChvLCBrKSA9PiB7XG4gICAgaSsrO1xuXG4gICAgaWYgKCFvIHx8IHR5cGVvZiBvICE9ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFvLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgaWYgKGkgPT0gbGVuZ3RoKSB7XG4gICAgICB2YWx1ZSA9IG9ba107XG4gICAgICAoIWZuIHx8IGZuKHZhbHVlKSkgJiYgKGRlbGV0ZSBvW2tdKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb1trXTtcbiAgfSwgb2JqZWN0KTtcblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5cbi8qKlxuICogR2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IHRhcmdldCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbnV0aWxzLmdldEVudW1lcmFibGVQcm9wZXJ0eVRhcmdldCA9IGZ1bmN0aW9uKHRhcmdldCwga2V5KSB7XG4gIGNvbnN0IGNoZWNrID0gb2JqID0+IHtcbiAgICBpZiAob2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG5cbiAgICBpZiAoIXByb3RvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hlY2socHJvdG8pO1xuICB9O1xuXG4gIHJldHVybiBjaGVjayh0YXJnZXQpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIG93biBwcm9wZXJ0eSB0YXJnZXQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xudXRpbHMuZ2V0T3duUHJvcGVydHlUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQsIGtleSkge1xuICBjb25zdCBjaGVjayA9IG9iaiA9PiB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuXG4gICAgaWYgKCFwcm90bykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoZWNrKHByb3RvKTtcbiAgfTtcblxuICByZXR1cm4gY2hlY2sodGFyZ2V0KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20gc3RyaW5nXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqIEByZXR1cm5zIHsqfVxuICovXG51dGlscy5jcmVhdGVSYW5kb21TdHJpbmcgPSBmdW5jdGlvbihsZW5ndGggPSAxNiwgZm4gPSBudWxsKSB7XG4gIGxldCBzdHIgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgbGVuZ3RoICsgMik7XG4gIGxldCBub3cgPSBEYXRlLm5vdygpO1xuICBsZXQgdmFsID0gJyc7ICBcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoIShub3cgJSBpKSkge1xuICAgICAgdmFsICs9IHN0cltpXS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbCArPSBzdHJbaV07XG4gICAgfVxuICB9XG5cbiAgaWYgKGZuICYmIGZuKHZhbCkpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVSYW5kb21TdHJpbmcobGVuZ3RoLCBmbik7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB3aXRoIHRoZSBkZWJvdW5jZVxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAqIEByZXR1cm5zIHtmbn1cbiAqL1xudXRpbHMuZGVib3VuY2UgPSBmdW5jdGlvbihmbiwgZGVsYXkgPSAwKSB7ICBcbiAgcmV0dXJuICgpID0+IHtcbiAgICBjbGVhclRpbWVvdXQoZm4uX19kZWJvdW5jZVRpbWVvdXQpO1xuICAgIGZuLl9fZGVib3VuY2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBmbigpO1xuICAgICAgY2xlYXJUaW1lb3V0KGZuLl9fZGVib3VuY2VUaW1lb3V0KTtcbiAgICAgIGRlbGV0ZSBmbi5fX2RlYm91bmNlVGltZW91dDtcbiAgICB9LCBkZWxheSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHV0aWxzOyIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgZm9yIGVsZW1lbnRzIHdoaWNoIGhhdmUgYXN5bmMgYXR0cmlidXRlIGNvbnRlbnQuXHJcbiAqIFxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19pbWFnZSxfaWZyYW1lLF9lbWJlZCxfYXVkaW8sX3ZpZGVvLF90cmFjayxfc291cmNlLF9vYmplY3R9XHJcbiAqIFxyXG4gKiBAdGFnIHVybFxyXG4gKiBAYXR0ciB7c3RyaW5nfSBbdXJsXVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXJsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBzdGF0aWMgbWF0Y2hlcyA9ICdbdXJsXSc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcclxuICAgIHN1cGVyKC4uLmFyZ3MpO1xyXG4gICAgdGhpcy51cmxBdHRyaWJ1dGUgPSAnc3JjJztcclxuICB9XHJcblxyXG4gIGNvbXBpbGVkKCkge1xyXG4gICAgdGhpcy5hdHRyKCd1cmwnLCB0aGlzLnNldFVybCk7XHJcbiAgfVxyXG5cclxuICBzZXRVcmwodXJsKSB7XHJcbiAgICB0aGlzLmF0dHJzW3RoaXMudXJsQXR0cmlidXRlXSA9IHVybDtcclxuICB9XHJcbn0iLCJpbXBvcnQgQWtpbGkgZnJvbSAnLi9ha2lsaS5qcyc7XG5pbXBvcnQgU2NvcGUgZnJvbSAnLi9zY29wZS5qcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICcuL3NlcnZpY2VzL3JlcXVlc3QuanMnO1xuaW1wb3J0IHN0b3JlIGZyb20gJy4vc2VydmljZXMvc3RvcmUuanMnO1xuaW1wb3J0IGdsb2JhbHMgZnJvbSAnLi9nbG9iYWxzLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IGV2YWx1YXRpb25SZWdleCA9IC9cXCR7KCgoPyFcXCR7KS4pKil9LztcbmV4cG9ydCBjb25zdCBldmFsdWF0aW9uUmVnZXhHbG9iYWwgPSBuZXcgUmVnRXhwKGV2YWx1YXRpb25SZWdleC5zb3VyY2UsIFwiZ1wiKTtcbmV4cG9ydCBjb25zdCBzeXN0ZW1BdHRyaWJ1dGVzID0gWydjb21wb25lbnQnLCAnc2NvcGUnLCAnbm8tc3NyJ107XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmcm9tIHdoaWNoIGFsbCBjb21wb25lbnRzIGFyZSBpbmhlcml0ZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50IHtcbiAgc3RhdGljIG1hdGNoZXMgPSAnJztcbiAgc3RhdGljIGJvb2xlYW5BdHRyaWJ1dGVzID0gW107XG4gIHN0YXRpYyBldmVudHMgPSBbXTtcbiAgc3RhdGljIGNvbnRyb2xBdHRyaWJ1dGVzID0gZmFsc2U7XG4gIHN0YXRpYyB0cmFuc3BhcmVudCA9IGZhbHNlO1xuICBzdGF0aWMgdGVtcGxhdGUgPSAnJztcbiAgc3RhdGljIHRlbXBsYXRlVXJsID0gJyc7XG4gIHN0YXRpYyBzY29wZSA9IG51bGw7ICBcblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBjb21wb25lbnRcbiAgICovXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdjb21wb25lbnQnLCBDb21wb25lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBleHByZXNzaW9uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbdmFyc11cbiAgICovXG4gIHN0YXRpYyBwYXJzZShjb250ZXh0LCBleHByZXNzaW9uLCB2YXJpYWJsZXMgPSB7fSkge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBjb25zdCB2YXJzID0gW107XG4gICAgY29uc3QgZXhwcyA9IHV0aWxzLnNwbGl0KGV4cHJlc3Npb24sICc7JywgWydcIicsIFwiJ1wiLCAnYCddKTsgIFxuICAgIGV4cHNbZXhwcy5sZW5ndGggLSAxXSA9IGByZXR1cm4gJHtleHBzW2V4cHMubGVuZ3RoIC0gMV19YDtcblxuICAgIGZvciAobGV0IGtleSBpbiB2YXJpYWJsZXMpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgdmFycy5wdXNoKHZhcmlhYmxlc1trZXldKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbiguLi5rZXlzLCBgJHtleHBzLmpvaW4oJzsgJyl9YCkuYXBwbHkoY29udGV4dCwgdmFycyk7XG4gIH1cblxuICAvKiogXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbc2NvcGVdIFxuICAgKi9cbiAgY29uc3RydWN0b3IoZWwsIHNjb3BlID0ge30pIHtcbiAgICBpZiAoIShlbCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYW4gaHRtbCBlbGVtZW50IHRvIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3JgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9faXNNb3VudGVkID0gZmFsc2U7XG4gICAgdGhpcy5fX2lzQ29tcGlsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9faXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRoaXMuX19jYW5jZWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9fcHJldmVudCA9IGZhbHNlO1xuICAgIHRoaXMuX19iaW5kaW5ncyA9IHt9O1xuICAgIHRoaXMuX19ldmFsdWF0aW5nRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuX19yZWNvbXBpbGluZyA9IG51bGw7XG4gICAgdGhpcy5fX2NvbXBpbGluZyA9IG51bGw7XG4gICAgdGhpcy5fX2Rpc2FibGVQcm94eSA9IHt9O1xuICAgIHRoaXMuX19kaXNhYmxlU3RvcmVLZXlzID0ge307XG4gICAgdGhpcy5fX2Rpc2FibGVBdHRyS2V5cyA9IHt9O1xuICAgIHRoaXMuX19jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMuX19wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuX19wYXJlbnRzID0gW107XG4gICAgdGhpcy5fX2NvbnRlbnQgPSAnJztcbiAgICB0aGlzLl9fYXR0cnMgPSB7fTtcbiAgICB0aGlzLl9fYXR0ckxpbmtzID0ge307XG4gICAgdGhpcy5fX3N0b3JlTGlua3MgPSB7fTtcbiAgICB0aGlzLl9fYXR0cmlidXRlT2YgPSBudWxsO1xuICAgIHRoaXMuX19ldmFsdWF0aW9uQ29tcG9uZW50ID0gdGhpcztcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5lbCA9IGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgY29tcGlsYXRpb24gb3B0aW9ucyBcbiAgICogXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19jcmVhdGVDb21waWxhdGlvbk9wdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHsgXG4gICAgICBjaGVja0NoYW5nZXM6IGZhbHNlLCBcbiAgICAgIHNldEV2ZW50czogdHJ1ZSxcbiAgICAgIHNldFBhcmVudHM6IHRydWUsXG4gICAgICBzZXRCb29sZWFuQXR0cmlidXRlczogdHJ1ZSxcbiAgICAgIGRlZmluZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAuLi5vcHRpb25zIFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSByZWNvbXBpbGF0aW9uIG9wdGlvbnMgXG4gICAqIFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fY3JlYXRlUmVjb21waWxhdGlvbk9wdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHsgXG4gICAgICAuLi50aGlzLl9fY3JlYXRlQ29tcGlsYXRpb25PcHRpb25zKCksXG4gICAgICBzZXRFdmVudHM6IGZhbHNlLFxuICAgICAgc2V0UGFyZW50czogZmFsc2UsXG4gICAgICBkZWZpbmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICAgIC4uLm9wdGlvbnMgXG4gICAgfTtcbiAgfVxuIFxuICAvKipcbiAgICogUmVjb21waWxlIHRoZSBjb21wb25lbnRcbiAgICogXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19yZWNvbXBpbGUob3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5fX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX19yZWNvbXBpbGluZyA9IHRydWU7IFxuICAgIHRoaXMuX19ldmFsdWF0aW9uQ29tcG9uZW50Ll9fZGlzYWJsZVByb3h5ID0ge307ICBcbiAgICB0aGlzLl9fY29tcGlsaW5nID0gdGhpcy5fX2NyZWF0ZVJlY29tcGlsYXRpb25PcHRpb25zKG9wdGlvbnMpOyAgICBcbiAgICB0aGlzLl9fY29tcGlsaW5nLnNldEV2ZW50cyAmJiB0aGlzLl9fc2V0RXZlbnRzKCk7XG4gICAgdGhpcy5fX2NvbXBpbGluZy5zZXRQYXJlbnRzICYmIHRoaXMuX19zZXRQYXJlbnRzKCk7XG4gICAgdGhpcy5fX2NvbXBpbGluZy5zZXRCb29sZWFuQXR0cmlidXRlcyAmJiB0aGlzLl9fc2V0Qm9vbGVhbkF0dHJpYnV0ZXMoKTtcbiAgICB0aGlzLl9fY29tcGlsaW5nLmRlZmluZUF0dHJpYnV0ZXMgJiYgdGhpcy5fX2RlZmluZUF0dHJpYnV0ZXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2NyZWF0ZSgpIHtcbiAgICB0aGlzLl9fY29tcGlsaW5nID0gdGhpcy5fX2NyZWF0ZUNvbXBpbGF0aW9uT3B0aW9ucygpOyBcbiAgICB0aGlzLl9faW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMuX19zZXRFdmVudHMoKTtcbiAgICB0aGlzLl9fc2V0UGFyZW50cygpO1xuICAgIHRoaXMuX19zZXRCb29sZWFuQXR0cmlidXRlcygpO1xuICAgIHRoaXMuX19kZWZpbmVBdHRyaWJ1dGVzKCk7IFxuICAgIEFraWxpLmlzb2xhdGUoKCkgPT4gdGhpcy5jcmVhdGVkKHRoaXMuYXR0cnMpKTsgIFxuICB9XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgdGhlIG5vZGVcbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIF9fY29tcGlsZSgpIHtcbiAgICBsZXQgY29udHJvbCA9IHRoaXMuX19jb250cm9sQXR0cmlidXRlcyB8fCAhdGhpcy5fX2V2YWx1YXRpb25QYXJlbnQ7XG4gICAgbGV0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB0aGlzLl9fYXR0cmlidXRlT2YgPSBjb250cm9sPyB0aGlzOiB0aGlzLl9fZXZhbHVhdGlvblBhcmVudC5fX2FraWxpO1xuICAgIFxuICAgIGlmICghdGhpcy5fX3JlY29tcGlsaW5nIHx8IHRoaXMuX19jb21waWxpbmcubmV3UGFyZW50IHx8IHRoaXMuX19jb250cm9sQXR0cmlidXRlcykge1xuICAgICAgdGhpcy5fX2ludGVycG9sYXRlQXR0cmlidXRlcyh0aGlzLmVsLCB0aGlzLl9fYXR0cmlidXRlT2YpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBpbnRlcnBvbGF0ZSA9IChjaGlsZHJlbiwgcGFyZW50KSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMyAmJiB0aGlzLl9faW5pdGlhbGl6ZU5vZGUoY2hpbGQsIHBhcmVudCkpIHsgICAgICAgICAgXG4gICAgICAgICAgdGhpcy5fX2V2YWx1YXRlTm9kZShjaGlsZCwgdGhpcy5fX2NvbXBpbGluZz8gdGhpcy5fX2NvbXBpbGluZy5jaGVja0NoYW5nZXM6IGZhbHNlKTsgIFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09IDEgJiYgIWNoaWxkLl9fYWtpbGkpIHtcbiAgICAgICAgICB0aGlzLl9faW50ZXJwb2xhdGVBdHRyaWJ1dGVzKGNoaWxkKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjaGlsZC5jaGlsZE5vZGVzLCBjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9OyAgICBcblxuICAgIGludGVycG9sYXRlKHRoaXMuZWwuY2hpbGROb2RlcywgdGhpcy5lbCk7XG4gICAgdGhpcy5fX2lzTW91bnRlZCA9IHRydWU7XG4gICAgbGV0IHJlcztcblxuICAgIGlmICghdGhpcy5fX3JlY29tcGlsaW5nKSB7XG4gICAgICByZXMgPSBBa2lsaS5pc29sYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5hdHRycy5vbkNvbXBpbGVkICYmIHRoaXMuYXR0cnMub25Db21waWxlZC50cmlnZ2VyKHVuZGVmaW5lZCwgeyBidWJibGVzOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci50ZW1wbGF0ZVVybCkge1xuICAgICAgICBwID0gcmVxdWVzdC5nZXQodGhpcy5jb25zdHJ1Y3Rvci50ZW1wbGF0ZVVybCwgeyBjYWNoZTogdGhpcy5jb25zdHJ1Y3Rvci50ZW1wbGF0ZUNhY2hlIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRoaXMuX19jb250ZW50O1xuICAgICAgICAgIEFraWxpLnNldFRlbXBsYXRlKHRoaXMuZWwsIHJlcy5kYXRhKTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fX2NvbnRlbnQ7ICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiBBa2lsaS5jb21waWxlKHRoaXMuZWwsIHsgcmVjb21waWxlOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXMgPSBBa2lsaS5pc29sYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5hdHRycy5vblJlY29tcGlsZWQgJiYgdGhpcy5hdHRycy5vblJlY29tcGlsZWQudHJpZ2dlcih1bmRlZmluZWQsIHsgYnViYmxlczogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMucmVjb21waWxlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuX19yZWNvbXBpbGluZyA9IG51bGw7XG4gICAgdGhpcy5fX2NvbXBpbGluZyA9IG51bGw7XG5cbiAgICByZXR1cm4gcC50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuX19pc0NvbXBpbGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZSB0aGUgY29tcG9uZW50XG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBfX3Jlc29sdmUoKSB7XG4gICAgaWYgKHRoaXMuX19pc1Jlc29sdmVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuYXR0cnMub25SZXNvbHZlZCAmJiB0aGlzLmF0dHJzLm9uUmVzb2x2ZWQudHJpZ2dlcih1bmRlZmluZWQsIHsgYnViYmxlczogZmFsc2UgfSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEFraWxpLmlzb2xhdGUoKCkgPT4gdGhpcy5yZXNvbHZlZCgpKSkudGhlbihyZXMgPT4ge1xuICAgICAgdGhpcy5fX2lzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBjb21wb25lbnRcbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19pbml0aWFsaXplKCkgeyAgICBcbiAgICBsZXQgcGFyZW50ID0gQWtpbGkuZ2V0QWtpbGlQYXJlbnRzKHRoaXMuZWwsIGZhbHNlKTsgICAgIFxuICAgIGxldCBTY29wZSA9IHRoaXMuY29uc3RydWN0b3Iuc2NvcGUgfHwgQWtpbGkuU2NvcGU7XG4gICAgbGV0IHNjb3BlO1xuICAgIGxldCBpc1Jvb3QgPSBBa2lsaS5fX3Jvb3QgPT09IHRoaXMuZWw7XG4gICAgdGhpcy5lbC5fX2FraWxpID0gdGhpcztcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHNjb3BlID0gbmV3IFNjb3BlKHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdzY29wZScpIHx8IEFraWxpLmNyZWF0ZVNjb3BlTmFtZSgpLCB0aGlzLmVsLCB0aGlzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzY29wZSA9IG5ldyBTY29wZShpc1Jvb3Q/ICdyb290JzogQWtpbGkuY3JlYXRlU2NvcGVOYW1lKCksIHRoaXMuZWwsIHRoaXMpO1xuICAgICAgaXNSb290ICYmIChBa2lsaS5yb290ID0gdGhpcyk7XG4gICAgfVxuXG4gICAgbGV0IF9fc2NvcGUgPSBzY29wZTtcbiAgICBsZXQgX3Njb3BlID0gT2JqZWN0LmFzc2lnbihzY29wZSwgdGhpcy5zY29wZSk7XG4gICAgbGV0IGNvbnRyb2xBdHRyaWJ1dGVzID0gdGhpcy5jb25zdHJ1Y3Rvci5jb250cm9sQXR0cmlidXRlcztcbiAgICBsZXQgZXZlbnRzID0gdGhpcy5jb25zdHJ1Y3Rvci5ldmVudHM7XG5cbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci50ZW1wbGF0ZSkge1xuICAgICAgQWtpbGkuc2V0VGVtcGxhdGUodGhpcy5lbCwgdGhpcy5jb25zdHJ1Y3Rvci50ZW1wbGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IudGVtcGxhdGVVcmwpIHtcbiAgICAgIHRoaXMuX19jb250ZW50ID0gdGhpcy5lbC5pbm5lckhUTUw7XG4gICAgICB0aGlzLmVsLmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMuX19zY29wZSA9IF9fc2NvcGU7XG4gICAgdGhpcy5fX2V2ZW50cyA9IGV2ZW50cztcbiAgICB0aGlzLl9fY29udHJvbEF0dHJpYnV0ZXMgPSBjb250cm9sQXR0cmlidXRlcztcbiAgICBBa2lsaS5hZGRTY29wZShzY29wZSk7ICAgIFxuICAgIHRoaXMuc2NvcGUgPSB0aGlzLl9fbmVzdGVkT2JzZXJ2ZShfc2NvcGUsIFtdKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGJvb2xlYW4gYXR0cmlidXRlc1xuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3NldEJvb2xlYW5BdHRyaWJ1dGVzKCkge1xuICAgIHRoaXMuYm9vbGVhbkF0dHJpYnV0ZXMgPSBbXS5jb25jYXQoQWtpbGkuaHRtbEJvb2xlYW5BdHRyaWJ1dGVzLCB0aGlzLmNvbnN0cnVjdG9yLmJvb2xlYW5BdHRyaWJ1dGVzKTtcblxuICAgIGNvbnN0IHNldEF0dHIgPSBlbCA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgYXR0cnMgPSBlbC5hdHRyaWJ1dGVzLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gYXR0cnNbaV07XG5cbiAgICAgICAgaWYgKHRoaXMuYm9vbGVhbkF0dHJpYnV0ZXMuaW5kZXhPZihub2RlLm5vZGVOYW1lKSAhPSAtMSkge1xuICAgICAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoYGJvb2xlYW4tJHtub2RlLm5vZGVOYW1lfWApKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYGJvb2xlYW4tJHtub2RlLm5vZGVOYW1lfWAsIGVsLmdldEF0dHJpYnV0ZShub2RlLm5vZGVOYW1lKSB8fCBub2RlLm5vZGVOYW1lKTtcbiAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUobm9kZS5ub2RlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gZWwuY2hpbGRyZW5baV07XG5cbiAgICAgICAgaWYgKCFjaGlsZC5fX2FraWxpKSB7XG4gICAgICAgICAgc2V0QXR0cihjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2V0QXR0cih0aGlzLmVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGV2ZW50c1xuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3NldEV2ZW50cygpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuX19ldmVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgZXYgPSB0aGlzLl9fZXZlbnRzW2ldO1xuICAgICAgIS9eb24tL2kudGVzdChldikgJiYgKGV2ID0gJ29uLScgKyBldik7XG5cbiAgICAgIGlmICghdGhpcy5lbC5oYXNBdHRyaWJ1dGUoZXYpKSB7XG4gICAgICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKGV2LCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY29tcG9uZW50IHBhcmVudHNcbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19zZXRQYXJlbnRzKCkge1xuICAgIGxldCBwYXJlbnRzID0gQWtpbGkuZ2V0QWtpbGlQYXJlbnRzKHRoaXMuZWwpO1xuXG4gICAgaWYgKCFwYXJlbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBuZXdQYXJlbnQgPSB0aGlzLl9fcGFyZW50ICE9PSBwYXJlbnRzWzBdO1xuICAgIGxldCBldmFsdWF0aW9uUGFyZW50ID0gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcGFyZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBwYXJlbnQgPSBwYXJlbnRzW2ldO1xuXG4gICAgICBpZiAoIXBhcmVudC5fX2FraWxpLmNvbnN0cnVjdG9yLnRyYW5zcGFyZW50KSB7XG4gICAgICAgIGV2YWx1YXRpb25QYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX19jb21waWxpbmcubmV3UGFyZW50ID0gbmV3UGFyZW50O1xuICAgIG5ld1BhcmVudCAmJiB0aGlzLl9fZGV0YWNoKCk7XG5cbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci50cmFuc3BhcmVudCkge1xuICAgICAgdGhpcy5fX2V2YWx1YXRpb25Db21wb25lbnQgPSBldmFsdWF0aW9uUGFyZW50Ll9fYWtpbGk7XG4gICAgfVxuXG4gICAgdGhpcy5fX2V2YWx1YXRpb25QYXJlbnQgPSBldmFsdWF0aW9uUGFyZW50O1xuICAgIHRoaXMuX19wYXJlbnQgPSBwYXJlbnRzWzBdO1xuICAgIHRoaXMuX19wYXJlbnRzID0gcGFyZW50cztcbiAgICB0aGlzLnNjb3BlLl9fcGFyZW50ID0gdGhpcy5fX2V2YWx1YXRpb25QYXJlbnQuX19ha2lsaS5zY29wZTtcbiAgICAhdGhpcy5fX3JlY29tcGlsaW5nICYmIHRoaXMuX19wYXJlbnQuX19ha2lsaS5fX2FkZENoaWxkKHRoaXMuZWwpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLnNjb3BlLCB0aGlzLl9fcGFyZW50Ll9fYWtpbGkuX19zY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRoZSBjaGlsZCBlbGVtZW50IHRvIHRoZSBsaXN0XG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19hZGRDaGlsZChlbCkge1xuICAgIHRoaXMuX19jaGlsZHJlbi5wdXNoKGVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpY2UgdGhlIGNoaWxkIGZyb20gdGhlIGxpc3RcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3NwbGljZUNoaWxkKGVsKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLl9fY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgY2hpbGQgPSB0aGlzLl9fY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjaGlsZCA9PT0gZWwpIHtcbiAgICAgICAgdGhpcy5fX2NoaWxkcmVuLnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBsLS07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcGFyc2VkIGV4cHJlc3Npb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb25cbiAgICogQHJldHVybnMgeyp9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZ2V0UGFyc2VkRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIG5lZWQgb2YgdGhlIGF2YWx1YXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2NoZWNrRXZhbHVhdGlvbihub2RlKSB7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhub2RlLl9fcHJvcGVydGllcykubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBrIGluIG5vZGUuX19wcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAoIW5vZGUuX19wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgcHJvcCA9IG5vZGUuX19wcm9wZXJ0aWVzW2tdO1xuICAgICAgbGV0IHZhbHVlID0gdXRpbHMuZ2V0UHJvcGVydHlCeUtleXMocHJvcC5rZXlzLCBwcm9wLmNvbXBvbmVudC5fX3Njb3BlKTtcblxuICAgICAgaWYgKCFub2RlLl9fY29tcG9uZW50Ll9fY29tcGFyZU5vZGVQcm9wZXJ0eVZhbHVlKHByb3AsIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhlIG5vZGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19jaGVja05vZGVQcm9wZXJ0eUNoYW5nZShub2RlLCBrZXlzLCB2YWx1ZSkge1xuICAgIGxldCBwcm9wID0gdGhpcy5fX2dldE5vZGVQcm9wZXJ0eShub2RlLCBrZXlzKTtcbiAgICBcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiAhbm9kZS5fX2NvbXBvbmVudC5fX2NvbXBhcmVOb2RlUHJvcGVydHlWYWx1ZShwcm9wLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyZSB0aGUgbm9kZSBwcm9wZXJ0eSB2YWx1ZVxuICAgKiBcbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3AgXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fY29tcGFyZU5vZGVQcm9wZXJ0eVZhbHVlKHByb3AsIHZhbHVlLCBvcHRpb25zID0ge30pIHsgIFxuICAgIHJldHVybiB1dGlscy5jb21wYXJlKHV0aWxzLmNyZWF0ZUhhc2godmFsdWUpLCBwcm9wLmhhc2gsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBleGNlcHRpb24gbWVzc2FnZVxuICAgKiBcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIFxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnIgXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fY3JlYXRlRXhjZXB0aW9uTWVzc2FnZShub2RlLCBlcnIpIHtcbiAgICBsZXQgdGFnTmFtZSA9IG5vZGUuX19jb21wb25lbnQuZWwudGFnTmFtZTtcbiAgICBsZXQgYXR0ck5hbWUgPSBub2RlLl9fY29tcG9uZW50LmVsLmdldEF0dHJpYnV0ZSgnY29tcG9uZW50Jyk7XG4gICAgbGV0IGNvbXBvbmVudE5hbWUgPSAoYXR0ck5hbWUgfHwgdGFnTmFtZSkudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgZWxlbWVudE5hbWUgPSBub2RlLl9fZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGF0dHJpYnV0ZU5hbWUgPSAobm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5BdHRyKT8gbm9kZS5uYW1lLnRvTG93ZXJDYXNlKCk6ICcnOyAgICAgICAgXG4gICAgbGV0IG1lc3NhZ2VzID0gWyBlcnIubWVzc2FnZSwgbm9kZS5fX2V4cHJlc3Npb24udHJpbSgpIF07XG4gICAgYXR0cmlidXRlTmFtZSAmJiBtZXNzYWdlcy5wdXNoKGBbYXR0cmlidXRlICR7YXR0cmlidXRlTmFtZX1dYCk7XG4gICAgbWVzc2FnZXMgPSBtZXNzYWdlcy5jb25jYXQoW2BbZWxlbWVudCAke2VsZW1lbnROYW1lfV1gLCBgW2NvbXBvbmVudCAke2NvbXBvbmVudE5hbWV9XWBdKTtcbiAgICByZXR1cm4gYEV4cHJlc3Npb24gZXJyb3I6IGAgKyBtZXNzYWdlcy5qb2luKCdcXG5cXHRhdCAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgbm9kZSBleHByZXNzaW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19ldmFsdWF0ZShub2RlKSB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGxldCBhdHRyaWJ1dGVWYWx1ZTtcbiAgICBsZXQgZXhwcmVzc2lvbjtcbiAgICBjb25zdCBldmFsQ29tcG9uZW50ID0gbm9kZS5fX2F0dHJpYnV0ZU9mIHx8IG5vZGUuX19jb21wb25lbnQ7XG5cbiAgICBpZiAobm9kZS5fX2NvbXBvbmVudC5wYXJlbnRzKGNvbSA9PiBjb20uX19wcmV2ZW50KS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7IHJlczogbm9kZS5fX2V4cHJlc3Npb24gfTtcbiAgICB9XG5cbiAgICBpZiAoIShub2RlIGluc3RhbmNlb2Ygd2luZG93LkF0dHIpICYmIG5vZGUuX19jb21wb25lbnQuX19wcmV2ZW50KSB7XG4gICAgICByZXR1cm4geyByZXM6IG5vZGUuX19leHByZXNzaW9uIH07XG4gICAgfVxuICAgIFxuICAgIGxldCByZXMgPSBub2RlLl9fZXhwcmVzc2lvbi5yZXBsYWNlKGV2YWx1YXRpb25SZWdleEdsb2JhbCwgKG0sIGQpID0+IHsgICAgIFxuICAgICAgY291bnRlcisrO1xuICAgICAgbGV0IGV2YWx1YXRlO1xuICAgICAgbGV0IGV2YWx1YXRpb24gPSBbXTtcbiAgICAgIGxldCBleGlzdGluZ0JpbmRpbmdzID0ge307XG4gICAgICBsZXQgcGFyZW50QmluZGluZ3MgPSB7fTtcbiAgICAgIGxldCBwYXJzZVZhbHVlID0gbm9kZS5fX2NvbXBvbmVudC5fX2dldFBhcnNlZEV4cHJlc3Npb24oZCk7XG4gICAgICBBa2lsaS5fX2V2YWx1YXRpb24gPSB7IG5vZGU6IG5vZGUsIGxpc3Q6IFtdLCBjb21wb25lbnQ6IG5vZGUuX19jb21wb25lbnQgfTtcbiAgICAgIFxuICAgICAgdHJ5IHsgICAgICAgIFxuICAgICAgICBldmFsdWF0ZSA9IHRoaXMuY29uc3RydWN0b3IucGFyc2UoZXZhbENvbXBvbmVudC5fX2V2YWx1YXRpb25Db21wb25lbnQuc2NvcGUsIHBhcnNlVmFsdWUsIHsgLi4uZ2xvYmFscyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlcnIpIHsgICAgICAgIFxuICAgICAgICB0aHJvdyB0aGlzLl9fY3JlYXRlRXhjZXB0aW9uTWVzc2FnZShub2RlLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBpZihBa2lsaS5fX2V2YWx1YXRpb24pIHtcbiAgICAgICAgZXZhbHVhdGlvbiA9IEFraWxpLl9fZXZhbHVhdGlvbi5saXN0O1xuICAgICAgICBBa2lsaS5fX2V2YWx1YXRpb24ubGlzdCA9IG51bGw7XG4gICAgICAgIEFraWxpLl9fZXZhbHVhdGlvbiA9IG51bGw7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGZvciAobGV0IGkgPSBldmFsdWF0aW9uLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGxldCBkYXRhID0gZXZhbHVhdGlvbltpXTtcbiAgICAgICAgbGV0IGhhc2ggPSBkYXRhLmNvbXBvbmVudC5fX2NyZWF0ZUtleXNIYXNoKGRhdGEua2V5cyk7XG4gICAgICAgIGxldCBwYXJlbnRzSGFzaCA9IGRhdGEuY29tcG9uZW50Ll9fY3JlYXRlS2V5c0hhc2goZGF0YS5wYXJlbnRzKTtcbiAgICAgICBcbiAgICAgICAgaWYgKGRhdGEubm90QmluZGluZykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nQmluZGluZ3NbaGFzaF0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJlbnRWYWx1ZSA9IHV0aWxzLmdldFByb3BlcnR5QnlLZXlzKGRhdGEucGFyZW50cywgZGF0YS5jb21wb25lbnQuX19zY29wZSk7ICAgICAgICBcblxuICAgICAgICBpZiAocGFyZW50VmFsdWUgJiYgdHlwZW9mIHBhcmVudFZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKEFraWxpLm9wdGlvbnMuZGVidWcgJiYgcGFyZW50QmluZGluZ3NbcGFyZW50c0hhc2hdID09IDUwKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS53YXJuKFtcbiAgICAgICAgICAgICAgYEZvciBoaWdoZXIgcGVyZm9ybWFuY2UsIGRvbid0IGxvb3AgUHJveHkgYXJyYXlzL29iamVjdHMgaW5zaWRlIGV4cHJlc3Npb24gZnVuY3Rpb25zLCBvciB1c2UgQWtpbGkudW5ldmFsdWF0ZSgpIHRvIHdyYXAgeW91IGNvZGUuYCxcbiAgICAgICAgICAgICAgYCR7IG5vZGUuX19leHByZXNzaW9uLnRyaW0oKSB9YCxcbiAgICAgICAgICAgICAgYHNjb3BlIHByb3BlcnR5IFwiJHsgZGF0YS5wYXJlbnRzLmpvaW4oJy4nKSB9XCJgXG4gICAgICAgICAgICBdLmpvaW4oJ1xcblxcdGF0ICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgIXBhcmVudEJpbmRpbmdzW3BhcmVudHNIYXNoXT8gcGFyZW50QmluZGluZ3NbcGFyZW50c0hhc2hdID0gMTogcGFyZW50QmluZGluZ3NbcGFyZW50c0hhc2hdKys7XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHV0aWxzLmlzU2NvcGVQcm94eShwYXJlbnRWYWx1ZSkgJiYgXG4gICAgICAgICAgZGF0YS5jb21wb25lbnQgIT09IGV2YWxDb21wb25lbnQuX19ldmFsdWF0aW9uQ29tcG9uZW50ICYmIFxuICAgICAgICAgIGRhdGEuY29tcG9uZW50ID09PSBkYXRhLnJlYWxDb21wb25lbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gIFxuXG4gICAgICAgIGRhdGEuY29tcG9uZW50Ll9fYmluZEFuZFNldFByb3BlcnR5KG5vZGUsIGRhdGEua2V5cywgZGF0YS5ldmFsdWF0ZWQpO1xuICAgICAgICBleGlzdGluZ0JpbmRpbmdzW2hhc2hdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuQXR0cikge1xuICAgICAgICBleHByZXNzaW9uID0gbTtcbiAgICAgICAgYXR0cmlidXRlVmFsdWUgPSBldmFsdWF0ZTtcbiAgICAgICAgcmV0dXJuIHV0aWxzLm1ha2VBdHRyaWJ1dGVWYWx1ZShldmFsdWF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZXZhbHVhdGUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZXZhbHVhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICByZXR1cm4gZXZhbHVhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV2YWx1YXRlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHsgcmVzLCBjb3VudGVyLCBleHByZXNzaW9uLCBhdHRyaWJ1dGVWYWx1ZSB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgdGhlIG5vZGUgYW5kIHNldCB0aGUgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtib29sZWFufSBbZXZhbHVhdGVkXVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2JpbmRBbmRTZXRQcm9wZXJ0eShub2RlLCBrZXlzLCBldmFsdWF0ZWQpIHtcbiAgICBsZXQgYmluZCA9IHRoaXMuX19nZXRCb3VuZE5vZGUoa2V5cywgbm9kZSk7XG4gICAgbGV0IHZhbHVlID0gdXRpbHMuZ2V0UHJvcGVydHlCeUtleXMoa2V5cywgdGhpcy5fX3Njb3BlKTtcblxuICAgIGlmICghYmluZCkge1xuICAgICAgdGhpcy5fX2JpbmQoa2V5cywgeyBub2RlIH0pO1xuICAgIH0gICBcblxuICAgIHRoaXMuX19zZXROb2RlUHJvcGVydHkobm9kZSwga2V5cywgdmFsdWUsIGV2YWx1YXRlZCk7XG4gIH1cblxuICAvKipcbiAgICogTmVzdGVkIGV2YWx1YXRpb24gYnkgdGhlIGtleXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt3aXRob3V0UGFyZW50cz1mYWxzZV0gLSBpZiB0cnVlIGV2YWx1YXRpb24gd2lsbCBiZSBvbmx5IGZvciB0aGUgY3VycmVudCBrZXlzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZXZhbHVhdGVOZXN0ZWQoa2V5cywgd2l0aG91dFBhcmVudHMgPSBmYWxzZSkge1xuICAgIGxldCBzY29wZSA9IHRoaXMuX19zY29wZTtcbiAgICBsZXQgcHJvcHMgPSBbXTsgICAgXG4gICAgXG4gICAgaWYgKCF3aXRob3V0UGFyZW50cykge1xuICAgICAgbGV0IGxhc3RQcm9wcyA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBsZXQgdmFsdWU7XG5cbiAgICAgICAgbGFzdFByb3BzID0gWy4uLmxhc3RQcm9wcywga2V5XTtcbiAgICAgICAgdmFsdWUgPSB1dGlscy5nZXRQcm9wZXJ0eUJ5S2V5cyhsYXN0UHJvcHMsIHNjb3BlKTtcbiAgICAgICAgcHJvcHMucHVzaCh7IGtleXM6IGxhc3RQcm9wcywgdmFsdWU6IHZhbHVlfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcHJvcHMucHVzaCh7IGtleXM6IGtleXMsIHZhbHVlOiB1dGlscy5nZXRQcm9wZXJ0eUJ5S2V5cyhrZXlzLCBzY29wZSl9KTtcbiAgICB9XG5cbiAgICBsZXQgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICBjb25zdCBlbEV2YWx1YXRlID0gZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBlbGVtZW50Ll9fYWtpbGk7ICAgICBcblxuICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBwcm9wc0xlbmd0aDsgbSsrKSB7XG4gICAgICAgIGxldCBwcm9wID0gcHJvcHNbbV07XG4gICAgICAgIGxldCBkYXRhO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbXBvbmVudCA9PT0gdGhpcykge1xuICAgICAgICAgIGxldCBiaW5kID0gY29tcG9uZW50Ll9fZ2V0QmluZChwcm9wLmtleXMpO1xuICAgICAgICAgIGRhdGEgPSBiaW5kPyAoYmluZC5fX2RhdGEgfHwgW10pOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gY29tcG9uZW50Ll9fZ2V0QWxsQmluZHMocHJvcC5rZXlzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgayA9IDAsIGMgPSBkYXRhLmxlbmd0aDsgayA8IGM7IGsrKykge1xuICAgICAgICAgIGNvbnN0IGJpbmQgPSBkYXRhW2tdOyAgIFxuXG4gICAgICAgICAgaWYoIWJpbmQgfHwgIWJpbmQubm9kZSB8fCAhYmluZC5ub2RlLl9faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoY29tcG9uZW50Ll9fY2hlY2tOb2RlUHJvcGVydHlDaGFuZ2UoYmluZC5ub2RlLCBwcm9wLmtleXMsIHByb3AudmFsdWUpKSB7ICBcbiAgICAgICAgICAgIGNvbXBvbmVudC5fX2Rpc2FibGVLZXlzKHByb3Aua2V5cyk7ICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrUHJvcCA9IGNvbXBvbmVudC5fX2dldE5vZGVQcm9wZXJ0eShiaW5kLm5vZGUsIHByb3Aua2V5cyk7XG4gICAgICAgICAgICBjaGVja1Byb3AgJiYgY2hlY2tQcm9wLmV2YWx1YXRlZCAmJiBjb21wb25lbnQuc2NvcGUuX19zZXQocHJvcC5rZXlzLCBwcm9wLnZhbHVlLCBmYWxzZSwgdHJ1ZSk7IFxuICAgICAgICAgICAgY29tcG9uZW50Ll9fZXZhbHVhdGVOb2RlKGJpbmQubm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBfayBpbiBiaW5kLm5vZGUuX19wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIGlmICghYmluZC5ub2RlLl9fcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShfaykpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgbGV0IF9wcm9wID0gYmluZC5ub2RlLl9fcHJvcGVydGllc1tfa107XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHV0aWxzLmdldFByb3BlcnR5QnlLZXlzKF9wcm9wLmtleXMsIF9wcm9wLmNvbXBvbmVudC5fX3Njb3BlKTtcbiAgICAgICAgICAgICAgX3Byb3AuY29tcG9uZW50Ll9fc2V0Tm9kZVByb3BlcnR5KGJpbmQubm9kZSwgX3Byb3Aua2V5cywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb21wb25lbnQuX19lbmFibGVLZXlzKHByb3Aua2V5cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfTtcblxuICAgIGNvbnN0IGV2YWx1YXRlID0gZWxlbWVudHMgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IGVsRXZhbHVhdGUoZWxlbWVudHNbaV0pO1xuICAgICAgICBldmFsdWF0ZShjb21wb25lbnQuX19jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGVsRXZhbHVhdGUodGhpcy5lbCk7XG4gICAgZXZhbHVhdGUodGhpcy5fX2NoaWxkcmVuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgdmFsdWUgYnkgdGhlIGtleXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVsZXRlZD1mYWxzZV0gLSB0cnVlIGlmIHZhbHVlIGlzIGRlbGV0aW5nXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZXZhbHVhdGVCeUtleXMgKGtleXMsIHZhbHVlLCBpc0RlbGV0ZWQgPSBmYWxzZSkgeyAgICAgXG4gICAgbGV0IGRhdGEgPSB0aGlzLl9fZ2V0QmluZChrZXlzKTtcblxuICAgIGNvbnN0IHVuYmluZCA9IChvYmosIHBhcmVudHMpID0+IHtcbiAgICAgIGZvciAobGV0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGspIHx8IHRoaXMuX19pc1N5c3RlbUJpbmRpbmdLZXkoaykpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBfa2V5cyA9IFtdLmNvbmNhdChwYXJlbnRzLCBba10pO1xuICAgICAgICBsZXQgX19rZXlzID0gX2tleXMuc2xpY2UoKTtcbiAgICAgICAgbGV0IF9pc0RlbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHZhbCA9IG9ialtrXTtcbiAgICAgICAgbGV0IGhhc0tleTtcbiAgICAgICAgXG4gICAgICAgIF9fa2V5cy5zaGlmdCgpO1xuICAgICAgICBoYXNLZXkgPSB1dGlscy5oYXNQcm9wZXJ0eUJ5S2V5cyhfX2tleXMsIHZhbHVlKTtcblxuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmICFoYXNLZXkpIHtcbiAgICAgICAgICBfaXNEZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHVuYmluZCh2YWwsIF9rZXlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19ldmFsdWF0ZU5lc3RlZChfa2V5cywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPSAnb2JqZWN0JyB8fCAhaGFzS2V5KSB7XG4gICAgICAgICAgdGhpcy5fX3VuYmluZChfa2V5cyk7XG4gICAgICAgICAgX2lzRGVsZXRlZCAmJiB1dGlscy5kZWxldGVQcm9wZXJ0eUJ5S2V5cyhfX2tleXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgZGF0YSAmJiB1bmJpbmQoZGF0YSwgW10uY29uY2F0KGtleXMpKTtcbiAgICB0aGlzLl9fZXZhbHVhdGVOZXN0ZWQoa2V5cywgZmFsc2UpO1xuXG4gICAgaWYgKGlzRGVsZXRlZCkge1xuICAgICAgdGhpcy5fX3VuYmluZChrZXlzKTtcbiAgICAgIGlzRGVsZXRlZCAmJiB1dGlscy5kZWxldGVQcm9wZXJ0eUJ5S2V5cyhrZXlzLCB0aGlzLl9fc2NvcGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgZXZlbnQgZXhwcmVzc2lvblxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZXZhbHVhdGVFdmVudChub2RlLCBlbCwgZSkge1xuICAgIGxldCBleHByZXNzaW9uID0gZXZhbHVhdGlvblJlZ2V4LmV4ZWMobm9kZS5fX2V4cHJlc3Npb24pO1xuICAgIGxldCBldmFsdWF0ZTtcblxuICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX19ldmFsdWF0aW5nRXZlbnQgPSB7XG4gICAgICBlbDogZWwsXG4gICAgICBjb21wb25lbnQ6IHRoaXMsXG4gICAgICBldmVudDogZSxcbiAgICAgIG5vZGVcbiAgICB9O1xuXG4gICAgdGhpcy5fX2Rpc2FibGVQcm94eSA9IHt9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGV2YWx1YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5wYXJzZSh0aGlzLl9fZXZhbHVhdGlvbkNvbXBvbmVudC5zY29wZSwgZXhwcmVzc2lvblsxXSwgeyAuLi5nbG9iYWxzLCAgZXZlbnQ6IGUgfSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHsgICAgICAgIFxuICAgICAgdGhyb3cgdGhpcy5fX2NyZWF0ZUV4Y2VwdGlvbk1lc3NhZ2Uobm9kZSwgZXJyKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5fX2V2YWx1YXRpbmdFdmVudCA9IG51bGw7XG4gICAgcmV0dXJuIGV2YWx1YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSBub2RlIGV4cHJlc3Npb24gd2l0aCBjaGVja1xuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtib29sZWFufSBbY2hlY2tdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZXZhbHVhdGVOb2RlKG5vZGUsIGNoZWNrID0gdHJ1ZSkge1xuICAgIGNvbnN0IGtleSA9IG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuQXR0cj8gJ3ZhbHVlJzogJ25vZGVWYWx1ZSc7ICBcblxuICAgIGlmIChjaGVjaz8gdGhpcy5fX2NoZWNrRXZhbHVhdGlvbihub2RlKTogdHJ1ZSkgeyBcbiAgICAgIGNvbnN0IHsgcmVzLCBhdHRyaWJ1dGVWYWx1ZSwgZXhwcmVzc2lvbiwgY291bnRlciB9ID0gdGhpcy5fX2V2YWx1YXRlKG5vZGUpOyAgXG4gICAgICBub2RlW2tleV0gIT0gcmVzICYmIChub2RlW2tleV0gPSByZXMpO1xuXG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5BdHRyKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHJlcztcbiAgICAgICAgbGV0IGlzQm9vbGVhbkF0dHJpYnV0ZSA9IGZhbHNlO1xuICBcbiAgICAgICAgaWYgKGNvdW50ZXIgPT0gMSAmJiBleHByZXNzaW9uICYmIG5vZGUuX19leHByZXNzaW9uID09IGV4cHJlc3Npb24pIHtcbiAgICAgICAgICB2YWx1ZSA9IGF0dHJpYnV0ZVZhbHVlO1xuICAgICAgICB9XG4gIFxuICAgICAgICBjb25zdCBjbGVhckF0dHJpYnV0ZSA9IG5vZGUubm9kZU5hbWUucmVwbGFjZSgvXmJvb2xlYW4tKC4rKS9pLCAnJDEnKTtcbiAgICAgICAgY29uc3QgY2FtZWxBdHRyaWJ1dGUgPSB1dGlscy50b0NhbWVsQ2FzZShjbGVhckF0dHJpYnV0ZSk7XG4gIFxuICAgICAgICBpZiAoY2xlYXJBdHRyaWJ1dGUgIT0gbm9kZS5ub2RlTmFtZSkge1xuICAgICAgICAgIGlzQm9vbGVhbkF0dHJpYnV0ZSA9IHRydWU7XG4gICAgICAgICAgdmFsdWUgPSAhIXZhbHVlO1xuICAgICAgICB9ICAgICAgICAgIFxuICBcbiAgICAgICAgaWYgKG5vZGUuX19hdHRyaWJ1dGVPbikgeyAgICAgICAgXG4gICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gbm9kZS5fX2F0dHJpYnV0ZU9uO1xuICAgICAgICAgIHZhbHVlID0gY29tcG9uZW50Ll9fcHJlcGFyZUF0dHJpYnV0ZUluKG5vZGUsIHZhbHVlKTtcbiAgICAgICAgICBjb21wb25lbnQuX19kaXNhYmxlQXR0cmlidXRlU2V0dGVyID0gdHJ1ZTtcbiAgICAgICAgICBjb21wb25lbnQuYXR0cnNbY2FtZWxBdHRyaWJ1dGVdID0gdmFsdWU7XG4gICAgICAgICAgY29tcG9uZW50Ll9fZGlzYWJsZUF0dHJpYnV0ZVNldHRlciA9IGZhbHNlO1xuICBcbiAgICAgICAgICBpZiAoY29tcG9uZW50Ll9faXNNb3VudGVkKSB7XG4gICAgICAgICAgICBjb21wb25lbnQuX19hdHRyVHJpZ2dlckJ5TmFtZShjYW1lbEF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyaWJ1dGUpIHtcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbm9kZS5fX2VsZW1lbnQ7XG4gICAgICAgICAgdmFsdWU/IGVsZW1lbnQuc2V0QXR0cmlidXRlKGNhbWVsQXR0cmlidXRlLCAndHJ1ZScpOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShjYW1lbEF0dHJpYnV0ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZVtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmUgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBmb3IgcmVjZWl2aW5nXG4gICAqIFxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3ByZXBhcmVBdHRyaWJ1dGVJbihub2RlLCB2YWx1ZSkgeyAgICBcbiAgICByZXR1cm4gdXRpbHMuY29weSh2YWx1ZSwgeyBwbGFpbjogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwYXJlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgZm9yIHNlbmRpbmdcbiAgICogXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fcHJlcGFyZUF0dHJpYnV0ZU91dChub2RlLCB2YWx1ZSkgeyAgICBcbiAgICByZXR1cm4gdXRpbHMuY29weSh2YWx1ZSwgeyBwbGFpbjogdHJ1ZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBhdHRyaWJ1dGVzXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50fSBhdHRyaWJ1dGVPZiAtIGlmIG5vZGUgaXMgbGlua2VkIHdpdGggcGFyZW50IHNjb3BlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9faW5pdGlhbGl6ZUF0dHJpYnV0ZShub2RlLCBlbCwgYXR0cmlidXRlT2YpIHtcbiAgICBpZiAoIW5vZGUgfHwgc3lzdGVtQXR0cmlidXRlcy5pbmRleE9mKG5vZGUubm9kZU5hbWUpICE9IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYoIXRoaXMuX19pbml0aWFsaXplTm9kZShub2RlLCBlbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZXZlbnROYW1lID0gbm9kZS5ub2RlTmFtZS5yZXBsYWNlKC9eb24tKC4rKS9pLCAnJDEnKTsgICAgXG4gICAgbGV0IGNvbXBvbmVudCA9IGF0dHJpYnV0ZU9mPyBhdHRyaWJ1dGVPZjogdGhpcztcblxuICAgIGlmIChub2RlLl9faXNFdmVudCkge1xuICAgICAgaWYgKG5vZGUuX19ldmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVtaXR0ZXIgPSBuZXcgQWtpbGkuRXZlbnRFbWl0dGVyKGV2ZW50TmFtZSwgbm9kZSwgZWwsIGNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChub2RlLl9faGFzQmluZGluZ3MpIHtcbiAgICAgICAgZW1pdHRlci5iaW5kKGUgPT4gY29tcG9uZW50Ll9fZXZhbHVhdGVFdmVudChub2RlLCBlbCwgZSkpO1xuICAgICAgfVxuXG4gICAgICBub2RlLl9fZXZlbnQgPSBlbWl0dGVyO1xuICAgICAgZWwuc2V0QXR0cmlidXRlKG5vZGUubm9kZU5hbWUsIHV0aWxzLm1ha2VBdHRyaWJ1dGVWYWx1ZShlbWl0dGVyKSk7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVPZikge1xuICAgICAgICB0aGlzLl9fZGlzYWJsZUF0dHJpYnV0ZVNldHRlciA9IHRydWU7XG4gICAgICAgIHRoaXMuYXR0cnNbdXRpbHMudG9DYW1lbENhc2Uobm9kZS5ub2RlTmFtZSldID0gZW1pdHRlcjtcbiAgICAgICAgdGhpcy5fX2Rpc2FibGVBdHRyaWJ1dGVTZXR0ZXIgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhdHRyaWJ1dGVPZikge1xuICAgICAgbm9kZS5fX2F0dHJpYnV0ZU9uID0gdGhpcztcbiAgICAgIG5vZGUuX19hdHRyaWJ1dGVPZiA9IGNvbXBvbmVudDtcbiAgICB9XG4gICAgXG4gICAgbGV0IGNoZWNrID0gdGhpcy5fX2NvbXBpbGluZz8gdGhpcy5fX2NvbXBpbGluZy5jaGVja0NoYW5nZXM6IGZhbHNlO1xuICAgIGNvbXBvbmVudC5fX2V2YWx1YXRlTm9kZShub2RlLCBjaGVjayk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19pbml0aWFsaXplTm9kZShub2RlLCBlbCkge1xuICAgIGlmIChub2RlLl9faW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGlzQXR0ciA9IG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuQXR0cjtcbiAgICBjb25zdCB2YWwgPSBub2RlW2lzQXR0cj8gJ3ZhbHVlJzogJ25vZGVWYWx1ZSddO1xuICAgIGNvbnN0IGhhc0JpbmRpbmdzID0gZXZhbHVhdGlvblJlZ2V4LnRlc3QodmFsLnRyaW0oKSk7XG4gICAgY29uc3QgaXNCb29sZWFuID0gaXNBdHRyPyAvXmJvb2xlYW4tL2kudGVzdChub2RlLm5vZGVOYW1lKTogZmFsc2U7XG4gICAgY29uc3QgaXNFdmVudCA9IGlzQXR0cj8gL15vbi0oLispL2kudGVzdChub2RlLm5vZGVOYW1lKTogZmFsc2U7XG5cbiAgICBpZighZWwuX19ha2lsaSAmJiAhaGFzQmluZGluZ3MgJiYgIWlzQm9vbGVhbiAmJiAhaXNFdmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG5vZGUuX19uYW1lID0gdGhpcy5fX3Njb3BlLl9fbmFtZSArIHV0aWxzLmNyZWF0ZVJhbmRvbVN0cmluZygxNik7XG4gICAgbm9kZS5fX2lzRXZlbnQgPSBpc0V2ZW50O1xuICAgIG5vZGUuX19oYXNCaW5kaW5ncyA9IGhhc0JpbmRpbmdzO1xuICAgIG5vZGUuX19pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbm9kZS5fX2V4cHJlc3Npb24gPSB2YWw7XG4gICAgbm9kZS5fX3Byb3BlcnRpZXMgPSB7fTtcbiAgICBub2RlLl9fYXR0cmlidXRlT2YgPSBudWxsO1xuICAgIG5vZGUuX19hdHRyaWJ1dGVPbiA9IG51bGw7XG4gICAgbm9kZS5fX2V2ZW50ID0gbnVsbDsgICAgXG4gICAgbm9kZS5fX2luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBub2RlLl9fY29tcG9uZW50ID0gdGhpcztcbiAgICBub2RlLl9fZWxlbWVudCA9IGVsO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlaW5pdGlhbGl6ZSB0aGUgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2RlaW5pdGlhbGl6ZU5vZGUobm9kZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYoIW5vZGUuX19pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBpZiAobm9kZS5fX2V2ZW50KSB7XG4gICAgICBub2RlLl9fZXZlbnQucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuX19oYXNCaW5kaW5ncyAmJiAhb3B0aW9ucy5zYXZlQmluZGluZ3MpIHsgXG4gICAgICB0aGlzLl9fdW5iaW5kQnlOb2Rlcyhub2RlKTsgICAgIFxuICAgICAgdGhpcy5fX3VuYmluZFBhcmVudHNCeU5vZGVzKG5vZGUpOyAgICBcbiAgICB9XG4gICAgXG4gICAgQWtpbGkucmVtb3ZlVGFnKG5vZGUpOyAgICBcbiAgICBkZWxldGUgbm9kZS5fX25hbWU7XG4gICAgZGVsZXRlIG5vZGUuX19oYXNCaW5kaW5ncztcbiAgICBkZWxldGUgbm9kZS5fX2lzQm9vbGVhbjtcbiAgICBkZWxldGUgbm9kZS5fX2lzRXZlbnQ7XG4gICAgZGVsZXRlIG5vZGUuX19leHByZXNzaW9uO1xuICAgIGRlbGV0ZSBub2RlLl9fcHJvcGVydGllcztcbiAgICBkZWxldGUgbm9kZS5fX2F0dHJpYnV0ZU9mO1xuICAgIGRlbGV0ZSBub2RlLl9fYXR0cmlidXRlT247XG4gICAgZGVsZXRlIG5vZGUuX19ldmVudDsgICAgXG4gICAgZGVsZXRlIG5vZGUuX19pbml0aWFsaXplZDtcbiAgICBkZWxldGUgbm9kZS5fX2NvbXBvbmVudDtcbiAgICBkZWxldGUgbm9kZS5fX2VsZW1lbnQ7ICAgIFxuICB9XG5cbiAgLyoqXG4gICAqIEludGVycG9sYXRlIHRoZSBlbGVtZW50IGF0dHJpYnV0ZXNcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gW2F0dHJpYnV0ZU9mPW51bGxdIC0gaWYgdGhlIG5vZGUgaGFzIGxpbmsgd2l0aCB0aGUgcGFyZW50IHNjb3BlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9faW50ZXJwb2xhdGVBdHRyaWJ1dGVzKGVsLCBhdHRyaWJ1dGVPZiA9IG51bGwpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgYXR0cnMgPSBlbC5hdHRyaWJ1dGVzLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0aGlzLl9faW5pdGlhbGl6ZUF0dHJpYnV0ZShhdHRyc1tpXSwgZWwsIGF0dHJpYnV0ZU9mKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBhdHRyaWJ1dGVzIGFzIGEgcHJveHlcbiAgICpcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19kZWZpbmVBdHRyaWJ1dGVzKCkge1xuICAgIGNvbnN0IGNoYW5nZUF0dHJpYnV0ZSA9IChrZXksIHZhbHVlLCBpc0RlbGV0ZWQgPSBmYWxzZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuX19kaXNhYmxlQXR0cmlidXRlU2V0dGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IG5vZGUgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZU5vZGUoa2V5KTtcblxuICAgICAgaWYgKGlzRGVsZXRlZCkge1xuICAgICAgICBub2RlICYmIHRoaXMuX19kZWluaXRpYWxpemVOb2RlKG5vZGUpO1xuICAgICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICByZXR1cm4gXG4gICAgICB9XG4gICAgICBlbHNlIGlmICghbm9kZSkge1xuICAgICAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgICAgbm9kZSA9IHRoaXMuZWwuZ2V0QXR0cmlidXRlTm9kZShrZXkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fX2RlaW5pdGlhbGl6ZU5vZGUobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX19pbml0aWFsaXplQXR0cmlidXRlKG5vZGUsIHRoaXMuZWwsIHRoaXMuX19hdHRyaWJ1dGVPZik7XG4gICAgfTtcblxuICAgIHRoaXMuYXR0cnMgPSBuZXcgUHJveHkodGhpcy5fX2F0dHJzLCB7XG4gICAgICBnZXQ6ICh0YXJnZXQsIGtleSkgPT4ge1xuICAgICAgICBpZiAoa2V5ID09ICdfX2lzUHJveHknKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICB9LFxuICAgICAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGxldCBhdHRyS2V5ID0gdXRpbHMudG9EYXNoQ2FzZShrZXkpO1xuXG4gICAgICAgIGlmICh0aGlzLmJvb2xlYW5BdHRyaWJ1dGVzLmluZGV4T2YoYXR0cktleSkgIT0gLTEpIHtcbiAgICAgICAgICBhdHRyS2V5ID0gYGJvb2xlYW4tJHthdHRyS2V5fWA7XG4gICAgICAgICAgdmFsdWU/IHRoaXMuZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpOiB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICBjaGFuZ2VBdHRyaWJ1dGUoYXR0cktleSwgdXRpbHMubWFrZUF0dHJpYnV0ZVZhbHVlKHZhbHVlKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGRlbGV0ZVByb3BlcnR5OiAodGFyZ2V0LCBrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGxldCBhdHRyS2V5ID0gdXRpbHMudG9EYXNoQ2FzZShrZXkpO1xuICAgICAgICBjaGFuZ2VBdHRyaWJ1dGUoYXR0cktleSwgdXRpbHMubWFrZUF0dHJpYnV0ZVZhbHVlKHZhbHVlKSwgdHJ1ZSk7XG4gICAgICAgIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB0aGUgb2JqZWN0IHRvIGEgcHJveHlcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9ialxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXJlbnRzXG4gICAqIEByZXR1cm5zIHtQcm94eX1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19vYnNlcnZlKG9iaiwgcGFyZW50cykge1xuICAgIHJldHVybiBuZXcgUHJveHkob2JqLCB7XG4gICAgICBnZXQ6ICh0YXJnZXQsIGtleSkgPT4geyBcbiAgICAgICAgaWYgKGtleSA9PSBcIl9faXNQcm94eVwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09IFwiX190YXJnZXRcIikge1xuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5ID09IFwiX19jb21wb25lbnRcIikge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleSA9PSBcIl9fa2V5c1wiKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9faXNTeXN0ZW1LZXkoa2V5KSkge1xuICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBa2lsaS5fX2V2YWx1YXRpb24pIHsgIFxuICAgICAgICAgIGxldCBrZXlzID0gW10uY29uY2F0KHBhcmVudHMsIFtrZXldKTtcbiAgICAgICAgICBsZXQgbm90QmluZGluZyA9IGZhbHNlO1xuICAgICAgICAgIGxldCBldmFsdWF0ZWQgPSAhdXRpbHMuaGFzUHJvcGVydHlCeUtleXMoa2V5cywgdGhpcy5fX3Njb3BlKTsgXG4gICAgICAgICAgbGV0IGNvbXBvbmVudCA9IHRoaXM7XG4gICAgICAgICAgbGV0IGV4Y0FyciA9IGtleXMuc2xpY2UoKTtcblxuICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBTY29wZSkge1xuICAgICAgICAgICAgbGV0IHJlYWxUYXJnZXQgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eVRhcmdldCh0YXJnZXQsIGtleSk7XG4gICAgICAgICAgICByZWFsVGFyZ2V0ICYmIChyZWFsVGFyZ2V0IGluc3RhbmNlb2YgU2NvcGUpICYmIChjb21wb25lbnQgPSAgcmVhbFRhcmdldC5fX2NvbXBvbmVudCk7XG4gICAgICAgICAgfSBcblxuICAgICAgICAgIGlmIChBa2lsaS5fX3dyYXBwaW5nICYmIGtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGZvclBhcmVudHMgPSBBa2lsaS5fX2V2YWx1YXRpb24uY29tcG9uZW50LnBhcmVudHMoYyA9PiBjIGluc3RhbmNlb2YgQWtpbGkuY29tcG9uZW50cy5Gb3IpO1xuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBmb3JQYXJlbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgayA9IDAsIGMgPSBrZXlzLmxlbmd0aDsgayA8IGM7IGsrKykgeyBcbiAgICAgICAgICAgICAgY29uc3QgZm9yRGF0YSA9IGZvclBhcmVudHNbaV0uZGF0YTtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHV0aWxzLmdldFByb3BlcnR5QnlLZXlzKGV4Y0FyciwgY29tcG9uZW50Ll9fc2NvcGUpO1xuXG4gICAgICAgICAgICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhID09ICdvYmplY3QnICYmIGZvckRhdGEgPT09IGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgICAgIGV4Y0Fyci5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9ICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSAgICAgICAgICBcbiAgICAgICAgICBlbHNlIGlmICghdXRpbHMuZ2V0RW51bWVyYWJsZVByb3BlcnR5VGFyZ2V0KHRhcmdldCwga2V5KSkge1xuICAgICAgICAgICAgbm90QmluZGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX2JpbmROb2RlKEFraWxpLl9fZXZhbHVhdGlvbi5saXN0LCBjb21wb25lbnQsIGtleXMsIHBhcmVudHMsIHRhcmdldFtrZXldLCBub3RCaW5kaW5nLCBldmFsdWF0ZWQpO1xuICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgIH0sXG4gICAgICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsdWUpID0+IHsgXG4gICAgICAgIGlmICh0aGlzLl9faXNTeXN0ZW1LZXkoa2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFsdWUgPSBBa2lsaS53cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGtleXMgPSBbXS5jb25jYXQocGFyZW50cywgW2tleV0pO1xuXG4gICAgICAgIGlmICh0aGlzLl9fY2hlY2tEaXNhYmxlbWVudChrZXlzKSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBDSEVDS19FWElTVEVOQ0U6IGlmIChwYXJlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsZXQgdGFyZ2V0UGFyZW50VmFsdWUgPSBwYXJlbnRzLmxlbmd0aCA+IDE/IHV0aWxzLmdldFByb3BlcnR5QnlLZXlzKHBhcmVudHMuc2xpY2UoMCwgLTEpLCB0aGlzLl9fc2NvcGUpOiB0aGlzLl9fc2NvcGU7XG4gICAgICAgICAgXG4gICAgICAgICAgZm9yIChsZXQgayBpbiB0YXJnZXRQYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKCF0YXJnZXRQYXJlbnRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldFBhcmVudFZhbHVlW2tdICYmIHRhcmdldFBhcmVudFZhbHVlW2tdLl9fdGFyZ2V0ID09PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgYnJlYWsgQ0hFQ0tfRVhJU1RFTkNFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRba2V5XSA9IHRoaXMuX19uZXN0ZWRPYnNlcnZlKHZhbHVlLCBrZXlzKTtcblxuICAgICAgICBpZighdGhpcy5fX2lzUmVzb2x2ZWQpIHtcbiAgICAgICAgICB0aGlzLl9fdHJpZ2dlclN0b3JlQW5kQXR0cihrZXlzKTtcbiAgICAgICAgfVxuICAgICAgIFxuICAgICAgICBpZiAoQWtpbGkuX19pc29sYXRpb24pIHsgXG4gICAgICAgICAgdGhpcy5fX2NyZWF0ZUlzb2xhdGlvbk9iamVjdChwYXJlbnRzLCBrZXksIGZhbHNlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHRoaXMuX19pc1Jlc29sdmVkKSB7XG4gICAgICAgICAgdGhpcy5fX3RyaWdnZXJTdG9yZUFuZEF0dHIoa2V5cyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLl9faXNNb3VudGVkKSB7ICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgIHRoaXMuX19ldmFsdWF0ZUJ5S2V5cyhrZXlzLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBkZWxldGVQcm9wZXJ0eTogKHRhcmdldCwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBbXS5jb25jYXQocGFyZW50cywgW2tleV0pO1xuXG4gICAgICAgIGlmICh0aGlzLl9fY2hlY2tEaXNhYmxlbWVudChrZXlzKSkge1xuICAgICAgICAgIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9faXNTeXN0ZW1LZXkoa2V5KSkge1xuICAgICAgICAgIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0YXJnZXRba2V5XTtcblxuICAgICAgICBpZighdGhpcy5fX2lzUmVzb2x2ZWQpIHtcbiAgICAgICAgICB0aGlzLl9fdHJpZ2dlclN0b3JlQW5kQXR0cihrZXlzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKEFraWxpLl9faXNvbGF0aW9uKSB7XG4gICAgICAgICAgdGhpcy5fX2NyZWF0ZUlzb2xhdGlvbk9iamVjdChwYXJlbnRzLCBrZXksIHRydWUpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodGhpcy5fX2lzUmVzb2x2ZWQpIHtcbiAgICAgICAgICB0aGlzLl9fdHJpZ2dlclN0b3JlQW5kQXR0cihrZXlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19ldmFsdWF0ZUJ5S2V5cyhrZXlzLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSBzdG9yZSBhbmQgdGhlIGF0dHJpYnV0ZXMgY2hhbmdlXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzIFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3RyaWdnZXJTdG9yZUFuZEF0dHIoa2V5cykge1xuICAgIGZvcihsZXQgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgY3VycmVudEtleXMgPSBrZXlzLnNsaWNlKDAsIGwgLSBpKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRLZXlTdHJpbmcgPSBBa2lsaS5qb2luQmluZGluZ0tleXMoY3VycmVudEtleXMpO1xuICAgICAgY29uc3QgdmFsID0gdXRpbHMuZ2V0UHJvcGVydHlCeUtleXMoY3VycmVudEtleXMsIHRoaXMuX19zY29wZSk7XG5cbiAgICAgIGlmICh0aGlzLl9fc3RvcmVMaW5rc1tjdXJyZW50S2V5U3RyaW5nXSkgeyAgXG4gICAgICAgIHRoaXMuX19zdG9yZVRyaWdnZXJCeUtleXMoY3VycmVudEtleXMsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9fYXR0ckxpbmtzW2N1cnJlbnRLZXlTdHJpbmddKSB7XG4gICAgICAgIHRoaXMuX19hdHRyVHJpZ2dlckJ5S2V5cyhjdXJyZW50S2V5cywgdmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBoYXNoIGZvciB0aGUga2V5c1xuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5cyBcbiAgICogQHJldHVybnMge3N0cmluZ30gICAgXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fY3JlYXRlS2V5c0hhc2goa2V5cykge1xuICAgIHJldHVybiBgJHt0aGlzLl9fc2NvcGUuX19uYW1lfS4ke0FraWxpLmpvaW5CaW5kaW5nS2V5cyhrZXlzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RvcmUgb2YgdGhlIGRpc2FibGVtZW50IHR5cGVcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2dldERpc2FibGVtZW50VHlwZVN0b3JlKHR5cGUpIHtcbiAgICByZXR1cm4gKHtcbiAgICAgIHByb3h5OiAnX19kaXNhYmxlUHJveHknLFxuICAgICAgc3RvcmU6ICdfX2Rpc2FibGVTdG9yZUtleXMnLFxuICAgICAgYXR0cjogJ19fZGlzYWJsZUF0dHJLZXlzJ1xuICAgIH0pW3R5cGVdO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIGtleXMgc2V0dGVyXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzICBcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSAgXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZGlzYWJsZUtleXMoa2V5cywgdHlwZSA9ICdwcm94eScpIHsgICAgXG4gICAgdGhpc1t0aGlzLl9fZ2V0RGlzYWJsZW1lbnRUeXBlU3RvcmUodHlwZSldW2tleXM/IHRoaXMuX19jcmVhdGVLZXlzSGFzaChrZXlzKTogJ19fYWxsJ10gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0aGUga2V5cyBzZXR0ZXJcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXMgXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZV0gICBcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19lbmFibGVLZXlzKGtleXMsIHR5cGUgPSAncHJveHknKSB7XG4gICAgZGVsZXRlIHRoaXNbdGhpcy5fX2dldERpc2FibGVtZW50VHlwZVN0b3JlKHR5cGUpXVtrZXlzPyB0aGlzLl9fY3JlYXRlS2V5c0hhc2goa2V5cyk6ICdfX2FsbCddO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBrZXlzIHNldHRlciBkaXNhYmxlbWFudFxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5cyBcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSAgIFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2NoZWNrRGlzYWJsZW1lbnQoa2V5cywgdHlwZSA9ICdwcm94eScpIHtcbiAgICBjb25zdCBzdG9yZSA9IHRoaXMuX19nZXREaXNhYmxlbWVudFR5cGVTdG9yZSh0eXBlKTtcbiAgICByZXR1cm4gdGhpc1tzdG9yZV0uX19hbGw/IHRydWU6IHRoaXNbc3RvcmVdW3RoaXMuX19jcmVhdGVLZXlzSGFzaChrZXlzKV07XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSB0aGUgdmFsdWUgdG8gdGhlIHN0b3JlIGJ5IHRoZSBrZXlzXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzIFxuICAgKiBAcGFyYW0geyp9IHZhbHVlICAgIFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3N0b3JlVHJpZ2dlckJ5S2V5cyhrZXlzLCB2YWx1ZSkgeyBcbiAgICBpZiAodGhpcy5fX2NoZWNrRGlzYWJsZW1lbnQoa2V5cywgJ3N0b3JlJykpIHsgICAgICBcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsaW5rcyA9IHRoaXMuX19zdG9yZUxpbmtzW0FraWxpLmpvaW5CaW5kaW5nS2V5cyhrZXlzKV07XG5cbiAgICBpZiAoIWxpbmtzIHx8ICFsaW5rcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdmFsdWUgPSB1dGlscy5jb3B5KHZhbHVlLCB7IHBsYWluOiB0cnVlIH0pO1xuICAgIGNvbnN0IHAgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07ICAgXG4gICAgICBcbiAgICAgIGlmICghbGluay5zZXQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHAucHVzaCh0aGlzLl9fc3RvcmVUcmlnZ2VyQnlOYW1lKGxpbmsubmFtZSwgdmFsdWUpKTsgICAgICBcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgdGhlIHZhbHVlIHRvIHRoZSBzdG9yZSBieSB0aGUgbmFtZVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fc3RvcmVUcmlnZ2VyQnlOYW1lKG5hbWUsIHZhbHVlKSB7ICBcbiAgICBzdG9yZS5fX3RhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgIGxldCBsaW5rcyA9IChBa2lsaS5fX3N0b3JlTGlua3NbbmFtZV0gfHwgW10pLmNvbmNhdChBa2lsaS5fX3N0b3JlTGlua3NbJyonXSB8fCBbXSk7XG5cbiAgICBpZiAoIWxpbmtzIHx8ICFsaW5rcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsaW5rcyA9IHV0aWxzLnNvcnQobGlua3MsIFsnZGF0ZSddLCB0cnVlKTtcblxuICAgIHJldHVybiBBa2lsaS5uZXh0VGljaygoKSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpbmtzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBsaW5rID0gbGlua3NbaV07XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGxpbmsuY29tcG9uZW50O1xuXG4gICAgICAgIGlmIChjb21wb25lbnQgPT09IHRoaXMpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGxpbmsuZm4pIHtcbiAgICAgICAgICBBa2lsaS51bmlzb2xhdGUoKCkgPT4gbGluay5mbi5jYWxsKGNvbXBvbmVudCwgdmFsdWUsIG5hbWUpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWxpbmsuZ2V0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wb25lbnQuX19kaXNhYmxlS2V5cyhsaW5rLmtleXMsICdzdG9yZScpO1xuICAgICAgICBsZXQgY3VycmVudCA9IHV0aWxzLmdldFByb3BlcnR5QnlLZXlzKGxpbmsua2V5cywgY29tcG9uZW50Ll9fc2NvcGUpO1xuICAgICAgICAhdXRpbHMuY29tcGFyZShjdXJyZW50LCB2YWx1ZSkgJiYgY29tcG9uZW50LnNjb3BlLl9fc2V0KGxpbmsua2V5cywgdmFsdWUpOyAgIFxuICAgICAgICBjb21wb25lbnQuX19lbmFibGVLZXlzKGxpbmsua2V5cywgJ3N0b3JlJyk7XG4gICAgICB9ICBcbiAgICB9KTsgICBcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHN0b3JlIGxpbmsgd2l0aCB0aGUgc2NvcGUgcHJvcGVydHlcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge29iaGVjdH0gW29wdGlvbnNdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fc3RvcmVCeUtleXMobmFtZSwga2V5cywgb3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucyA9IHsgZ2V0OiB0cnVlLCBzZXQ6IHRydWUsIC4uLm9wdGlvbnMgfTtcblxuICAgIGlmICgha2V5cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdG9yZSBsaW5rIFwiJHtuYW1lfVwiIG11c3QgaGF2ZSB0aGUgc2NvcGUgcHJvcGVydHkgbmFtZWApO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5nZXQgJiYgIW9wdGlvbnMuc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0b3JlIGxpbmsgXCIke25hbWV9XCIgbXVzdCBoYXZlIGF0IGxlYXN0IFwiZ2V0XCIgb3IgXCJzZXRcIiBvcHRpb24gYXMgdHJ1ZWApO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShrZXlzKSkge1xuICAgICAga2V5cyA9IFtrZXlzXTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5fX2Rpc2FibGVLZXlzKGtleXMsICdzdG9yZScpO1xuICAgIChzdG9yZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCAhdXRpbHMuaGFzUHJvcGVydHlCeUtleXMoa2V5cywgdGhpcy5fX3Njb3BlKSkgJiYgdGhpcy5zY29wZS5fX3NldChrZXlzLCBzdG9yZVtuYW1lXSk7XG4gICAgdGhpcy5fX2VuYWJsZUtleXMoa2V5cywgJ3N0b3JlJyk7XG4gICAgbGV0IGtleVN0cmluZyA9IEFraWxpLmpvaW5CaW5kaW5nS2V5cyhrZXlzKTtcbiAgICBsZXQgaW5mbztcblxuICAgIGlmICghdGhpcy5fX3N0b3JlTGlua3Nba2V5U3RyaW5nXSkge1xuICAgICAgdGhpcy5fX3N0b3JlTGlua3Nba2V5U3RyaW5nXSA9IFtdO1xuICAgIH1cblxuICAgIGxldCBhcnIgPSB0aGlzLl9fc3RvcmVMaW5rc1trZXlTdHJpbmddO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCByZXMgPSBhcnJbaV07XG5cbiAgICAgIGlmIChyZXMuY29tcG9uZW50ID09PSB0aGlzICYmIHJlcy5uYW1lID09IG5hbWUgJiYgcmVzLmtleVN0cmluZyA9PSBrZXlTdHJpbmcpIHtcbiAgICAgICAgcmVzLnNldCA9IG9wdGlvbnMuc2V0O1xuICAgICAgICByZXMuZ2V0ID0gb3B0aW9ucy5nZXQ7XG4gICAgICAgIHJlcy5kYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghQWtpbGkuX19zdG9yZUxpbmtzW25hbWVdKSB7XG4gICAgICBBa2lsaS5fX3N0b3JlTGlua3NbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBpbmZvID0geyBjb21wb25lbnQ6IHRoaXMsIG5hbWUsIGtleXMsIGtleVN0cmluZywgZGF0ZTogRGF0ZS5ub3coKSwgc2V0OiBvcHRpb25zLnNldCwgZ2V0OiBvcHRpb25zLmdldCB9O1xuICAgIHRoaXMuX19zdG9yZUxpbmtzW2tleVN0cmluZ10ucHVzaChpbmZvKTtcbiAgICBBa2lsaS5fX3N0b3JlTGlua3NbbmFtZV0ucHVzaChpbmZvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHN0b3JlIGxpbmsgd2l0aCB0aGUgZnVuY3Rpb25cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAgIFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBfX3N0b3JlQnlGdW5jdGlvbihuYW1lLCBmbiwgb3B0aW9ucyA9IHt9KSB7IFxuICAgIGxldCBjYWxsID0gb3B0aW9ucy5jYWxsT25TdGFydCA9PT0gdW5kZWZpbmVkPyBzdG9yZS5fX3RhcmdldC5oYXNPd25Qcm9wZXJ0eShuYW1lKTogb3B0aW9ucy5jYWxsT25TdGFydDtcblxuICAgIGlmICghQWtpbGkuX19zdG9yZUxpbmtzW25hbWVdKSB7XG4gICAgICBBa2lsaS5fX3N0b3JlTGlua3NbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBsZXQgbGlua3MgPSBBa2lsaS5fX3N0b3JlTGlua3NbbmFtZV07XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IGxpbmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgcmVzID0gbGlua3NbaV07XG5cbiAgICAgIGlmIChyZXMuY29tcG9uZW50ID09PSB0aGlzICYmIHJlcy5uYW1lID09IG5hbWUgJiYgcmVzLmZuID09PSBmbikge1xuICAgICAgICByZXMuZGF0ZSA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBa2lsaS5fX3N0b3JlTGlua3NbbmFtZV0ucHVzaCh7IGNvbXBvbmVudDogdGhpcywgbmFtZSwgZm4sIGRhdGU6IERhdGUubm93KCkgfSk7XG5cbiAgICBpZiAobmFtZSA9PSAnKicgJiYgb3B0aW9ucy5jYWxsT25TdGFydCAhPT0gZmFsc2UpIHtcbiAgICAgIGxldCBzdG9yZUtleXMgPSBPYmplY3Qua2V5cyhzdG9yZS5fX3RhcmdldCk7XG4gICAgICBsZXQgcCA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHN0b3JlS2V5cy5sZW5ndGggOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBzdG9yZUtleXNbaV07XG4gICAgICAgIGxldCB2YWwgPSBzdG9yZS5fX3RhcmdldFtrZXldO1xuICAgICAgICBwLnB1c2goQWtpbGkudW5pc29sYXRlKCgpID0+IGZuLmNhbGwodGhpcywgdmFsLCBrZXkpKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwKTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbCkge1xuICAgICAgcmV0dXJuIEFraWxpLnVuaXNvbGF0ZSgoKSA9PiBmbi5jYWxsKHRoaXMsIHN0b3JlW25hbWVdKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgc3RvcmUgbGluayB3aXRoIHRoZSBzY29wZSBwcm9wZXJ0eVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGtleXNcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX191bnN0b3JlQnlLZXlzKG5hbWUsIGtleXMpIHtcbiAgICBpZiAoIWtleXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IGhhdmUgdG8gcGFzcyB0aGUgc2NvcGUgcHJvcGVydHkgbmFtZSBmb3Igc3RvcmUgbGluayBcIiR7bmFtZX1cImApO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShrZXlzKSkge1xuICAgICAga2V5cyA9IFtrZXlzXTtcbiAgICB9XG5cbiAgICBsZXQga2V5U3RyaW5nID0gQWtpbGkuam9pbkJpbmRpbmdLZXlzKGtleXMpO1xuICAgIGxldCBhcnIgPSB0aGlzLl9fc3RvcmVMaW5rc1trZXlTdHJpbmddO1xuXG4gICAgaWYgKCFhcnIubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGZvciAobGV0IGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCByZXMgPSBhcnJbaV07XG4gICAgICBsZXQgbGlua3MgPSBBa2lsaS5fX3N0b3JlTGlua3NbcmVzLm5hbWVdO1xuXG4gICAgICBpZiAocmVzLmNvbXBvbmVudCAhPT0gdGhpcyB8fCByZXMubmFtZSAhPSBuYW1lIHx8IHJlcy5rZXlTdHJpbmcgIT0ga2V5U3RyaW5nKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBhcnIuc3BsaWNlKGksIDEpO1xuXG4gICAgICBpZiAoIWxpbmtzIHx8ICFsaW5rcy5sZW5ndGgpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGsgPSBsaW5rcy5sZW5ndGggLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICBsZXQgbGluayA9IGxpbmtzW2tdO1xuXG4gICAgICAgIGlmIChsaW5rLmNvbXBvbmVudCA9PT0gdGhpcyAmJiBsaW5rLmtleVN0cmluZyA9PSBrZXlTdHJpbmcpIHtcbiAgICAgICAgICBsaW5rcy5zcGxpY2UoaywgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFsaW5rcy5sZW5ndGgpIHtcbiAgICAgICAgZGVsZXRlIEFraWxpLl9fc3RvcmVMaW5rc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWFyci5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9fc3RvcmVMaW5rc1trZXlTdHJpbmddO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIHN0b3JlIGxpbmsgd2l0aCB0aGUgZnVuY3Rpb25cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX191bnN0b3JlQnlGdW5jdGlvbihuYW1lLCBmbikge1xuICAgIGlmICghQWtpbGkuX19zdG9yZUxpbmtzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGxpbmtzID0gQWtpbGkuX19zdG9yZUxpbmtzW25hbWVdO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSBsaW5rcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgbGV0IHJlcyA9IGxpbmtzW2ldO1xuXG4gICAgICBpZiAocmVzLmNvbXBvbmVudCA9PT0gdGhpcyAmJiByZXMubmFtZSA9PSBuYW1lICYmIHJlcy5mbiA9PT0gZm4pIHtcbiAgICAgICAgbGlua3Muc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWxpbmtzLmxlbmd0aCkge1xuICAgICAgZGVsZXRlIEFraWxpLl9fc3RvcmVMaW5rc1tuYW1lXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciB0aGUgYXR0cmlidXRlIGV2ZW50IGJ5IHRoZSBrZXlzXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzIFxuICAgKiBAcGFyYW0geyp9IHZhbHVlICAgIFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2F0dHJUcmlnZ2VyQnlLZXlzKGtleXMsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX19jaGVja0Rpc2FibGVtZW50KGtleXMsICdhdHRyJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgbGlua3MgPSB0aGlzLl9fYXR0ckxpbmtzW0FraWxpLmpvaW5CaW5kaW5nS2V5cyhrZXlzKV07XG4gICBcbiAgICBpZiAoIWxpbmtzIHx8ICFsaW5rcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIEFraWxpLm5leHRUaWNrKCgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBsaW5rc1tpXTtcblxuICAgICAgICBpZiAobGluay5mbikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsaW5rLnNldCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBldiA9ICdvbicgKyB1dGlscy5jYXBpdGFsaXplKGxpbmsubmFtZSk7XG4gICAgICAgIHRoaXMuYXR0cnNbZXZdICYmIHRoaXMuYXR0cnNbZXZdLnRyaWdnZXIodmFsdWUsIHsgYnViYmxlczogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9KTsgIFxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgdGhlIGF0dHJpYnV0ZSBldmVudCBieSB0aGUgbmFtZVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fYXR0clRyaWdnZXJCeU5hbWUobmFtZSwgdmFsdWUpIHtcbiAgICBsZXQgbGlua3MgPSAodGhpcy5fX2F0dHJMaW5rc1tuYW1lXSB8fCBbXSkuY29uY2F0KHRoaXMuX19hdHRyTGlua3NbJyonXSB8fCBbXSk7XG4gICAgXG4gICAgaWYgKCFsaW5rcyB8fCAhbGlua3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAgXG4gICAgXG4gICAgbGlua3MgPSB1dGlscy5zb3J0KGxpbmtzLCBbJ2RhdGUnXSwgdHJ1ZSk7XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmsgPSBsaW5rc1tpXTsgICAgXG5cbiAgICAgIGlmIChsaW5rLmZuKSB7XG4gICAgICAgIEFraWxpLnVuaXNvbGF0ZSgoKSA9PiBsaW5rLmZuLmNhbGwodGhpcywgdmFsdWUsIHV0aWxzLnRvRGFzaENhc2UobmFtZSkpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmKCFsaW5rLmdldCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdGhpcy5fX2Rpc2FibGVLZXlzKGxpbmsua2V5cywgJ2F0dHInKTtcbiAgICAgIGxldCBjdXJyZW50ID0gdXRpbHMuZ2V0UHJvcGVydHlCeUtleXMobGluay5rZXlzLCB0aGlzLl9fc2NvcGUpO1xuICAgICAgIXV0aWxzLmNvbXBhcmUoY3VycmVudCwgdmFsdWUpICYmIHRoaXMuc2NvcGUuX19zZXQobGluay5rZXlzLCB2YWx1ZSk7XG4gICAgICB0aGlzLl9fZW5hYmxlS2V5cyhsaW5rLmtleXMsICdhdHRyJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgIGF0dHJpYnV0ZSBsaW5rIHdpdGggdGhlIHNjb3BlIHByb3BlcnR5XG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2F0dHJCeUtleXMobmFtZSwga2V5cywgb3B0aW9ucyA9IHt9KSB7ICAgXG4gICAgb3B0aW9ucyA9IHsgZ2V0OiB0cnVlLCBzZXQ6IHRydWUsIC4uLm9wdGlvbnMgfTtcbiAgICBuYW1lID0gdXRpbHMudG9DYW1lbENhc2UobmFtZSk7XG5cbiAgICBpZiAoIWtleXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0cmlidXRlIGxpbmsgXCIke25hbWV9XCIgbXVzdCBoYXZlIHRoZSBzY29wZSBwcm9wZXJ0eSBuYW1lYCk7XG4gICAgfVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICBrZXlzID0gW2tleXNdO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLl9fZGlzYWJsZUtleXMoa2V5cywgJ2F0dHInKTtcbiAgICAodGhpcy5hdHRycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCAhdXRpbHMuaGFzUHJvcGVydHlCeUtleXMoa2V5cywgdGhpcy5fX3Njb3BlKSkgJiYgdGhpcy5zY29wZS5fX3NldChrZXlzLCB0aGlzLmF0dHJzW25hbWVdKTsgXG4gICAgdGhpcy5fX2VuYWJsZUtleXMoa2V5cywgJ2F0dHInKTtcbiAgICBsZXQga2V5U3RyaW5nID0gQWtpbGkuam9pbkJpbmRpbmdLZXlzKGtleXMpO1xuICAgIFxuICAgIGlmICghdGhpcy5fX2F0dHJMaW5rc1trZXlTdHJpbmddKSB7XG4gICAgICB0aGlzLl9fYXR0ckxpbmtzW2tleVN0cmluZ10gPSBbXTtcbiAgICB9XG5cbiAgICBsZXQgYXJyID0gdGhpcy5fX2F0dHJMaW5rc1trZXlTdHJpbmddO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCByZXMgPSBhcnJbaV07XG5cbiAgICAgIGlmIChyZXMubmFtZSA9PSBuYW1lICYmIHJlcy5rZXlTdHJpbmcgPT0ga2V5U3RyaW5nKSB7XG4gICAgICAgIHJlcy5nZXQgPSBvcHRpb25zLmdldDtcbiAgICAgICAgcmVzLnNldCA9IG9wdGlvbnMuc2V0O1xuICAgICAgICByZXMuZGF0ZSA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9fYXR0ckxpbmtzW2tleVN0cmluZ10ucHVzaCh7IG5hbWUsIGtleXMsIGtleVN0cmluZywgZGF0ZTogRGF0ZS5ub3coKSwgc2V0OiBvcHRpb25zLnNldCwgZ2V0OiBvcHRpb25zLmdldCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGF0dHJpYnV0ZSBsaW5rIHdpdGggdGhlIGZ1bmN0aW9uXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcHJvdGVjdGVkIFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICovXG4gIF9fYXR0ckJ5RnVuY3Rpb24obmFtZSwgZm4sIG9wdGlvbnMgPSB7fSkgeyAgICBcbiAgICBuYW1lID0gdXRpbHMudG9DYW1lbENhc2UobmFtZSk7XG4gICAgbGV0IGNhbGwgPSBvcHRpb25zLmNhbGxPblN0YXJ0ID09PSB1bmRlZmluZWQ/IHRoaXMuYXR0cnMuaGFzT3duUHJvcGVydHkobmFtZSk6IG9wdGlvbnMuY2FsbE9uU3RhcnQ7ICAgIFxuXG4gICAgaWYgKCF0aGlzLl9fYXR0ckxpbmtzW25hbWVdKSB7XG4gICAgICB0aGlzLl9fYXR0ckxpbmtzW25hbWVdID0gW107XG4gICAgfVxuXG4gICAgbGV0IGxpbmtzID0gdGhpcy5fX2F0dHJMaW5rc1tuYW1lXTtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gbGlua3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCByZXMgPSBsaW5rc1tpXTtcblxuICAgICAgaWYgKHJlcy5uYW1lID09IG5hbWUgJiYgcmVzLmZuID09PSBmbikge1xuICAgICAgICByZXMuZGF0ZSA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdGhpcy5fX2F0dHJMaW5rc1tuYW1lXS5wdXNoKHsgbmFtZSwgZm4sIGRhdGU6IERhdGUubm93KCkgfSk7XG5cbiAgICBpZiAobmFtZSA9PSAnKicgJiYgb3B0aW9ucy5jYWxsT25TdGFydCAhPT0gZmFsc2UpIHtcbiAgICAgIGxldCBhdHRyc0tleXMgPSBPYmplY3Qua2V5cyh0aGlzLl9fYXR0cnMpLmZpbHRlcihrID0+ICEodGhpcy5fX2F0dHJzW2tdIGluc3RhbmNlb2YgQWtpbGkuRXZlbnRFbWl0dGVyKSk7XG4gICAgICBsZXQgcCA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGF0dHJzS2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IGtleSA9IGF0dHJzS2V5c1tpXTtcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMuX19hdHRyc1trZXldO1xuICAgICAgICBwLnB1c2goQWtpbGkudW5pc29sYXRlKCgpID0+IGZuLmNhbGwodGhpcywgdmFsLCB1dGlscy50b0Rhc2hDYXNlKGtleSkpKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGNhbGwpIHtcbiAgICAgIHJldHVybiBBa2lsaS51bmlzb2xhdGUoKCkgPT4gZm4uY2FsbCh0aGlzLCB0aGlzLmF0dHJzW25hbWVdKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgYXR0cmlidXRlIGxpbmsgd2l0aCB0aGUgc2NvcGUgcHJvcGVydHlcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBrZXlzXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fdW5hdHRyQnlLZXlzKG5hbWUsIGtleXMpIHtcbiAgICBpZiAoIWtleXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IGhhdmUgdG8gcGFzcyB0aGUgc2NvcGUgcHJvcGVydHkgbmFtZSBmb3IgYXR0cmlidXRlIGxpbmsgXCIke25hbWV9XCJgKTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIHtcbiAgICAgIGtleXMgPSBba2V5c107XG4gICAgfVxuXG4gICAgY29uc3Qga2V5U3RyaW5nID0gQWtpbGkuam9pbkJpbmRpbmdLZXlzKGtleXMpO1xuICAgIGNvbnN0IGFyciA9IHRoaXMuX19hdHRyTGlua3Nba2V5U3RyaW5nXTtcblxuICAgIGlmICghYXJyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBmb3IgKGxldCBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgcmVzID0gYXJyW2ldO1xuXG4gICAgICBpZiAocmVzLm5hbWUgIT0gbmFtZSB8fCByZXMua2V5U3RyaW5nICE9IGtleVN0cmluZykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgYXJyLnNwbGljZShpLCAxKTtcbiAgICB9XG5cbiAgICBpZiAoIWFyci5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9fYXR0ckxpbmtzW2tleVN0cmluZ107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgYXR0cmlidXRlIGxpbmsgd2l0aCB0aGUgZnVuY3Rpb25cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3VuYXR0ckJ5RnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICBpZiAoIXRoaXMuX19hdHRyTGlua3NbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsaW5rcyA9IHRoaXMuX19hdHRyTGlua3NbbmFtZV07XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IGxpbmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgcmVzID0gbGlua3NbaV07XG5cbiAgICAgIGlmIChyZXMubmFtZSA9PSBuYW1lICYmIHJlcy5mbiA9PT0gZm4pIHtcbiAgICAgICAgbGlua3Muc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWxpbmtzLmxlbmd0aCkge1xuICAgICAgZGVsZXRlIHRoaXMuX19hdHRyTGlua3NbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBrZXkgaXMgc3lzdGVtXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9faXNTeXN0ZW1LZXkgKGtleSkge1xuICAgIGlmIChrZXkgPT0gJ19fJyB8fCAoa2V5WzBdID09ICdfJyAmJiBrZXlbMV0gPT0gJ18nKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKFsnY29uc3RydWN0b3InXS5pbmRleE9mKGtleSkgIT0gLTEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOZXN0ZWQgb2JzZXJ2aW5nIG9mIHRoZSB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IFtzdGFydEtleXNdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fbmVzdGVkT2JzZXJ2ZSAodmFsdWUsIHN0YXJ0S2V5cykge1xuICAgIGNvbnN0IG9ic2VydmUgPSAodmFsdWUsIHBhcmVudHMpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXV0aWxzLmlzUGxhaW5PYmplY3QodmFsdWUpICYmICF1dGlscy5pc1Njb3BlUHJveHkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBTY29wZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgdGFyZ2V0ID0gdmFsdWU7XG5cbiAgICAgIENIRUNLX1BST1hZOiBpZiAodmFsdWUuX19pc1Byb3h5KSB7XG4gICAgICAgIHRhcmdldCA9IHZhbHVlLl9fdGFyZ2V0O1xuXG4gICAgICAgIGlmICh0aGlzLl9fZGlzYWJsZVByb3h5UmVkZWZpbmluZykge1xuICAgICAgICAgIGJyZWFrIENIRUNLX1BST1hZO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoXG4gICAgICAgICAgdmFsdWUuX19jb21wb25lbnQgIT09IHRoaXMgfHxcbiAgICAgICAgICBBa2lsaS5qb2luQmluZGluZ0tleXMocGFyZW50cykgIT0gQWtpbGkuam9pbkJpbmRpbmdLZXlzKHZhbHVlLl9fa2V5cylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdXRpbHMuY29weSh0YXJnZXQsIHsgbmVzdGVkOiBmYWxzZSB9KTtcbiAgICAgICAgICB2YWx1ZSA9IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIXRoaXMuX19kaXNhYmxlUHJveHlSZWRlZmluaW5nICYmICEodmFsdWUgaW5zdGFuY2VvZiBTY29wZSkpIHtcbiAgICAgICAgdGFyZ2V0ID0gdXRpbHMuY29weSh0YXJnZXQsIHsgbmVzdGVkOiBmYWxzZSB9ICk7ICAgICAgICAgIFxuICAgICAgICB2YWx1ZSA9IHRhcmdldDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGFyZ2V0S2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGFyZ2V0S2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgICAgXG4gICAgICAgIGNvbnN0IGsgPSB0YXJnZXRLZXlzW2ldO1xuICAgICAgICBjb25zdCB2YWwgPSB0YXJnZXRba107ICAgICAgICBcbiAgICAgICAgY29uc3Qga2V5cyA9IFtdLmNvbmNhdChwYXJlbnRzLCBba10pOyAgIFxuICAgICAgICB0YXJnZXRba10gPSBvYnNlcnZlKHZhbCwga2V5cyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdmFsdWUuX19pc1Byb3h5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fb2JzZXJ2ZSh2YWx1ZSwgcGFyZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG9ic2VydmUodmFsdWUsIHN0YXJ0S2V5cyB8fCBbXSk7XG4gIH1cblxuICAgLyoqXG4gICAqIENyZWF0ZSBhbiBpc29sYXRpb24gb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmVudHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlbGV0ZWQ9ZmFsc2VdXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2NyZWF0ZUlzb2xhdGlvbk9iamVjdCAocGFyZW50cywga2V5LCBpc0RlbGV0ZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IGtleXMgPSBwYXJlbnRzLmxlbmd0aD8gW3BhcmVudHNbMF1dOiBba2V5XTtcbiAgICBjb25zdCBpc29sYXRpb25IYXNoID0gdGhpcy5fX2NyZWF0ZUtleXNIYXNoKGtleXMpO1xuXG4gICAgaWYgKHBhcmVudHMubGVuZ3RoKSB7XG4gICAgICBpc0RlbGV0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIUFraWxpLl9faXNvbGF0aW9uW2lzb2xhdGlvbkhhc2hdKSB7XG4gICAgICBBa2lsaS5fX2lzb2xhdGlvbltpc29sYXRpb25IYXNoXSA9IHtcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgY29tcG9uZW50OiB0aGlzLFxuICAgICAgICBrZXlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIChpc0RlbGV0ZWQgIT09IHVuZGVmaW5lZCkgJiYgKEFraWxpLl9faXNvbGF0aW9uW2lzb2xhdGlvbkhhc2hdLmlzRGVsZXRlZCA9IGlzRGVsZXRlZCk7XG4gICAgcmV0dXJuIEFraWxpLl9faXNvbGF0aW9uW2lzb2xhdGlvbkhhc2hdO1xuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmUgdGhlIG5vZGUgdG8gdGhlIGJpbmRpbmdcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGJpbmQgLSBieSBkZWZhdWx0IGlzIGNvbXBvbmVudC5fX2V2YWx1YXRpb24ubGlzdFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBhcmVudHNcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3RCaW5kaW5nPWZhbHNlXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtldmFsdWF0ZWQ9ZmFsc2VdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fYmluZE5vZGUoYmluZCwgcmVhbENvbXBvbmVudCwga2V5cywgcGFyZW50cywgdmFsdWUsIG5vdEJpbmRpbmcgPSBmYWxzZSwgZXZhbHVhdGVkID0gZmFsc2UpIHtcbiAgICBjb25zdCBwYXJlbnRLZXlzU3RyaW5nID0gQWtpbGkuam9pbkJpbmRpbmdLZXlzKHBhcmVudHMpO1xuICAgIGxldCBjb21wb25lbnQgPSB0aGlzO1xuXG4gICAgaWYgKGJpbmQubGVuZ3RoICYmICFub3RCaW5kaW5nKSB7XG4gICAgICBsZXQgbCA9IGJpbmQubGVuZ3RoIC0gMTtcbiAgICAgIGxldCBkYXRhID0gYmluZFtsXTtcblxuICAgICAgaWYgKGRhdGEucmVhbENvbXBvbmVudCA9PT0gdGhpcyAmJiBkYXRhLmtleXNTdHJpbmcgPT0gcGFyZW50S2V5c1N0cmluZykge1xuICAgICAgICBjb21wb25lbnQgPSBkYXRhLmNvbXBvbmVudDtcbiAgICAgIH0gICAgICBcbiAgICAgIFxuICAgICAgaWYgKGRhdGEua2V5c1N0cmluZyA9PSBwYXJlbnRLZXlzU3RyaW5nICYmIGRhdGEuY29tcG9uZW50ID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgYmluZC5zcGxpY2UobCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGJpbmQucHVzaCh7XG4gICAgICBjb21wb25lbnQsXG4gICAgICByZWFsQ29tcG9uZW50OiByZWFsQ29tcG9uZW50LFxuICAgICAga2V5c1N0cmluZzogQWtpbGkuam9pbkJpbmRpbmdLZXlzKGtleXMpLFxuICAgICAgcGFyZW50cyxcbiAgICAgIGtleXMsXG4gICAgICB2YWx1ZSxcbiAgICAgIGV2YWx1YXRlZCxcbiAgICAgIG5vdEJpbmRpbmdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUga2V5IGlzIHRoZSBzeXN0ZW1cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICogQHByb3RlY3RlZFxuICAgKi8gXG4gIF9faXNTeXN0ZW1CaW5kaW5nS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkgPT0gJ19fZGF0YSc7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgYmluZGluZyBieSB0aGUga2V5c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzXG4gICAqIEByZXR1cm5zIHtvYmplY3R8bnVsbH1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19nZXRCaW5kKGtleXMpIHtcbiAgICByZXR1cm4gdXRpbHMuZ2V0UHJvcGVydHlCeUtleXMoa2V5cywgdGhpcy5fX2JpbmRpbmdzKSB8fCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgbmVzdGVkIGJpbmRpbmdzIGJ5IHRoZSBrZXlzXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzIFxuICAgKi9cbiAgX19nZXRBbGxCaW5kcyhrZXlzKSB7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuX19nZXRCaW5kKGtleXMpO1xuXG4gICAgaWYgKCFyb290KSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IGRhdGEgPSBbXTtcblxuICAgIGNvbnN0IGNvbGxlY3QgPSBvYmogPT4ge1xuICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KG9iai5fX2RhdGEgfHwgW10pO1xuXG4gICAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGtleSkgfHwga2V5ID09ICdfX2RhdGEnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb2xsZWN0KG9ialtrZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb2xsZWN0KHJvb3QpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGJpbmRpbmcgYnkgdGhlIGtleXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHJldHVybnMge29iamVjdHxudWxsfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2dldEJvdW5kTm9kZShrZXlzLCBub2RlKSB7XG4gICAgY29uc3QgYmluZCA9ICB1dGlscy5nZXRQcm9wZXJ0eUJ5S2V5cyhrZXlzLCB0aGlzLl9fYmluZGluZ3MpO1xuXG4gICAgaWYgKCFiaW5kIHx8ICFiaW5kLl9fZGF0YSB8fCAhYmluZC5fX2RhdGEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGJpbmQuX19kYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgZGF0YSA9IGJpbmQuX19kYXRhW2ldO1xuXG4gICAgICBpZiAoZGF0YS5ub2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbm9kZSBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V2YWx1YXRlZD1mYWxzZV1cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fc2V0Tm9kZVByb3BlcnR5KG5vZGUsIGtleXMsIHZhbHVlLCBldmFsdWF0ZWQgPSBmYWxzZSkge1xuICAgIGNvbnN0IHByb3AgPSB0aGlzLl9fZ2V0Tm9kZVByb3BlcnR5KG5vZGUsIGtleXMpOyAgICBcbiAgICBjb25zdCBoYXNoID0gdXRpbHMuY3JlYXRlSGFzaCh2YWx1ZSk7XG5cbiAgICBpZiAocHJvcCkge1xuICAgICAgbGV0IHJlcyA9IG5vZGUuX19jb21wb25lbnQuX19jb21wYXJlTm9kZVByb3BlcnR5VmFsdWUocHJvcCwgdmFsdWUpO1xuICAgICAgcHJvcC52YWx1ZSA9IHZhbHVlO1xuICAgICAgcHJvcC5oYXNoID0gaGFzaDtcbiAgICAgIHJldHVybiAhcmVzO1xuICAgIH1cbiAgICBcbiAgICBub2RlLl9fcHJvcGVydGllc1t0aGlzLl9fY3JlYXRlS2V5c0hhc2goa2V5cyldID0ge1xuICAgICAgY29tcG9uZW50OiB0aGlzLFxuICAgICAgdmFsdWUsXG4gICAgICBoYXNoLFxuICAgICAgbm9kZSxcbiAgICAgIGtleXMsXG4gICAgICBldmFsdWF0ZWQgIFxuICAgIH07XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5vZGUgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAgICogQHJldHVybnMge29iamVjdHxudWxsfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2dldE5vZGVQcm9wZXJ0eShub2RlLCBrZXlzKSB7XG4gICAgcmV0dXJuIG5vZGUuX19wcm9wZXJ0aWVzW3RoaXMuX19jcmVhdGVLZXlzSGFzaChrZXlzKV0gfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdGhlIG5vZGUgcHJvcGVydHlcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19kZWxldGVOb2RlUHJvcGVydHkobm9kZSwga2V5cykge1xuICAgIGNvbnN0IGhhc2ggPSBgJHt0aGlzLl9fc2NvcGUuX19uYW1lfS4ke0FraWxpLmpvaW5CaW5kaW5nS2V5cyhrZXlzKX1gO1xuICAgIGRlbGV0ZSBub2RlLl9fcHJvcGVydGllc1toYXNoXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXAgdGhlIG5vZGVzXG4gICAqIFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fbWFwTm9kZXMoZm4sIG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMgPSB7IHJvb3RBdHRyczogdHJ1ZSwgYXR0cnM6IHRydWUsIG5vZGU6IHRydWUsIGVsOiB0cnVlLCAuLi5vcHRpb25zIH07XG5cbiAgICBjb25zdCBmaW5kID0gZWwgPT4ge1xuICAgICAgaWYoIWVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYob3B0aW9ucy5hdHRycyAmJiAoZWwgIT09IHRoaXMuZWwgfHwgb3B0aW9ucy5yb290QXR0cnMpKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSAwLCBhdHRycyA9IGVsLmF0dHJpYnV0ZXMsIGMgPSBhdHRycy5sZW5ndGg7IGsgPCBjOyBrKyspIHtcbiAgICAgICAgICBmbihhdHRyc1trXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgZm9yIChsZXQgaSA9IGVsLmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGVsLmNoaWxkTm9kZXNbaV07XG5cbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykge1xuICAgICAgICAgIG9wdGlvbnMubm9kZSAmJiBmbihub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDEgJiYgIW5vZGUuX19ha2lsaSkge1xuICAgICAgICAgIGZpbmQobm9kZSk7XG4gICAgICAgICAgb3B0aW9ucy5lbCAmJiBmbihub2RlKTsgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGZpbmQodGhpcy5lbCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBub2Rlc1xuICAgKiBcbiAgICogQHJldHVybnMge05vZGVbXX1cbiAgICogQHByb3RlY3RlZCBcbiAgICovXG4gIF9fZ2V0QWxsTm9kZXMoKSB7XG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICB0aGlzLl9fbWFwTm9kZXMobm9kZSA9PiBub2Rlcy5wdXNoKG5vZGUpKTtcbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBCaW5kIHRoZSBkYXRhIHdpdGggdGhlIGtleXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2JpbmQoa2V5cywgZGF0YSkge1xuICAgIHV0aWxzLnNldFByb3BlcnR5QnlLZXlzKGtleXMsIHRoaXMuX19iaW5kaW5ncywgKGxhc3QsIHZhbHVlKSA9PiB7XG4gICAgICBsZXQgb2JqID0geyBfX2RhdGE6IFtdIH07XG5cbiAgICAgIGlmICghbGFzdCkge1xuICAgICAgICByZXR1cm4gdmFsdWU/IHZhbHVlOiBvYmo7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgb2JqID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghb2JqLl9fZGF0YSkge1xuICAgICAgICBvYmouX19kYXRhID0gW107XG4gICAgICB9XG5cbiAgICAgIG9iai5fX2RhdGEucHVzaChkYXRhKTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVW5iaW5kIHRoZSBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX191bmJpbmQoa2V5cykge1xuICAgIGxldCBiaW5kID0gdXRpbHMuZ2V0UHJvcGVydHlCeUtleXMoa2V5cywgdGhpcy5fX2JpbmRpbmdzKTtcblxuICAgIGlmICghYmluZCB8fCAhYmluZC5fX2RhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGJpbmQuX19kYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IG5vZGUgPSBiaW5kLl9fZGF0YVtpXS5ub2RlO1xuICAgICAgdGhpcy5fX2RlbGV0ZU5vZGVQcm9wZXJ0eShub2RlLCBrZXlzKTtcbiAgICB9XG5cbiAgICB1dGlscy5kZWxldGVQcm9wZXJ0eUJ5S2V5cyhrZXlzLCB0aGlzLl9fYmluZGluZ3MsIHZhbHVlID0+IHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID4gMSkge1xuICAgICAgICB2YWx1ZS5fX2RhdGEgPSBbXTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmJpbmQgdGhlIGRhdGEgYnkgbm9kZXNcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfE5vZGVbXX0gbm9kZXNcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX191bmJpbmRCeU5vZGVzKG5vZGVzKSB7XG4gICAgbm9kZXMgaW5zdGFuY2VvZiBOb2RlICYmIChub2RlcyA9IFtub2Rlc10pO1xuXG4gICAgY29uc3QgdW5iaW5kID0gKG9iaiwgcGFyZW50LCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gICAgICBmb3IgKGxldCBqID0gMCwgYyA9IGtleXMubGVuZ3RoOyBqIDwgYzsgaisrKSB7XG4gICAgICAgIGNvbnN0IGsgPSBrZXlzW2pdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGsgPT0gJ19fZGF0YScpIHtcbiAgICAgICAgICBsZXQgZGF0YSA9IG9ialtrXSB8fCBbXTtcbiAgICAgICAgICBsZXQgbCA9IGRhdGEubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBiaW5kID0gZGF0YVtpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG5vZGVzLmluZGV4T2YoYmluZC5ub2RlKSAhPSAtMSkge1xuICAgICAgICAgICAgICBkZWxldGUgYmluZC5ub2RlOyAgICAgICAgICAgIFxuICAgICAgICAgICAgICBkYXRhLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFsKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqW2tdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5fX2lzU3lzdGVtQmluZGluZ0tleShrKSkge1xuICAgICAgICAgIHVuYmluZChvYmpba10sIG9iaiwgayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihwYXJlbnQgJiYgIU9iamVjdC5rZXlzKG9iaikubGVuZ3RoKSB7XG4gICAgICAgICAgZGVsZXRlIHBhcmVudFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVuYmluZCh0aGlzLl9fYmluZGluZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgcGFyZW50IGJpbmRpbmdzIHdpdGggdGhlIG5vZGVzXG4gICAqIFxuICAgKiBAcGFyYW0ge05vZGV8Tm9kZVtdfSBub2Rlc1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3VuYmluZFBhcmVudHNCeU5vZGVzKG5vZGVzKSB7ICBcbiAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5fX3BhcmVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl9fcGFyZW50c1tpXTsgICAgICBcbiAgICAgIHBhcmVudCAmJiBwYXJlbnQuX19ha2lsaSAmJiBwYXJlbnQuX19ha2lsaS5fX3VuYmluZEJ5Tm9kZXMobm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgbGlua3NcbiAgICogXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fY2xlYXJTdG9yZUxpbmtzKCkge1xuICAgIGNvbnN0IGxpbmtzID0gQWtpbGkuX19zdG9yZUxpbmtzO1xuXG4gICAgZm9yIChsZXQga2V5IGluIGxpbmtzKSB7XG4gICAgICBjb25zdCBhcnIgPSBsaW5rc1trZXldO1xuXG4gICAgICBmb3IgKGxldCBpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBhcnJbaV07XG4gIFxuICAgICAgICBpZiAobGluay5jb21wb25lbnQgPT09IHRoaXMpIHtcbiAgICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXJyLmxlbmd0aCkge1xuICAgICAgICBkZWxldGUgbGlua3Nba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBjb21wb25lbnQgd2l0aG91dCB0aGUgY2hpbGRyZW4gcmVtb3ZpbmdcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7Tm9kZVtdfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3JlbW92ZShvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmF0dHJzLm9uUmVtb3ZlZCAmJiB0aGlzLmF0dHJzLm9uUmVtb3ZlZC50cmlnZ2VyKHVuZGVmaW5lZCwgeyBidWJibGVzOiBmYWxzZSB9KTsgXG4gICAgdGhpcy5yZW1vdmVkKCk7XG4gICAgY29uc3QgZGV0YWNoTm9kZXMgPSB0aGlzLl9fZGV0YWNoKHsgc2F2ZUJpbmRpbmdzOiB0cnVlLCBkZWluaXRpYWxpemVOb2RlczogdHJ1ZSB9KTtcbiAgICBjb25zdCBub2RlcyA9IFtdLmNvbmNhdChkZXRhY2hOb2RlcywgdGhpcy5fX2VtcHR5KHsgc2F2ZUJpbmRpbmdzOiB0cnVlIH0pKTsgXG4gICAgdGhpcy5fX3VuYmluZEJ5Tm9kZXMoZGV0YWNoTm9kZXMpO1xuICAgICFvcHRpb25zLnNhdmVCaW5kaW5ncyAmJiB0aGlzLl9fdW5iaW5kUGFyZW50c0J5Tm9kZXMobm9kZXMpOyAgICBcbiAgICB0aGlzLl9fY2xlYXJTdG9yZUxpbmtzKCk7ICBcbiAgICB0aGlzLl9fc2NvcGUuX19yZW1vdmUoKTtcbiAgICBkZWxldGUgdGhpcy5fX3Njb3BlO1xuICAgIGRlbGV0ZSB0aGlzLnNjb3BlOyBcbiAgICB0aGlzLmVsLnJlbW92ZSgpO1xuICAgIGRlbGV0ZSB0aGlzLmVsLl9fYWtpbGk7XG4gICAgZGVsZXRlIHRoaXMuZWw7ICAgIFxuICAgIGRlbGV0ZSB0aGlzLl9fcGFyZW50OyAgICBcbiAgICBkZWxldGUgdGhpcy5fX2F0dHJpYnV0ZU9mO1xuICAgIGRlbGV0ZSB0aGlzLl9fZXZhbHVhdGlvbkNvbXBvbmVudDtcbiAgICBkZWxldGUgdGhpcy5fX2V2YWx1YXRpb25QYXJlbnQ7ICAgXG4gICAgZGVsZXRlIHRoaXMuX19wYXJlbnRzO1xuICAgIGRlbGV0ZSB0aGlzLl9fYmluZGluZ3M7XG4gICAgZGVsZXRlIHRoaXMuX19hdHRyTGlua3M7XG4gICAgZGVsZXRlIHRoaXMuX19zdG9yZUxpbmtzO1xuICAgIGRlbGV0ZSB0aGlzLl9fYXR0cnM7XG4gICAgZGVsZXRlIHRoaXMuYXR0cnM7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgY2hpbGRyZW5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7Tm9kZVtdfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3JlbW92ZUNoaWxkcmVuKG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBub2RlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9fY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjaGlsZCA9IHRoaXMuX19jaGlsZHJlbltpXTtcbiAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KGNoaWxkLl9fYWtpbGkuX19yZW1vdmUob3B0aW9ucykpO1xuICAgICAgaS0tO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIGNvbXBvbmVudFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZGV0YWNoKG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuX19wYXJlbnQgJiYgdGhpcy5fX3BhcmVudC5fX2FraWxpLl9fc3BsaWNlQ2hpbGQodGhpcy5lbCk7XG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5lbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLmVsLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgIGlmKG5vZGUuX19pbml0aWFsaXplZCkge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICBvcHRpb25zLmRlaW5pdGlhbGl6ZU5vZGVzICYmIHRoaXMuX19kZWluaXRpYWxpemVOb2RlKG5vZGUsIHsgc2F2ZUJpbmRpbmdzOiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgICFvcHRpb25zLnNhdmVCaW5kaW5ncyAmJiB0aGlzLl9fdW5iaW5kUGFyZW50c0J5Tm9kZXMobm9kZXMpO1xuICAgIHJldHVybiBub2RlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgY29tcG9uZW50IGh0bWxcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJucyB7Tm9kZVtdfVxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX2VtcHR5KG9wdGlvbnMgPSB7fSkgeyAgICBcbiAgICBjb25zdCBub2RlcyA9IHRoaXMuX19yZW1vdmVDaGlsZHJlbih7IHNhdmVCaW5kaW5nczogdHJ1ZSB9KTtcbiAgICBcbiAgICB0aGlzLl9fbWFwTm9kZXMobm9kZSA9PiB7ICAgICAgXG4gICAgICBpZihub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighbm9kZS5fX2luaXRpYWxpemVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gICAgICBcbiAgICAgIFxuICAgICAgdGhpcy5fX2RlaW5pdGlhbGl6ZU5vZGUobm9kZSwgeyBzYXZlQmluZGluZ3M6IHRydWUgfSk7ICBcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfSwgeyByb290QXR0cnM6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5fX3VuYmluZEJ5Tm9kZXMobm9kZXMpO1xuXG4gICAgIW9wdGlvbnMuc2F2ZUJpbmRpbmdzICYmIHRoaXMuX191bmJpbmRQYXJlbnRzQnlOb2Rlcyhub2Rlcyk7XG4gICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnJztcbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwYXJlbnQgY29tcG9uZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yPScnXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmaW5kQWxsPXRydWVdIC0gZ2V0IGFycmF5IGlmIHRydWVcbiAgICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtsZXZlbHM9bnVsbF1cbiAgICogQHJldHVybnMge0NvbXBvbmVudHxDb21wb25lbnRbXX1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19nZXRQYXJlbnQoc2VsZWN0b3IgPSAnJywgZmluZEFsbCA9IGZhbHNlLCBsZXZlbHMgPSBudWxsKSB7XG4gICAgbGV0IGFyciA9IFtdO1xuICAgIGxldCBsZXZlbCA9IDA7XG5cbiAgICBpZiAodHlwZW9mIGxldmVscyAhPSAnb2JqZWN0Jykge1xuICAgICAgbGV2ZWxzID0gW2xldmVsc107XG4gICAgfVxuXG4gICAgY29uc3QgZmluZCA9IHBhcmVudCA9PiB7XG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghbGV2ZWxzIHx8IGxldmVscy5pbmRleE9mKGxldmVsKSAhPSAtMSkge1xuICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IHBhcmVudC5fX2FraWxpLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgaWYgKCFmaW5kQWxsKSB7XG4gICAgICAgICAgICBhcnIucHVzaChwYXJlbnQuX19ha2lsaSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXJyLnB1c2gocGFyZW50Ll9fYWtpbGkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldmVsKys7XG4gICAgICBmaW5kKHBhcmVudC5fX2FraWxpLl9fcGFyZW50KTtcbiAgICB9O1xuXG4gICAgZmluZCh0aGlzLl9fcGFyZW50KTtcbiAgICByZXR1cm4gZmluZEFsbD8gYXJyOiAoYXJyWzBdIHx8IG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2hpbGQgY29tcG9uZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yPScnXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmaW5kQWxsPXRydWVdIC0gZ2V0IGFycmF5IGlmIHRydWVcbiAgICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtsZXZlbHM9bnVsbF1cbiAgICogQHJldHVybnMge0NvbXBvbmVudHxDb21wb25lbnRbXX1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19nZXRDaGlsZHJlbihzZWxlY3RvciA9ICcnLCBmaW5kQWxsID0gdHJ1ZSwgbGV2ZWxzID0gbnVsbCkge1xuICAgIGxldCBhcnIgPSBbXTtcbiAgICBsZXQgbGV2ZWwgPSAwO1xuXG4gICAgaWYgKHR5cGVvZiBsZXZlbHMgIT0gJ29iamVjdCcpIHtcbiAgICAgIGxldmVscyA9IFtsZXZlbHNdO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbmQgPSBjaGlsZHJlbiA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICBpZiAoIWxldmVscyB8fCBsZXZlbHMuaW5kZXhPZihsZXZlbCkgIT0gLTEpIHtcbiAgICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IGNoaWxkLl9fYWtpbGkubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIGlmICghZmluZEFsbCkge1xuICAgICAgICAgICAgICBhcnIucHVzaChjaGlsZC5fX2FraWxpKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhcnIucHVzaChjaGlsZC5fX2FraWxpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV2ZWwrKztcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgZmluZChjaGlsZHJlbltpXS5fX2FraWxpLl9fY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmaW5kKHRoaXMuX19jaGlsZHJlbik7XG4gICAgcmV0dXJuIGZpbmRBbGw/IGFycjogKGFyclswXSB8fCBudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5lYXJlc3QgY29tcG9uZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlbGVjdG9yPScnXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmaW5kQWxsPXRydWVdIC0gZ2V0IGFycmF5IGlmIHRydWVcbiAgICogQHBhcmFtIHtib29sZWFufSBbcmlnaHQ9ZmFsc2VdIC0gZnJvbSB0aGUgcmlnaHQgc2lkZSBpZiB0cnVlXG4gICAqIEByZXR1cm5zIHtDb21wb25lbnR8Q29tcG9uZW50W119XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9fZ2V0TmVhcihzZWxlY3RvciA9ICcnLCBmaW5kQWxsID0gdHJ1ZSwgcmlnaHQgPSBmYWxzZSkge1xuICAgIGlmICghdGhpcy5fX3BhcmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxldmVsRWxlbWVudHMgPSB0aGlzLl9fcGFyZW50Ll9fYWtpbGkuX19jaGlsZHJlbi5zbGljZSgpO1xuICAgIGxldCBhcnIgPSBbXTtcbiAgICByaWdodCAmJiBsZXZlbEVsZW1lbnRzLnJldmVyc2UoKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGV2ZWxFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBlbCA9IGxldmVsRWxlbWVudHNbaV07XG5cbiAgICAgIGlmIChlbCA9PT0gdGhpcy5lbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxlY3RvciB8fCBlbC5fX2FraWxpLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGFyci5wdXNoKGVsLl9fYWtpbGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFyci5yZXZlcnNlKCk7XG5cbiAgICBpZiAoIWZpbmRBbGwpIHtcbiAgICAgIHJldHVybiBhcnIubGVuZ3RoPyBhcnJbMF06IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGxpbmsgd2l0aCB0aGUgc3RvcmVcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXXxmdW5jdGlvbn0gaGFuZGxlclxuICAgKi9cbiAgc3RvcmUobmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fX2lzTW91bnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXRob2QgXCJzdG9yZVwiIG11c3QgYmUgY2FsbGVkIGFmdGVyIHRoZSBjb21waWxhdGlvbi4gRm9yIGV4YW1wbGUsIGluIFwiY29tcGlsZWRcIiBtZXRob2QuYCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJyonKTtcbiAgICAgIGhhbmRsZXIgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJz8gdGhpcy5fX3N0b3JlQnlGdW5jdGlvbiguLi5hcmdzKTogdGhpcy5fX3N0b3JlQnlLZXlzKC4uLmFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgbGluayB3aXRoIHRoZSBhdHRyaWJ1dGVcbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXXxmdW5jdGlvbn0gaGFuZGxlclxuICAgKi9cbiAgYXR0cihuYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKCF0aGlzLl9faXNNb3VudGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1ldGhvZCBcImF0dHJcIiBtdXN0IGJlIGNhbGxlZCBhZnRlciB0aGUgY29tcGlsYXRpb24uIEZvciBleGFtcGxlLCBpbiBcImNvbXBpbGVkXCIgbWV0aG9kLmApO1xuICAgIH1cblxuICAgIGNvbnN0IGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXJncy51bnNoaWZ0KCcqJyk7XG4gICAgICBoYW5kbGVyID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbic/IHRoaXMuX19hdHRyQnlGdW5jdGlvbiguLi5hcmdzKTogdGhpcy5fX2F0dHJCeUtleXMoLi4uYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBzdG9yZSBsaW5rXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW118ZnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIHVuc3RvcmUobmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fX2lzTW91bnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXRob2QgXCJ1bnN0b3JlXCIgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGNvbXBpbGF0aW9uLiBGb3IgZXhhbXBsZSwgaW4gXCJjb21waWxlZFwiIG1ldGhvZC5gKTtcbiAgICB9XG5cbiAgICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFyZ3MudW5zaGlmdCgnKicpO1xuICAgICAgaGFuZGxlciA9IG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nPyB0aGlzLl9fdW5zdG9yZUJ5RnVuY3Rpb24oLi4uYXJndW1lbnRzKTogdGhpcy5fX3Vuc3RvcmVCeUtleXMoLi4uYXJndW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGF0dHJpYnV0ZSBsaW5rXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW118ZnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIHVuYXR0cihuYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKCF0aGlzLl9faXNNb3VudGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1ldGhvZCBcInVuYXR0clwiIG11c3QgYmUgY2FsbGVkIGFmdGVyIHRoZSBjb21waWxhdGlvbi4gRm9yIGV4YW1wbGUsIGluIFwiY29tcGlsZWRcIiBtZXRob2QuYCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhcmdzLnVuc2hpZnQoJyonKTtcbiAgICAgIGhhbmRsZXIgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJz8gdGhpcy5fX3VuYXR0ckJ5RnVuY3Rpb24oLi4uYXJndW1lbnRzKTogdGhpcy5fX3VuYXR0ckJ5S2V5cyguLi5hcmd1bWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBjb21wb25lbnQgdXNpbmcgdGhlIHNlbGVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBzZWxlY3RvclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIG1hdGNoZXMoc2VsZWN0b3IpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzZWxlY3Rvcih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCBieSB0aGUgc2VsZWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IFtzZWxlY3Rvcj0nJ11cbiAgICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtsZXZlbHM9bnVsbF1cbiAgICogQHJldHVybnMge0NvbXBvbmVudH1cbiAgICovXG4gIHBhcmVudChzZWxlY3RvciA9ICcnLCBsZXZlbHMgPSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX19nZXRQYXJlbnQoc2VsZWN0b3IsIGZhbHNlLCBsZXZlbHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhcnJheSBvZiBwYXJlbnQgY29tcG9uZW50cyBieSB0aGUgc2VsZWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IFtzZWxlY3Rvcj0nJ11cbiAgICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtsZXZlbHM9bnVsbF1cbiAgICogQHJldHVybnMge0NvbXBvbmVudFtdfVxuICAgKi9cbiAgcGFyZW50cyhzZWxlY3RvciA9ICcnLCBsZXZlbHMgPSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX19nZXRQYXJlbnQoc2VsZWN0b3IsIHRydWUsIGxldmVscyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjbG9zZXN0IGNoaWxkIGNvbXBvbmVudCBieSB0aGUgc2VsZWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IFtzZWxlY3Rvcj0nJ11cbiAgICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtsZXZlbHM9bnVsbF1cbiAgICogQHJldHVybnMge0NvbXBvbmVudH1cbiAgICovXG4gIGNoaWxkKHNlbGVjdG9yID0gJycsIGxldmVscyA9IG51bGwpIHtcbiAgICByZXR1cm4gdGhpcy5fX2dldENoaWxkcmVuKHNlbGVjdG9yLCBmYWxzZSwgbGV2ZWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gYXJyYXkgb2YgY2hpbGQgY29tcG9uZW50cyBieSB0aGUgc2VsZWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb259IFtzZWxlY3Rvcj0nJ11cbiAgICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW119IFtsZXZlbHM9bnVsbF1cbiAgICogQHJldHVybnMge0NvbXBvbmVudFtdfVxuICAgKi9cbiAgY2hpbGRyZW4oc2VsZWN0b3IgPSAnJywgbGV2ZWxzID0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLl9fZ2V0Q2hpbGRyZW4oc2VsZWN0b3IsIHRydWUsIGxldmVscyk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIGNvbXBvbmVudHMgbGVmdCBmcm9tIHRoZSBjdXJyZW50IGJ5IHRoZSBzZWxlY3RvclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gW3NlbGVjdG9yPScnXVxuICAgKiBAcmV0dXJucyB7Q29tcG9uZW50W119XG4gICAqL1xuICBiZWZvcmUoc2VsZWN0b3IgPSAnJykge1xuICAgIHJldHVybiB0aGlzLl9fZ2V0TmVhcihzZWxlY3RvciwgdHJ1ZSwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhcnJheSBvZiBjb21wb25lbnRzIHJpZ2h0IGZyb20gdGhlIGN1cnJlbnQgYnkgdGhlIHNlbGVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBbc2VsZWN0b3I9JyddXG4gICAqIEByZXR1cm5zIHtDb21wb25lbnRbXX1cbiAgICovXG4gIGFmdGVyKHNlbGVjdG9yID0gJycpIHtcbiAgICByZXR1cm4gdGhpcy5fX2dldE5lYXIoc2VsZWN0b3IsIHRydWUsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2xvc2VzdCBsZWZ0Y29tcG9uZW50IGJ5IHRoZSBzZWxlY3RvclxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gW3NlbGVjdG9yPScnXVxuICAgKiBAcmV0dXJucyB7Q29tcG9uZW50fVxuICAgKi9cbiAgcHJldihzZWxlY3RvciA9ICcnKSB7XG4gICAgcmV0dXJuIHRoaXMuX19nZXROZWFyKHNlbGVjdG9yLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2xvc2VzdCByaWdodCBjb21wb25lbnQgYnkgdGhlIHNlbGVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufSBbc2VsZWN0b3I9JyddXG4gICAqIEByZXR1cm5zIHtDb21wb25lbnR9XG4gICAqL1xuICBuZXh0KHNlbGVjdG9yID0gJycpIHtcbiAgICByZXR1cm4gdGhpcy5fX2dldE5lYXIoc2VsZWN0b3IsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIGVsZW1lbnQgcGFyZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcGFyZW50XG4gICAqL1xuICBhcHBlbmRUbyhwYXJlbnQpIHsgICBcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5lbCk7XG4gICAgcmV0dXJuIEFraWxpLmNvbXBpbGUodGhpcy5lbCwgeyByZWNvbXBpbGU6IHsgc2V0UGFyZW50czogdHJ1ZSwgY2hlY2tDaGFuZ2VzOiBmYWxzZSB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCB0aGUgY29tcG9uZW50IGNvbXBpbGF0aW9uXG4gICAqL1xuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5fX2NhbmNlbGxlZCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsZSB0aGUgY29tcG9uZW50IGJ1dCBwcmV2ZW50IHRoZSBjb21waWxhdGlvbiBpbnNpZGVcbiAgICovXG4gIHByZXZlbnQoKSB7XG4gICAgdGhpcy5fX3ByZXZlbnQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBlbGVtZW50IGNvbnRlbnRcbiAgICpcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2VtcHR5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIHJldHVybiB0aGlzLl9fcmVtb3ZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBjcmVhdGVkKCkge31cbiAgY29tcGlsZWQoKSB7fVxuICByZWNvbXBpbGVkKCkge31cbiAgcmVzb2x2ZWQoKSB7fVxuICByZW1vdmVkKCkge31cblxuICBnZXQgdHJhbnNpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fX3Njb3BlLl9fdHJhbnNpdGlvbiB8fCBudWxsO1xuICB9XG59IiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBa2lsaSBmcm9tICcuLi9ha2lsaS5qcyc7XG5cbi8qKlxuICogUmVxdWVzdCBjbGFzcy5cbiAqIFRoZSBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGFsbG93cyB5b3UgdG8gbWFrZSByZXF1ZXN0cy5cbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9yZXF1ZXN0c31cbiAqL1xuZXhwb3J0IGNsYXNzIFJlcXVlc3Qge1xuICBfX2NhY2hlID0ge307XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVXJsXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbZGVmYXVsdHNdIFxuICAgKi9cbiAgY29uc3RydWN0b3IoYmFzZVVybCwgZGVmYXVsdHMpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsPyAoYmFzZVVybC5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nKTogJyc7XG5cbiAgICB0aGlzLmRlZmF1bHRzID0ge1xuICAgICAgc3RhdHVzRXJyb3JQYXR0ZXJuOiAvXlteMjNdLyxcbiAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIC4uLihkZWZhdWx0cyB8fCB7fSlcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgdGhlIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBxdWVyeShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIG9wdGlvbnMgPSB7Li4udGhpcy5kZWZhdWx0cywgLi4uKG9wdGlvbnMgfHwge30pfTsgXG4gICAgICBvcHRpb25zLnVybCA9IHRoaXMuYmFzZVVybD8gYCR7dGhpcy5iYXNlVXJsfSR7b3B0aW9ucy51cmwucmVwbGFjZSgvXlxcLy8sICcnKX1gOiBvcHRpb25zLnVybDsgIFxuICAgICAgb3B0aW9ucy5tZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJztcbiAgICAgIFxuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyAgICAgIFxuICAgICAgY29uc3QgYmVmb3JlID0gdGhpcy50cmFuc2Zvcm1CZWZvcmUoeGhyLCBvcHRpb25zKTtcbiAgICAgIHhociA9IGJlZm9yZS54aHI7XG4gICAgICBvcHRpb25zID0gYmVmb3JlLm9wdGlvbnM7XG4gICAgICAodHlwZW9mIG9wdGlvbnMub25TdGFydCA9PSAnZnVuY3Rpb24nKSAmJiBvcHRpb25zLm9uU3RhcnQoeGhyKTsgIFxuICAgICAgb3B0aW9ucy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIHx8IHt9O1xuICAgICAgXG4gICAgICBpZiAob3B0aW9ucy5qc29uKSB7XG4gICAgICAgIG9wdGlvbnMuanNvbiAhPT0gdHJ1ZSAmJiAob3B0aW9ucy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5qc29uKSk7XG4gICAgICAgIG9wdGlvbnMuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgIG9wdGlvbnMucmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGUgfHwgJ2pzb24nO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5mb3JtKSB7XG4gICAgICAgIG9wdGlvbnMuYm9keSA9IHRoaXMuY3JlYXRlRm9ybURhdGEob3B0aW9ucy5mb3JtKTtcbiAgICAgICAgb3B0aW9ucy5oZWFkZXJzWydjb250ZW50LXR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMucGFyYW1zKSB7XG4gICAgICAgIGxldCBzdHIgPSB0aGlzLnBhcmFtc1RvUXVlcnkob3B0aW9ucy5wYXJhbXMpO1xuICAgICAgICBzdHIgJiYgKG9wdGlvbnMudXJsICs9IFwiP1wiICsgc3RyKTtcbiAgICAgIH1cbiAgICAgICAgICAgXG4gICAgICBsZXQgaGFzaCA9IG51bGw7XG4gICAgICBsZXQgY2FjaGUgPSB0eXBlb2Ygb3B0aW9ucy5jYWNoZSA9PSAnZnVuY3Rpb24nPyBvcHRpb25zLmNhY2hlKG9wdGlvbnMpOiBvcHRpb25zLmNhY2hlO1xuICAgICAgKCF3aW5kb3cuQUtJTElfU1NSICYmICFBa2lsaS5fX2luaXQpICYmIChjYWNoZSA9IHRydWUpO1xuXG4gICAgICBpZihvcHRpb25zLm1ldGhvZC50b1VwcGVyQ2FzZSgpID09ICdHRVQnICYmICghb3B0aW9ucy5ib2R5IHx8IHR5cGVvZiBvcHRpb25zLmJvZHkgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgIGhhc2ggPSB0aGlzLmNyZWF0ZUNhY2hlSGFzaCh7IFxuICAgICAgICAgIHVybDogb3B0aW9ucy51cmwsXG4gICAgICAgICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICB1c2VyOiBvcHRpb25zLnVzZXIsIFxuICAgICAgICAgIHBhc3N3b3JkOiBvcHRpb25zLnBhc3N3b3JkLCBcbiAgICAgICAgICBib2R5OiBvcHRpb25zLmJvZHkgXG4gICAgICAgIH0pOyAgICAgICAgXG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmKGNhY2hlICYmIGhhc2gpIHsgICAgICAgIFxuICAgICAgICBsZXQgX2NhY2hlID0gdGhpcy5nZXRDYWNoZShoYXNoKTtcbiAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgICAgIGlmKF9jYWNoZSAmJiAoY2FjaGUgPT09IHRydWUgfHwgbm93IC0gX2NhY2hlLmNyZWF0ZWRBdCA8PSBjYWNoZSkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLnRyYW5zZm9ybUFmdGVyKF9jYWNoZS5yZXN1bHQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihvcHRpb25zLm1ldGhvZCwgb3B0aW9ucy51cmwsIHRydWUsIG9wdGlvbnMudXNlciwgb3B0aW9ucy5wYXNzd29yZCk7XG5cbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCd0aW1lb3V0JykpIHtcbiAgICAgICAgeGhyLnRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNlVHlwZSkge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLndpdGhDcmVkZW50aWFscykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy53aXRoQ3JlZGVudGlhbHM7XG4gICAgICB9XG5cbiAgICAgIGxldCBoZWFkZXJLZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucy5oZWFkZXJzKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBoZWFkZXJLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsZXQgayA9IGhlYWRlcktleXNbaV07XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGssIG9wdGlvbnMuaGVhZGVyc1trXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5vblByb2dyZXNzID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMub25Qcm9ncmVzcyh4aHIpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgcmVzcG9uc2U6IHhoci5yZXNwb25zZSxcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgcmVhZHlTdGF0ZTogeGhyLnJlYWR5U3RhdGUsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB4aHIud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgIHJlc3BvbnNlVHlwZTogeGhyLnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICByZXNwb25zZVRleHQ6IHhoci5yZXNwb25zZVR5cGUgPT0gJ3RleHQnPyB4aHIucmVzcG9uc2VUZXh0OiAnJyxcbiAgICAgICAgICByZXNwb25zZVhNTDogeGhyLnJlc3BvbnNlVHlwZSA9PSAnZG9jdW1lbnQnPyB4aHIucmVzcG9uc2VYTUw6ICcnLFxuICAgICAgICAgIHJlc3BvbnNlVVJMOiB4aHIucmVzcG9uc2VVUkwsXG4gICAgICAgICAgdGltZW91dDogeGhyLnRpbWVvdXQsXG4gICAgICAgICAgaGVhZGVyczogdGhpcy5nZXRIZWFkZXJzKHhociksICAgICAgICAgXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnRyYW5zZm9ybUFmdGVyKHJlc3VsdCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhdHVzRXJyb3JQYXR0ZXJuICYmICh4aHIuc3RhdHVzICsgJycpLm1hdGNoKG9wdGlvbnMuc3RhdHVzRXJyb3JQYXR0ZXJuKSkge1xuICAgICAgICAgIGxldCBlcnIgPSBuZXcgRXJyb3IoYFJlcXVlc3QgdG8gXCIke29wdGlvbnMudXJsfVwiIHJldHVybnMgZmFpbHVyZSBzdGF0dXMgY29kZSAke3hoci5zdGF0dXN9YCk7XG4gICAgICAgICAgZXJyLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9IFxuXG4gICAgICAgIChjYWNoZSB8fCB3aW5kb3cuQUtJTElfU1NSKSAmJiBoYXNoICYmIHRoaXMuY3JlYXRlQ2FjaGUoaGFzaCwgcmVzdWx0KTtcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBSZXF1ZXN0IHRvIFwiJHtvcHRpb25zLnVybH1cIiB0aW1lZCBvdXRgKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IHJlamVjdDtcbiAgICAgIHhoci5zZW5kKG9wdGlvbnMuYm9keSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBoZWFkZXJzIG9mIGFuIFhNTEh0dHBSZXF1ZXN0IGluc3RhbmNlXG4gICAqIFxuICAgKiBAcGFyYW0ge1hNTEh0dHBSZXF1ZXN0fVxuICAgKi9cbiAgZ2V0SGVhZGVycyA9IGZ1bmN0aW9uKHhocikge1xuICAgIGxldCBoZWFkZXJzID0ge307XG4gICAgbGV0IHN0ciA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTsgIFxuICAgIGxldCBhcnIgPSBzdHIuc3BsaXQoJ1xcdTAwMGRcXHUwMDBhJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBsaW5lID0gYXJyW2ldO1xuICAgICAgbGV0IGluZGV4ID0gbGluZS5pbmRleE9mKCdcXHUwMDNhXFx1MDAyMCcpO1xuXG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGxldCBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIGxldCB2YWwgPSBsaW5lLnN1YnN0cmluZyhpbmRleCArIDIpO1xuICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjYWNoZVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldENhY2hlKGhhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5fX2NhY2hlW2hhc2hdIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBjYWNoZVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhhc2hcbiAgICogQHBhcmFtIHtvYmplY3R9IHJlc3VsdFxuICAgKi9cbiAgY3JlYXRlQ2FjaGUoaGFzaCwgcmVzdWx0KSB7XG4gICAgdGhpcy5fX2NhY2hlW2hhc2hdID0geyByZXN1bHQsIGNyZWF0ZWRBdDogbmV3IERhdGUoKS5nZXRUaW1lKCkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGNhY2hlXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuICAgKi9cbiAgcmVtb3ZlQ2FjaGUoaGFzaCkge1xuICAgIGRlbGV0ZSB0aGlzLl9fY2FjaGVbaGFzaF07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgaGFzaCBmb3Igc2F2aW5nIGluIHRoZSBjYWNoZVxuICAgKiBcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGNyZWF0ZUNhY2hlSGFzaChkYXRhKSB7XG4gICAgcmV0dXJuIHV0aWxzLmNyZWF0ZUhhc2goZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCB0aGUgb2JqZWN0IHRvIGEgcXVlcnkgc3RyaW5nXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHBhcmFtc1RvUXVlcnkob2JqKSB7XG4gICAgbGV0IHNlcCA9ICcmJztcbiAgICBsZXQgZXEgPSAnPSc7XG5cbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChrID0+IHtcbiAgICAgIGxldCBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChrKTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChrKTtcbiAgICAgICAgcmV0dXJuIG9ialtrXS5tYXAoKHYsIGkpID0+IGtzICsgYFske2l9XWAgKyBlcSArIGVuY29kZVVSSUNvbXBvbmVudCh2KSkuam9pbihzZXApO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob2JqW2tdICYmIHR5cGVvZiBvYmpba10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGxldCBvcHQgPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXMob2JqW2tdKS5tYXAoa2V5ID0+IG9wdC5wdXNoKGtzICsgYFske2tleX1dYCArIGVxICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtrXVtrZXldKSkpO1xuICAgICAgICByZXR1cm4gb3B0LmpvaW4oc2VwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlcSArIGVuY29kZVVSSUNvbXBvbmVudChvYmpba10pO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHRoZSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIHBhcmFtc0Zyb21RdWVyeShzdHIpIHtcbiAgICBsZXQgcXVlcnkgPSB7fTtcbiAgICBsZXQgYW1wcyA9IHN0ci5zcGxpdCgnJicpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhbXBzLmxlbmd0aDsgaSA8bDsgaSsrKSB7XG4gICAgICBsZXQgZXFzID0gIGFtcHNbaV0uc3BsaXQoJz0nKTtcbiAgICAgIGxldCBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoZXFzWzBdKTtcbiAgICAgIGxldCB2YWwgPSBkZWNvZGVVUklDb21wb25lbnQoZXFzWzFdKTtcblxuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHF1ZXJ5W2tleV0pKSB7XG4gICAgICAgIHF1ZXJ5W2tleV0ucHVzaCh2YWwpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAocXVlcnlba2V5XSkge1xuICAgICAgICBxdWVyeVtrZXldID0gW3F1ZXJ5W2tleV0sIHZhbF07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcXVlcnlba2V5XSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIG11bHRpcGFydCBmb3JtIGRhdGEgZnJvbSB0aGUgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICogQHBhcmFtIHtGb3JtRGF0YX0gW2RhdGFdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlXVxuICAgKiBAcmV0dXJucyB7Rm9ybURhdGF9XG4gICAqL1xuICBjcmVhdGVGb3JtRGF0YShvYmosIGRhdGEgPSBudWxsLCBuYW1lc3BhY2UgPSAnJykge1xuICAgIGxldCBmZCA9IGRhdGEgfHwgbmV3IEZvcm1EYXRhKCk7XG5cbiAgICBmb3IgKGxldCBrIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSAmJiBvYmpba10pIHtcbiAgICAgICAgbGV0IGtleSA9IG5hbWVzcGFjZT8gbmFtZXNwYWNlICsgJ1snICsgayArICddJzogaztcblxuICAgICAgICBpZiAob2JqW2tdIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgIGZkLmFwcGVuZChrZXksIG9ialtrXS50b0lTT1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KG9ialtrXSkpIHtcbiAgICAgICAgICB0aGlzLmNyZWF0ZUZvcm1EYXRhKG9ialtrXSwgZmQsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZmQuYXBwZW5kKGtleSwgb2JqW2tdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gdGhlIGRhdGEgYmVmb3JlIHRoZSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7WE1MSHR0cFJlcXVlc3R9IHhoclxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgdHJhbnNmb3JtQmVmb3JlKHhociwgb3B0aW9ucykge1xuICAgIHJldHVybiB7IHhociwgb3B0aW9ucyB9XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBkYXRhIGFmdGVyIHRoZSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSByZXN1bHRcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIHRyYW5zZm9ybUFmdGVyKHJlc3VsdCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICBkYXRhOiByZXN1bHQucmVzcG9uc2UsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgTWFrZSBhIEdFVCByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICBnZXQodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICBvcHRpb25zLnVybCA9IHVybDtcbiAgICBvcHRpb25zLm1ldGhvZCA9ICdHRVQnO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5KG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2VhIGEgREVMRVRFIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGRlbGV0ZSh1cmwsIG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMudXJsID0gdXJsO1xuICAgIG9wdGlvbnMubWV0aG9kID0gJ0RFTEVURSc7XG4gICAgcmV0dXJuIHRoaXMucXVlcnkob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogTWFrZSBhIFBPU1QgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgcG9zdCh1cmwsIG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMudXJsID0gdXJsO1xuICAgIG9wdGlvbnMubWV0aG9kID0gJ1BPU1QnO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5KG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgYSBQVVQgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgcHV0KHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucy51cmwgPSB1cmw7XG4gICAgb3B0aW9ucy5tZXRob2QgPSAnUFVUJztcbiAgICByZXR1cm4gdGhpcy5xdWVyeShvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAgTWFrZSBhIFBBVENIIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHBhdGNoKHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucy51cmwgPSB1cmw7XG4gICAgb3B0aW9ucy5tZXRob2QgPSAnUEFUQ0gnO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5KG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgYSBIRUFEIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGhlYWQodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICBvcHRpb25zLnVybCA9IHVybDtcbiAgICBvcHRpb25zLm1ldGhvZCA9ICdIRUFEJztcbiAgICByZXR1cm4gdGhpcy5xdWVyeShvcHRpb25zKTtcbiAgfVxufVxuXG5jb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoKTtcblxucmVxdWVzdC5fX2luc3RhbmNlcyA9IHt9O1xucmVxdWVzdC5fX2NhY2hlID0ge307XG5cbi8qKlxuICogQWRkIGEgbmV3IGluc3RhbmNlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7UmVxdWVzdH0gaW5zdGFuY2VcbiAqL1xucmVxdWVzdC5hZGRJbnN0YW5jZSA9IGZ1bmN0aW9uIChuYW1lLCBpbnN0YW5jZSkge1xuICB0aGlzLl9faW5zdGFuY2VzW25hbWVdID0gaW5zdGFuY2U7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5yZXF1ZXN0LnJlbW92ZUluc3RhbmNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMuX19pbnN0YW5jZXNbbmFtZV07XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWVzdCwgJ3VzZScsIHtcbiAgZ2V0OiAoKSA9PiB7XG4gICAgcmV0dXJuIHJlcXVlc3QuX19pbnN0YW5jZXM7XG4gIH1cbn0pO1xuXG5yZXF1ZXN0LlJlcXVlc3QgPSBSZXF1ZXN0O1xuZXhwb3J0IGRlZmF1bHQgcmVxdWVzdDsiLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEJhc2UgY29tcG9uZW50IHRvIHdvcmsgd2l0aCB0ZXh0IGVsZW1lbnRzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19pbnB1dH1cbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX3RleHRhcmVhfVxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9jb21wb25lbnRzI2RvY3NfY29udGVudGVkaXRhYmxlfVxuICogXG4gKiBAYXR0ciB7c3RyaW5nfSB2YWx1ZSAtIGFjdHVhbCB2YWx1ZVxuICogQGF0dHIge2Jvb2xlYW59IGZvY3VzIC0gc2V0IHRoZSBmb2N1cyBvciBub3RcbiAqIEBhdHRyIHtudW1iZXJ9IGRlYm91bmNlIC0gZGVib3VuY2UgZGVsYXlcbiAqIEBtZXNzYWdlIHt2b2lkfSBkZWJvdW5jZSAtIHNlbnQgb24gdGhlIGRlYm91bmNlIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2lucHV0fVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgdGhpcy52YWx1ZUtleSA9ICd2YWx1ZSc7XG4gICAgdGhpcy5kZWJvdW5jZUludGVydmFsID0gNTAwO1xuICB9XG5cbiAgY29tcGlsZWQoKSB7XG4gICAgaWYodGhpcy5lbC5oYXNBdHRyaWJ1dGUoJ29uLWRlYm91bmNlJykpIHtcbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1dGlscy5kZWJvdW5jZSgoKSA9PiB0aGlzLmF0dHJzLm9uRGVib3VuY2UudHJpZ2dlcih1bmRlZmluZWQsIHsgYnViYmxlczogdHJ1ZSB9KSwgdGhpcy5kZWJvdW5jZUludGVydmFsKSk7XG4gICAgfVxuXG4gICAgdGhpcy5hdHRyKCdmb2N1cycsIHRoaXMuc2V0Rm9jdXMpO1xuICAgIHRoaXMuYXR0cigndmFsdWUnLCB0aGlzLnNldFZhbHVlKTtcbiAgICB0aGlzLmF0dHIoJ2RlYm91bmNlJywgdGhpcy5zZXREZWJvdW5jZSk7XG4gIH1cblxuICBzZXREZWJvdW5jZShpbnRlcnZhbCkge1xuICAgIHRoaXMuZGVib3VuY2VJbnRlcnZhbCA9ICtpbnRlcnZhbDtcbiAgfVxuXG4gIHNldEZvY3VzKHZhbHVlKSB7XG4gICAgdmFsdWU/IHRoaXMuc2V0RWxlbWVudEZvY3VzKCk6IHRoaXMuc2V0RWxlbWVudEJsdXIoKTtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgKHRoaXMuZWxbdGhpcy52YWx1ZUtleV0gIT09IHZhbHVlKSAmJiAodGhpcy5lbFt0aGlzLnZhbHVlS2V5XSA9IHZhbHVlID09PSAwPyAnMCc6ICh2YWx1ZSB8fCAnJykpO1xuICB9XG5cbiAgc2V0RWxlbWVudEZvY3VzKCkge1xuICAgIHRoaXMuZWwuZm9jdXMoKTtcbiAgfVxuXG4gIHNldEVsZW1lbnRCbHVyKCkge1xuICAgIHRoaXMuZWwuYmx1cigpO1xuICB9XG59XG5cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCBBa2lsaSBmcm9tICcuLi9ha2lsaS5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgbG9vcHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2xvb3BzfVxuICogXG4gKiBAdGFnIGZvclxuICogQHNlbGVjdG9yIGZvcltpbl0sb2xbaW5dLHVsW2luXSx0aGVhZFtpbl0sdGJvZHlbaW5dLHRmb290W2luXVxuICogQGF0dHIge29iamVjdHxhcnJheX0gaW4gLSBkYXRhIHRvIGNyZWF0ZSB0aGUgbG9vcFxuICogQG1lc3NhZ2Uge29iamVjdHxhcnJheX0gb3V0IC0gc2VudCBvbiB0aGUgZGF0YSBjaGFuZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIG1hdGNoZXMgPSAnW2luXSc7XG4gIHN0YXRpYyBldmVudHMgPSBbJ291dCddO1xuXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdmb3InLCB0aGlzKTtcbiAgICBBa2lsaS5jb21wb25lbnQoJ29sJywgdGhpcyk7XG4gICAgQWtpbGkuY29tcG9uZW50KCd1bCcsIHRoaXMpO1xuICAgIEFraWxpLmNvbXBvbmVudCgndGhlYWQnLCB0aGlzKTtcbiAgICBBa2lsaS5jb21wb25lbnQoJ3Rib2R5JywgdGhpcyk7XG4gICAgQWtpbGkuY29tcG9uZW50KCd0Zm9vdCcsIHRoaXMpO1xuICAgIEFraWxpLmNvbXBvbmVudCgndHInLCB0aGlzLkxvb3ApO1xuICAgIEFraWxpLmNvbXBvbmVudCgnbG9vcCcsIHRoaXMuTG9vcCk7XG4gIH1cblxuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gICAgXG4gICAgdGhpcy5pdGVyYXRvcnMgPSBbXTtcbiAgICB0aGlzLml0ZXJhdG9yRWwgPSBudWxsO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIF9fcHJlcGFyZUF0dHJpYnV0ZUluKG5vZGUsIHZhbHVlKSB7ICBcbiAgICBpZigobm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5BdHRyKSAmJiBub2RlLm5hbWUgPT0gJ2luJykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5fX3ByZXBhcmVBdHRyaWJ1dGVJbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX19jb21wYXJlTm9kZVByb3BlcnR5VmFsdWUocHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBub2RlID0gcHJvcC5ub2RlO1xuXG4gICAgaWYoKG5vZGUgaW5zdGFuY2VvZiB3aW5kb3cuQXR0cikgJiYgbm9kZS5uYW1lID09ICdpbicgJiYgcHJvcC52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHN1cGVyLl9fY29tcGFyZU5vZGVQcm9wZXJ0eVZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBjcmVhdGVkKCkgeyAgICBcbiAgICB0aGlzLmNyZWF0ZUl0ZXJhdG9yKCk7ICAgIFxuICB9XG5cbiAgY29tcGlsZWQoKSB7XG4gICAgdGhpcy5hdHRyKCdpbicsIHRoaXMuZHJhdyk7XG4gIH1cblxuICByZW1vdmVkKCkge1xuICAgIHN1cGVyLnJlbW92ZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLml0ZXJhdG9yRWwgJiYgdGhpcy5pdGVyYXRvckVsLnJlbW92ZSgpO1xuICAgIGRlbGV0ZSB0aGlzLmh0bWw7XG4gICAgZGVsZXRlIHRoaXMuaXRlcmF0b3JzO1xuICAgIGRlbGV0ZSB0aGlzLml0ZXJhdG9yRWw7IFxuICAgIGRlbGV0ZSB0aGlzLl9faXRlcmF0b3I7XG4gICAgZGVsZXRlIHRoaXMuX192YWx1ZTtcbiAgfVxuXG4gIGNyZWF0ZUl0ZXJhdG9yKCkge1xuICAgIGxldCBlbDtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5lbC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBjaGlsZCA9IHRoaXMuZWwuY2hpbGRyZW5baV07XG5cbiAgICAgIGlmIChjaGlsZC5nZXRBdHRyaWJ1dGUoJ2NvbXBvbmVudCcpID09ICdsb29wJykge1xuICAgICAgICBlbCA9IGNoaWxkO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZWwgPSBjaGlsZDtcbiAgICB9XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xvb3AnKTsgICAgICBcbiAgICAgIGVsLmlubmVySFRNTCA9IHRoaXMuZWwuaW5uZXJIVE1MOyBcbiAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKGVsKTtcbiAgICB9XG5cbiAgICBsZXQgY29tcG9uZW50TmFtZSA9IGVsLmdldEF0dHJpYnV0ZSgnY29tcG9uZW50Jyk7XG5cbiAgICBpZiAoY29tcG9uZW50TmFtZSAhPSAnbG9vcCcpIHtcbiAgICAgIGxldCBjb21wb25lbnQgPSBBa2lsaS5jb21wb25lbnQoY29tcG9uZW50TmFtZSB8fCBlbC50YWdOYW1lKTtcblxuICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjb21wb25lbnQnLCAnbG9vcCcpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIShjb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgRm9yKSkge1xuICAgICAgICBsZXQgbWFzayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xvb3AnKTtcbiAgICAgICAgbWFzay5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgIGVsID0gbWFzaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmh0bWwgPSBlbC5pbm5lckhUTUw7XG4gICAgdGhpcy5pdGVyYXRvckVsID0gdGhpcy5jcmVhdGVJdGVyYXRvckVsZW1lbnQoZWwub3V0ZXJIVE1MKTtcbiAgICBlbC5yZW1vdmUoKTtcbiAgfVxuXG4gIGNyZWF0ZUl0ZXJhdG9yRWxlbWVudChodG1sKSB7XG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICBlbC5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiBlbC5jb250ZW50LmZpcnN0Q2hpbGQ7XG4gIH1cblxuICBsb29wKGtleSwgdmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5fX2luZGV4ID0gaW5kZXg7XG4gICAgdGhpcy5fX2tleSA9IGtleTtcbiAgICB0aGlzLl9fdmFsdWUgPSB2YWx1ZTsgICAgXG4gICAgdGhpcy5fX2hhc2ggPSB1dGlscy5jcmVhdGVIYXNoKHZhbHVlKTtcblxuICAgIGlmKHRoaXMuaXRlcmF0b3JzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBsZXQgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yc1tpbmRleF07ICAgICAgICBcbiAgICAgIGl0ZXJhdG9yLnNldEluZGV4KHRoaXMuX19pbmRleCA9PT0gaXRlcmF0b3IuaW5kZXgpOyAgICAgXG4gICAgICBpdGVyYXRvci5zZXRLZXkodGhpcy5fX2tleSA9PT0gaXRlcmF0b3Iua2V5KTtcbiAgICAgIGl0ZXJhdG9yLnNldFZhbHVlKHV0aWxzLmNvbXBhcmUodGhpcy5fX2hhc2gsIGl0ZXJhdG9yLmhhc2gpKTtcbiAgICAgIHRoaXMuX19wcm9taXNlcy5wdXNoKEFraWxpLmNvbXBpbGUoaXRlcmF0b3IuZWwsIHsgXG4gICAgICAgIHJlY29tcGlsZTogeyBcbiAgICAgICAgICBjaGVja0NoYW5nZXM6IHRydWVcbiAgICAgICAgfSBcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9XG4gICAgXG4gICAgbGV0IGVsID0gdGhpcy5pdGVyYXRvckVsLmNsb25lTm9kZSgpO1xuICAgIGVsLmlubmVySFRNTCA9IHRoaXMuaHRtbDtcbiAgICB0aGlzLmVsLmFwcGVuZENoaWxkKGVsKTtcbiAgICB0aGlzLl9fcHJvbWlzZXMucHVzaChBa2lsaS5jb21waWxlKGVsKSk7XG4gICAgdGhpcy5pdGVyYXRvcnMucHVzaChlbC5fX2FraWxpKTtcbiAgICByZXR1cm4gZWwuX19ha2lsaTtcbiAgfVxuXG4gIGRyYXcoZGF0YSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPSAnb2JqZWN0JyB8fCBkYXRhID09PSBudWxsKSB7XG4gICAgICBpZiAoQWtpbGkub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oYFwiRm9yXCIgY29tcG9uZW50IFwiaW5cIiBhdHRyaWJ1dGUgdmFsdWUgdHlwZSBtdXN0IGJlIGFuIG9iamVjdC9hcnJheWApOyAgICAgICAgXG4gICAgICB9XG5cbiAgICAgIGRhdGEgPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHRoaXMuZWwuY2hpbGRyZW4pOyBcbiAgICB0aGlzLml0ZXJhdG9ycy5zb3J0KChhLCBiKSA9PiBjaGlsZHJlbi5pbmRleE9mKGEuZWwpIC0gY2hpbGRyZW4uaW5kZXhPZihiLmVsKSk7XG4gICAgdGhpcy5fX2NoaWxkcmVuLnNvcnQoKGEsIGIpID0+IGNoaWxkcmVuLmluZGV4T2YoYSkgLSBjaGlsZHJlbi5pbmRleE9mKGIpKTtcbiAgICBjb25zdCBsb29wID0gKGtleSwgdmFsdWUsIGluZGV4KSA9PiB0aGlzLmxvb3Aoa2V5LCB2YWx1ZSwgaW5kZXgpLml0ZXJhdGUoaW5kZXgpO1xuXG4gICAgaWYoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgZm9yIChsZXQgbCA9IGRhdGEubGVuZ3RoOyBpbmRleCA8IGw7IGluZGV4KyspIHtcbiAgICAgICAgbG9vcChpbmRleCwgZGF0YVtpbmRleF0sIGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG5cbiAgICAgIGZvciAobGV0IGwgPSBrZXlzLmxlbmd0aDsgaW5kZXggPCBsOyBpbmRleCsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgbG9vcChrZXksIGRhdGFba2V5XSwgaW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmb3IgKGxldCBpID0gaW5kZXgsIGwgPSB0aGlzLml0ZXJhdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBpdGVyYXRvciA9IHRoaXMuaXRlcmF0b3JzW2ldO1xuICAgICAgaXRlcmF0b3IuX19yZW1vdmUoKTtcbiAgICAgIHRoaXMuaXRlcmF0b3JzLnNwbGljZShpLCAxKTtcbiAgICAgIGwtLTtcbiAgICAgIGktLTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5fX3Byb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIHRoaXMuYXR0cnMub25PdXQudHJpZ2dlcihkYXRhLCB7IGJ1YmJsZXM6IHRydWUgfSk7XG4gICAgfSk7ICAgIFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBpbml0aWFsIHN0YXRlXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLl9faXRlcmF0b3IgPSBudWxsO1xuICAgIHRoaXMuX19pbmRleCA9IDA7XG4gICAgdGhpcy5fX2tleSA9ICcnO1xuICAgIHRoaXMuX192YWx1ZSA9IG51bGw7XG4gICAgdGhpcy5fX2hhc2ggPSAnJztcbiAgICB0aGlzLl9fcHJvbWlzZXMgPSBbXTtcbiAgfSAgXG59XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBsb29wcy5cbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9jb21wb25lbnRzI2RvY3NfbG9vcHN9XG4gKiBcbiAqIEB0YWcgbG9vcFxuICogQHNlbGVjdG9yIGxvb3AsdHJcbiAqIEBhdHRyIEBzZWUgRm9yXG4gKiBAc2NvcGUgeyp9IGxvb3BWYWx1ZSAtIGRhdGEgaXRlbSdzIHZhbHVlIG9mIHRoZSBjdXJyZW50IGl0ZXJhdGlvbiBcbiAqIEBzY29wZSB7c3RyaW5nfG51bWJlcn0gbG9vcEtleSAtIGtleSBvZiB0aGUgaXRlcmF0aW9uXG4gKiBAc2NvcGUge251bWJlcn0gbG9vcEluZGV4IC0gaW5kZXggb2YgdGhlIGl0ZXJhdGlvblxuICovXG5leHBvcnQgY2xhc3MgTG9vcCBleHRlbmRzIEZvciB7XG4gIHN0YXRpYyBtYXRjaGVzID0gJyc7XG4gIHN0YXRpYyBjb250cm9sQXR0cmlidXRlcyA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgdGhpcy5mb3IgPSBudWxsO1xuICAgIHRoaXMuaHRtbCA9IHRoaXMuZWwuaW5uZXJIVE1MO1xuICAgIHRoaXMuaXNGb3IgPSB0aGlzLmVsLmhhc0F0dHJpYnV0ZSgnaW4nKTtcblxuICAgIGlmICghdGhpcy5pc0ZvciAmJiAhKHRoaXMuZWwucGFyZW50Tm9kZS5fX2FraWxpIGluc3RhbmNlb2YgRm9yKSkge1xuICAgICAgdGhpcy5jYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuX19wYXJlbnQuX19ha2lsaS5fX2l0ZXJhdG9yID0gdGhpcztcbiAgICB0aGlzLmZvciA9IHRoaXMuX19wYXJlbnQuX19ha2lsaTtcbiAgICB0aGlzLnNldEluZGV4KHRydWUpO1xuICAgIHRoaXMuc2V0S2V5KHRydWUpO1xuICAgIHRoaXMuc2V0VmFsdWUodHJ1ZSk7XG5cbiAgICBpZih0aGlzLmlzRm9yKSB7XG4gICAgICByZXR1cm4gc3VwZXIuY3JlYXRlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBpbGVkKCkge1xuICAgIGlmKHRoaXMuaXNGb3IpIHtcbiAgICAgIHJldHVybiBzdXBlci5jb21waWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZWQoKSB7XG4gICAgc3VwZXIucmVtb3ZlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGRlbGV0ZSB0aGlzLmZvcjtcbiAgICBkZWxldGUgdGhpcy52YWx1ZTtcbiAgfVxuXG4gIHNldEluZGV4KHRhcmdldCkge1xuICAgIHRoaXMuaW5kZXggPSB0aGlzLmZvci5fX2luZGV4O1xuICAgIHRoaXMuc2NvcGUuX19zZXQoJ2xvb3BJbmRleCcsIHRoaXMuaW5kZXgsIGZhbHNlLCB0YXJnZXQpO1xuICB9XG5cbiAgc2V0S2V5KHRhcmdldCkge1xuICAgIHRoaXMua2V5ID0gdGhpcy5mb3IuX19rZXk7XG4gICAgdGhpcy5zY29wZS5fX3NldCgnbG9vcEtleScsIHRoaXMua2V5LCBmYWxzZSwgdGFyZ2V0KTtcbiAgfVxuXG4gIHNldFZhbHVlKHRhcmdldCkge1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLmZvci5fX3ZhbHVlO1xuICAgIHRoaXMuc2NvcGUuX19zZXQoJ2xvb3BWYWx1ZScsIHRoaXMudmFsdWUsIHRydWUsIHRhcmdldCk7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5mb3IuX19oYXNoO1xuICB9XG5cbiAgaXRlcmF0ZSgpIHt9XG59XG5cbkZvci5Mb29wID0gTG9vcDsiLCJpbXBvcnQgQWtpbGkgZnJvbSAnLi9ha2lsaS5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5cbi8qKlxuICogU2NvcGUgY2xhc3MuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3Mvc2NvcGV9XG4gKlxuICogQWxsIHByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBfXyBhcmUgbm90IG1vbml0b3JlZC5cbiAqIFlvdSBjYW4gdXNlIHRoZW0gZm9yIGludGVybmFsIG1hbmlwdWxhdGlvbnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjb3BlIHtcbiAgc3RhdGljIG5lc3RlZFdhdGNoaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWUsIGVsLCBjb21wb25lbnQpIHtcbiAgICB0aGlzLl9fbmFtZSA9IG5hbWU7XG4gICAgdGhpcy5fX2VsID0gZWw7XG4gICAgdGhpcy5fX2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3Njb3BlJywgbmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBzY29wZSB2YWx1ZVxuICAgKiBcbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IGtleXNcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJpY3Q9ZmFsc2VdIC0gd2l0aG91dCBvYmplY3QgY29weWluZ1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBfX3NldChrZXlzLCB2YWx1ZSwgc3RyaWN0ID0gZmFsc2UsIHRhcmdldCA9IGZhbHNlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICBrZXlzID0gW2tleXNdO1xuICAgIH1cbiAgICBcbiAgICBBa2lsaS51bmlzb2xhdGUoKCkgPT4ge1xuICAgICAgc3RyaWN0ICYmICh0aGlzLl9fY29tcG9uZW50Ll9fZGlzYWJsZVByb3h5UmVkZWZpbmluZyA9IHRydWUpO1xuICAgICAgdXRpbHMuc2V0UHJvcGVydHlCeUtleXMoa2V5cywgdGFyZ2V0PyB0aGlzLl9fdGFyZ2V0OiB0aGlzLCAobGFzdCwgdmFsKSA9PiB7XG4gICAgICAgIGlmICghbGFzdCkge1xuICAgICAgICAgIHJldHVybiB2YWwgfHwge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHN0cmljdCAmJiAodGhpcy5fX2NvbXBvbmVudC5fX2Rpc2FibGVQcm94eVJlZGVmaW5pbmcgPSBmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBzY29wZVxuICAgKiBcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgX19yZW1vdmUoKSB7XG4gICAgQWtpbGkucmVtb3ZlU2NvcGUodGhpcy5fX25hbWUpO1xuXG4gICAgZm9yKGxldCBrZXkgaW4gdGhpcykge1xuICAgICAgaWYoIXRoaXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICB9XG4gIH1cbn0iLCIvKipcbiAqIENsYXNzIHRvIHdvcmsgd2l0aCBldmVudHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvZXZlbnRzfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBub2RlLCBlbCwgY29tcG9uZW50KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLmNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHRoZSBldmVudFxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGFcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3JjZV1cbiAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAqL1xuICB0cmlnZ2VyKGRhdGEsIG9wdGlvbnMgPSB7fSwgZm9yY2UgPSBmYWxzZSkge1xuICAgIGlmKHRoaXMuX19yZW1vdmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZvcmNlIHx8ICF0aGlzLmluRXZhbHVhdGluZygpKSB7XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KHRoaXMubmFtZSwgdGhpcy5wcmVwYXJlT3B0aW9ucyh7IGRldGFpbDogZGF0YSwgIC4uLm9wdGlvbnMgfSkpKTtcbiAgICB9ICAgXG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggdGhlIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IF9FdmVudCAtIGNsYXNzIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlXVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIGRpc3BhdGNoKF9FdmVudCwgb3B0aW9ucyA9IHt9LCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgaWYodGhpcy5fX3JlbW92ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZm9yY2UgfHwgIXRoaXMuaW5FdmFsdWF0aW5nKCkpIHtcbiAgICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChuZXcgX0V2ZW50KHRoaXMubmFtZSwgdGhpcy5wcmVwYXJlT3B0aW9ucyhvcHRpb25zKSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcmVwZXJlIHRoZSBldmVudCBvcHRpb25zXG4gICAqIFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFxuICAgKi9cbiAgcHJlcGFyZU9wdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gICAgb3B0aW9ucyA9IHsgYnViYmxlczogdHJ1ZSwgLi4ub3B0aW9ucyB9OyBcbiAgICB0aGlzLm5vZGUuX19jb21wb25lbnQuX19wcmVwYXJlQXR0cmlidXRlT3V0KHRoaXMubm9kZSwgb3B0aW9ucy5kZXRhaWwpO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBldmVudCBjYWxsYmFjayBkb2Vzbid0IHJ1biByZWN1cnNpdmVseVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGluRXZhbHVhdGluZygpIHtcbiAgICBsZXQgZGF0YSA9IHRoaXMuY29tcG9uZW50Ll9fZXZhbHVhdGluZ0V2ZW50O1xuXG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGEuZWwgPT09IHRoaXMuZWwgJiYgZGF0YS5ldmVudC50eXBlID09PSB0aGlzLm5hbWUgJiYgZGF0YS5jb21wb25lbnQgPT09IHRoaXMuY29tcG9uZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmQgdGhlIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gICAqL1xuICBiaW5kKGZuKSB7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKHRoaXMubmFtZSwgdGhpcy5mbiA9IGZuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmJpbmQgdGhlIGZ1bmN0aW9uXG4gICAqL1xuICB1bmJpbmQoKSB7XG4gICAgdGhpcy5mbiAmJiB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLCB0aGlzLmZuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGVtaXR0ZXJcbiAgICovXG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLnVuYmluZCgpO1xuICAgIGRlbGV0ZSB0aGlzLm5hbWU7XG4gICAgZGVsZXRlIHRoaXMubm9kZTtcbiAgICBkZWxldGUgdGhpcy5jb21wb25lbnRcbiAgICBkZWxldGUgdGhpcy5lbDtcbiAgICB0aGlzLl9fcmVtb3ZlZCA9IHRydWU7XG4gIH1cbn0iLCJpbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBTdG9yZSBhbGxvd3MgeW91IHRvIHNhdmUgYW5kIHNoYXJlIGRhdGEuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3Mvc3RvcmV9XG4gKi9cbmNvbnN0IHN0b3JlID0gbmV3IFByb3h5KHt9LCB7XG4gIGdldDogKHRhcmdldCwga2V5KSA9PiB7XG4gICAgaWYgKGtleSA9PSBcIl9fdGFyZ2V0XCIpIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICB9LFxuICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsdWUpID0+IHtcbiAgICBpZih1dGlscy5jb21wYXJlKHRhcmdldFtrZXldLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICB2YWx1ZSA9IHV0aWxzLmNvcHkodmFsdWUsIHsgcGxhaW46IHRydWUgfSk7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICBBa2lsaS5yb290ICYmIEFraWxpLnJvb3QuX19zdG9yZVRyaWdnZXJCeU5hbWUoa2V5LCB2YWx1ZSk7ICAgIFxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eTogKHRhcmdldCwga2V5KSA9PiB7XG4gICAgQWtpbGkucm9vdCAmJiBBa2lsaS5yb290Ll9fc3RvcmVUcmlnZ2VyQnlOYW1lKGtleSwgdW5kZWZpbmVkKTtcbiAgICBkZWxldGUgdGFyZ2V0W2tleV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzdG9yZTsiLCJpbXBvcnQgQWtpbGkgZnJvbSAnLi9ha2lsaS5qcyc7XG5cbmNvbnN0IG9iaiA9IHt9O1xuXG4vKipcbiAqIEdsb2JhbHMgaXMgZm9yIHVzaW5nIHRoZSBjdXN0b20gdmFyaWFibGVzIGluIGh0bWxcbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9zY29wZSNkb2NzX2dsb2JhbHN9XG4gKi9cbmNvbnN0IGdsb2JhbHMgPSBuZXcgUHJveHkob2JqLCB7XG4gIGdldDogKHRhcmdldCwga2V5KSA9PiB7XG4gICAgaWYoa2V5ID09ICdfX3RhcmdldCcpIHtcbiAgICAgIHJldHVybiBvYmpcbiAgICB9ICAgXG4gICAgXG4gICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICB9LFxuICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsdWUpID0+IHtcbiAgICB0YXJnZXRba2V5XSA9IEFraWxpLndyYXAodmFsdWUsIHsgdGFnOiBrZXkgfSk7ICAgIFxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eTogKHRhcmdldCwga2V5KSA9PiB7ICAgXG4gICAgQWtpbGkucmVtb3ZlVGFnKGtleSk7XG4gICAgZGVsZXRlIHRhcmdldFtrZXldO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsczsiLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnLi4vc2VydmljZXMvcmVxdWVzdC5qcyc7XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIHdvcmsgd2l0aCByb3V0ZXIgdGVtcGxhdGVzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL3JvdXRpbmcjZG9jc190ZW1wbGF0ZXN9XG4gKiBcbiAqIEB0YWcgcm91dGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGUgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgZGVmaW5lKCkge1xuICAgIEFraWxpLmNvbXBvbmVudCgncm91dGUnLCB0aGlzKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJyc7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtUcmFuc2l0aW9ufSB0cmFuc2l0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9hZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHNldFRyYW5zaXRpb24odHJhbnNpdGlvbiwgbG9hZCA9IHRydWUpIHtcbiAgICBsZXQgc3RhdGUgPSB0cmFuc2l0aW9uLnBhdGguc3RhdGU7XG5cbiAgICBjb25zdCBnZXRQYXJlbnRTY29wZVRyYW5zaXRpb24gPSBwYXRoID0+IHtcbiAgICAgIGlmIChwYXRoLnBhcmVudCkge1xuICAgICAgICBpZiAocGF0aC5wYXJlbnQuY29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHBhdGgucGFyZW50LmNvbXBvbmVudC5fX3Njb3BlLl9fdHJhbnNpdGlvbi5wYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldFBhcmVudFNjb3BlVHJhbnNpdGlvbihwYXRoLnBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBpbGUgPSBodG1sID0+IHsgXG4gICAgICB0aGlzLmVtcHR5KCk7ICBcbiAgICAgIGxldCBuYW1lID0gJ2NvbXBvbmVudCc7XG5cbiAgICAgIGlmKHN0YXRlLmNvbXBvbmVudCkge1xuICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XG4gICAgXG4gICAgICAgIGZvcihsZXQga2V5IGluIEFraWxpLl9fY29tcG9uZW50cykge1xuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IEFraWxpLl9fY29tcG9uZW50c1trZXldO1xuICAgIFxuICAgICAgICAgIGlmKGNvbXBvbmVudCA9PT0gc3RhdGUuY29tcG9uZW50KSB7XG4gICAgICAgICAgICBuYW1lID0ga2V5OyAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZighZXhpc3RzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb3V0ZXIgc3RhdGUgXCIke3N0YXRlLm5hbWV9XCIgaGFzIG5vIGRlZmluZWQgY29tcG9uZW50YClcbiAgICAgICAgfSBcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSBgPCR7IG5hbWUgfT4keyBodG1sIH08LyR7IG5hbWUgfT5gO1xuICAgICAgcmV0dXJuIEFraWxpLmNvbXBpbGUodGhpcy5lbCwgeyByZWNvbXBpbGU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fX3Njb3BlLl9fdHJhbnNpdGlvbiA9IHsgIFxuICAgICAgcGFyZW50OiBnZXRQYXJlbnRTY29wZVRyYW5zaXRpb24odHJhbnNpdGlvbi5wYXRoKSwgICBcbiAgICAgIHN0YXRlOiB0cmFuc2l0aW9uLnBhdGguc3RhdGUsXG4gICAgICBkYXRhOiB0cmFuc2l0aW9uLnBhdGguZGF0YSxcbiAgICAgIHVybDogdHJhbnNpdGlvbi5wYXRoLnVybCxcbiAgICAgIHBhcmFtczogdHJhbnNpdGlvbi5wYXRoLnBhcmFtcyxcbiAgICAgIHF1ZXJ5OiB0cmFuc2l0aW9uLnBhdGgucXVlcnksXG4gICAgICBoYXNoOiB0cmFuc2l0aW9uLnBhdGguaGFzaFxuICAgIH07XG5cbiAgICBpZiAoIWxvYWQpIHtcbiAgICAgIHJldHVybiBBa2lsaS5jb21waWxlKHRoaXMuZWwsIHsgcmVjb21waWxlOiB7IGNoZWNrQ2hhbmdlczogdHJ1ZSB9IH0pO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgIGlmIChzdGF0ZS50ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUudGVtcGxhdGU7XG4gICAgICB9XG4gIFxuICAgICAgaWYgKHN0YXRlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0LmdldChzdGF0ZS50ZW1wbGF0ZVVybCkudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgICAgfVxuICAgIH0pLnRoZW4oaHRtbCA9PiBjb21waWxlKGh0bWwpKTtcbiAgfVxufSIsImltcG9ydCBBa2lsaSBmcm9tICcuLi9ha2lsaS5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnLi9yZXF1ZXN0LmpzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuLi9jb21wb25lbnRzL3JvdXRlLmpzJztcblxuLyoqXG4gKiBUcmFuc2l0aW9uIGNsYXNzLlxuICogVGhlIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaW5jbHVkZXMgdGhlIGxhc3QgYWN0dWFsIHJvdXRlciB0cmFuc2l0aW9uIGluZm9ybWF0aW9uLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL3JvdXRpbmcjZG9jc190cmFuc2l0aW9ufVxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHVybCwgcHJldmlvdXMgPSBudWxsKSB7ICBcbiAgICB0aGlzLnVybCA9IHVybDsgIFxuICAgIHRoaXMucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICB0aGlzLnBhdGggPSBudWxsO1xuICAgIHRoaXMucm91dGVzID0gW107XG4gICAgdGhpcy5zdGF0ZXMgPSB7fTtcbiAgICB0aGlzLl9fY2FuY2VsbGVkID0gZmFsc2U7ICAgIFxuICAgIHRoaXMuX19maW5pc2hlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZGlyZWN0IHRvIGFub3RoZXIgc3RhdGVcbiAgICogXG4gICAqIEBzZWUgcm91dGVyLnN0YXRlXG4gICAqL1xuICByZWRpcmVjdChzdGF0ZSwgcGFyYW1zID0ge30sIHF1ZXJ5ID0ge30sIGhhc2ggPSB1bmRlZmluZWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMgPSB7IC4uLnJvdXRlci50cmFuc2l0aW9uLnBhdGgub3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuY2FuY2VsKCk7ICAgXG4gICAgcmV0dXJuIHJvdXRlci5zdGF0ZS5jYWxsKHJvdXRlciwgc3RhdGUsIHBhcmFtcywgcXVlcnksIGhhc2gsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbG9hZCB0aGUgY3VycmVudCBzdGF0ZVxuICAgKiBcbiAgICogQHNlZSBUcmFuc2l0aW9uLnByb3RvdHlwZS5yZWRpcmVjdFxuICAgKi9cbiAgcmVsb2FkKHBhcmFtcyA9IHt9LCBxdWVyeSA9IHt9LCBoYXNoID0gdW5kZWZpbmVkLCBvcHRpb25zID0ge30pIHtcbiAgICBwYXJhbXMgPSB7IC4uLnRoaXMucGF0aC5wYXJhbXMsIC4uLnBhcmFtcyB9O1xuICAgIHF1ZXJ5ID0geyAuLi50aGlzLnBhdGgucXVlcnksIC4uLnF1ZXJ5IH07XG4gICAgaGFzaCA9IGhhc2ggPT09IHVuZGVmaW5lZD8gdGhpcy5wYXRoLmhhc2g6IGhhc2g7XG4gICAgcmV0dXJuIHRoaXMucmVkaXJlY3QodGhpcy5wYXRoLnN0YXRlLm5hbWUsIHBhcmFtcywgcXVlcnksIGhhc2gsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCBwYXRoXG4gICAqIFxuICAgKiBAcGFyYW0ge29iamVjdH0gcGF0aCBcbiAgICovXG4gIHNldFBhdGgocGF0aCkge1xuICAgIHBhdGgucGFyZW50ID0gdGhpcy5wYXRoIHx8IG51bGw7XG4gICAgdGhpcy5wYXRoID0geyBwYXJhbXM6IHt9LCBxdWVyeToge30sIC4uLnBhdGggfTtcbiAgICB0aGlzLnJvdXRlcy5wdXNoKHRoaXMucGF0aCk7XG4gICAgdGhpcy5zdGF0ZXNbdGhpcy5wYXRoLnN0YXRlLm5hbWVdID0gdGhpcy5wYXRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHJvdXRlIGJ5IHRoZSBzdGF0ZVxuICAgKiAgXG4gICAqIEBwYXJhbSB7Kn0gc3RhdGUgXG4gICAqL1xuICBnZXRSb3V0ZShzdGF0ZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5yb3V0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgcm91dGUgPSB0aGlzLnJvdXRlc1tpXTtcblxuICAgICAgaWYgKHJvdXRlLnN0YXRlID09PSBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gcm91dGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgaXQgaGFzIHRoZSBzdGF0ZVxuICAgKiBcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIFxuICAgKi9cbiAgaGFzU3RhdGUoc3RhdGUpIHtcbiAgICByZXR1cm4gISF0aGlzLnN0YXRlc1tzdGF0ZS5uYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgcm91dGUgaXMgY2hhbmdlZFxuICAgKiBcbiAgICogQHBhcmFtIHtvYmplY3R9IHJvdXRlXG4gICAqL1xuICBpc1JvdXRlQ2hhbmdlZChyb3V0ZSkge1xuICAgIGlmKCF0aGlzLnByZXZpb3VzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IHJvdXRlLnN0YXRlO1xuXG4gICAgaWYoIXRoaXMucHJldmlvdXMuaGFzU3RhdGUoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJhbUtleXMgPSBbXTtcbiAgICBzdGF0ZS5mdWxsUGF0dGVybi5yZXBsYWNlKHJvdXRlci5fX3BhcmFtUmVnZXgsIChtLCBmLCB2KSA9PiBwYXJhbUtleXMucHVzaCh2KSk7XG4gICAgXG4gICAgZm9yKGxldCBrZXkgaW4gc3RhdGUucGFyYW1zKSB7XG4gICAgICBpZihwYXJhbUtleXMuaW5kZXhPZihrZXkpID09IC0xKSB7XG4gICAgICAgIHBhcmFtS2V5cy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcXVlcnlLZXlzID0gT2JqZWN0LmtleXMoc3RhdGUucXVlcnkpO1xuICAgIGNvbnN0IHdhdGNoSGFzaCA9IHN0YXRlLmhhc2ggIT09IHVuZGVmaW5lZDsgICAgXG4gICAgY29uc3QgcHJldlJvdXRlID0gdGhpcy5wcmV2aW91cy5nZXRSb3V0ZShzdGF0ZSk7IFxuXG4gICAgY29uc3QgcHJldiA9IHsgXG4gICAgICBwYXJhbXM6IHV0aWxzLmluY2x1ZGVLZXlzKHByZXZSb3V0ZS5wYXJhbXMsIHBhcmFtS2V5cyksIFxuICAgICAgcXVlcnk6IHV0aWxzLmluY2x1ZGVLZXlzKHByZXZSb3V0ZS5xdWVyeSwgcXVlcnlLZXlzKVxuICAgIH07XG5cbiAgICBjb25zdCBjdXJyZW50ID0ge1xuICAgICAgcGFyYW1zOiB1dGlscy5pbmNsdWRlS2V5cyhyb3V0ZS5wYXJhbXMsIHBhcmFtS2V5cyksXG4gICAgICBxdWVyeTogdXRpbHMuaW5jbHVkZUtleXMocm91dGUucXVlcnksIHF1ZXJ5S2V5cylcbiAgICB9XG5cbiAgICBpZih3YXRjaEhhc2gpIHtcbiAgICAgIHByZXYuaGFzaCA9IHByZXZSb3V0ZS5oYXNoO1xuICAgICAgY3VycmVudC5oYXNoID0gcm91dGUuaGFzaDtcbiAgICB9XG5cbiAgICByZXR1cm4gIXV0aWxzLmNvbXBhcmUocHJldiwgY3VycmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIHRoZSBjdXJyZW50IHRyYW5zaXRpb25cbiAgICovXG4gIGNhbmNlbCgpIHsgICBcbiAgICB0aGlzLl9fY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICB0aGlzLmZpbmlzaCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmlzaCB0aGUgdHJhbnNpdGlvblxuICAgKi9cbiAgZmluaXNoKCkge1xuICAgIHRoaXMuX19maW5pc2hlZCA9IHRydWU7XG4gICAgZGVsZXRlIHRoaXMucHJldmlvdXM7XG4gICAgY29uc3QgaW5kZXggPSByb3V0ZXIuX19xdWV1ZS5pbmRleE9mKHRoaXMpO1xuICAgIGluZGV4ID49IDAgJiYgcm91dGVyLl9fcXVldWUuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufVxuXG4vKipcbiAqIEFraWxpIHJvdXRlclxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL3JvdXRpbmd9XG4gKi9cbmNvbnN0IHJvdXRlciA9IHt9O1xuXG5yb3V0ZXIuYmFzZVVybCA9IFwiL1wiO1xucm91dGVyLnN0YXRlcyA9IFtdO1xucm91dGVyLmhhc2hNb2RlID0gdHJ1ZTtcbnJvdXRlci50cmFuc2l0aW9uID0gbnVsbDtcbnJvdXRlci5fX3F1ZXVlID0gW107XG5yb3V0ZXIuX19yZWRpcmVjdHMgPSAwO1xucm91dGVyLl9faW5pdCA9IGZhbHNlO1xucm91dGVyLl9fcGFyYW1SZWdleCA9IC8oXFwvPzooW1xcd1xcZC1dKykpL2c7XG5yb3V0ZXIuX19yb3V0ZVNlbGVjdG9yID0gYyA9PiBjIGluc3RhbmNlb2YgUm91dGU7XG5cbi8qKlxuICogQWRkIGEgbmV3IHN0YXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBzdGF0ZSBuYW1lLiBUbyBzZXQgcGFyZW50cyB5b3UgY2FuIHVzZSBkb3QsIGUuZy4gJ2FwcC5hcnRpY2xlLmVkaXQnXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIHVybCBwYXR0ZXJuIGxpa2UgJ2FwcC9hcnRpY2xlLzppZCdcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtyb3V0ZXJ9XG4gKi9cbnJvdXRlci5hZGQgPSBmdW5jdGlvbiAobmFtZSwgcGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmKHR5cGVvZiBuYW1lID09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IG5hbWU7XG4gICAgcGF0dGVybiA9IG9wdGlvbnMucGF0dGVybjtcbiAgICBuYW1lID0gb3B0aW9ucy5zdGF0ZTtcbiAgICBkZWxldGUgb3B0aW9ucy5wYXR0ZXJuO1xuICAgIGRlbGV0ZSBvcHRpb25zLnN0YXRlO1xuICB9XG5cbiAgaWYoIW5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJvdXRlciBzdGF0ZSBtdXN0IGhhdmUgYSBuYW1lYCk7XG4gIH1cblxuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgdGVtcGxhdGVVcmw6ICcnLFxuICAgIGFic3RyYWN0OiBmYWxzZSxcbiAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgcGFyYW1zOiB7fSxcbiAgICBxdWVyeToge30sXG4gICAgaGFuZGxlcjogKCkgPT4ge30sXG4gIH07XG5cbiAgaWYoQWtpbGkub3B0aW9ucy5kZWJ1ZyAmJiBvcHRpb25zLmNvbXBvbmVudCAmJiAob3B0aW9ucy50ZW1wbGF0ZSB8fCBvcHRpb25zLnRlbXBsYXRlVXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKGBSb3V0ZXIgc3RhdGUgXCIke25hbWV9XCIgbXVzdCBvbmx5IGhhdmUgYSBjb21wb25lbnQgb3IgdGVtcGxhdGUgb3B0aW9uYCk7XG4gIH0gXG5cbiAgaWYgKCFvcHRpb25zLnRlbXBsYXRlICYmICFvcHRpb25zLnRlbXBsYXRlVXJsICYmICFvcHRpb25zLmNvbXBvbmVudCkge1xuICAgIG9wdGlvbnMuYWJzdHJhY3QgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHRoaXMuaGFzKG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBSb3V0ZXIgc3RhdGUgXCIke25hbWV9XCIgaXMgYWxyZWFkeSBleGlzdHNgKVxuICB9XG5cbiAgdGhpcy5zZXRTdGF0ZShuYW1lLCBwYXR0ZXJuLCB7Li4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnN9KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgc3RhdGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5yb3V0ZXIucmVtb3ZlID0gZnVuY3Rpb24obmFtZSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh0aGlzLnN0YXRlc1tpXS5uYW1lID09IG5hbWUpIHtcbiAgICAgIHRoaXMuc3RhdGVzLnNwbGljZShpLCAxKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayB0aGUgc3RhdGUgZXhpc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5yb3V0ZXIuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh0aGlzLnN0YXRlc1tpXS5uYW1lID09IG5hbWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBzdGF0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIC0gcGFyYW1zIGZvciBzdGF0ZSB7aWQ6IDF9ID0+ICcvYXBwLzppZCcgPT4gJy9hcHAvMSdcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcXVlcnldIC0gcXVlcnkge3g6IDF9ID0+ICcvYXBwLz94PTEnXG4gKiBAcGFyYW0ge3N0cmluZ30gW2hhc2hdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKi9cbnJvdXRlci5zdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgcGFyYW1zID0ge30sIHF1ZXJ5ID0ge30sIGhhc2ggPSB1bmRlZmluZWQsIG9wdGlvbnMgPSB7fSkgeyAgXG4gIHR5cGVvZiBzdGF0ZSAhPT0gJ29iamVjdCcgJiYgKHN0YXRlID0gdGhpcy5nZXRTdGF0ZShzdGF0ZSkpO1xuICBcbiAgaWYgKCFzdGF0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm90IGZvdW5kIHJvdXRlIHN0YXRlIHdpdGggbmFtZSAke3N0YXRlfWApO1xuICB9XG5cbiAgb3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9O1xuICBvcHRpb25zLm1hbnVhbCA9IHRydWU7XG4gICh7IHBhcmFtcywgcXVlcnksIGhhc2gsIG9wdGlvbnMgfSA9IHRoaXMucHJlcGFyZVN0YXRlQXJncyhzdGF0ZSwgcGFyYW1zLCBxdWVyeSwgaGFzaCwgb3B0aW9ucywgZmFsc2UpKTsgIFxuICBsZXQgdXJsID0gdGhpcy5jcmVhdGVTdGF0ZVVybChzdGF0ZSwgcGFyYW1zLCBxdWVyeSwgaGFzaCwgb3B0aW9ucyk7ICAgIFxuICB0aGlzLmlzb2xhdGUoKCkgPT4gdGhpcy5zZXRVcmwodXJsKSk7XG4gIHJldHVybiB0aGlzLmNoYW5nZVN0YXRlKG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBHbyBiYWNrXG4gKi9cbnJvdXRlci5iYWNrID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeS5iYWNrLmFwcGx5KHdpbmRvdy5oaXN0b3J5LCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBHbyB0byBzb21lIHBvc2l0aW9uXG4gKi9cbnJvdXRlci5nbyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkuZ28uYXBwbHkod2luZG93Lmhpc3RvcnksIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIEdvIGZvcndhcmRcbiAqL1xucm91dGVyLmZvcndhcmQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LmZvcndhcmQuYXBwbHkod2luZG93Lmhpc3RvcnksIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIENoYW5nZSB0aGUgc3RhdGUgYnkgdGhlIHVybFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqL1xucm91dGVyLmxvY2F0aW9uID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucyA9IHt9KSB7XG4gIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgb3B0aW9ucy5tYW51YWwgPSB0cnVlO1xuICB0aGlzLmlzb2xhdGUoKCkgPT4gdGhpcy5zZXRVcmwodXJsKSk7ICBcbiAgcmV0dXJuIHRoaXMuY2hhbmdlU3RhdGUob3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIHJvdXRlci4gXG4gKiBNdXN0IGJlIGNhbGxlZCBiZWZvcmUgQWtpbGkuaW5pdCgpXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0VXJsXVxuICogQHBhcmFtIHtib29sZWFufSBbaGFzaE1vZGU9dHJ1ZV1cbiAqL1xucm91dGVyLmluaXQgPSBmdW5jdGlvbiAoZGVmYXVsdFVybCA9ICcnLCBoYXNoTW9kZSA9IHRydWUpIHtcbiAgbGV0IG9sZFB1c2hTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZTtcblxuICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgcmVzID0gb2xkUHVzaFN0YXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICByb3V0ZXIuY2hhbmdlU3RhdGUoKS5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIHRoaXMuX19vblN0YXRlQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIHRoaXMuY2hhbmdlU3RhdGUoKS5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfTtcblxuICB0aGlzLmRlZmF1bHRVcmwgPSBkZWZhdWx0VXJsO1xuICB0aGlzLmhhc2hNb2RlID0gaGFzaE1vZGU7ICAgIFxuXG4gIHRoaXMuc3RhdGVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBhID0gYS5uYW1lLnNwbGl0KCcuJykubGVuZ3RoO1xuICAgIGIgPSBiLm5hbWUuc3BsaXQoJy4nKS5sZW5ndGg7XG4gICAgcmV0dXJuIGEgLSBiO1xuICB9KTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHRoaXMuaW5pdFN0YXRlKHRoaXMuc3RhdGVzW2ldKTtcbiAgfVxuXG4gIGlmICghdGhpcy5zdGF0ZXMubGVuZ3RoICYmIEFraWxpLm9wdGlvbnMuZGVidWcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihgWW91IGRpZG4ndCBhZGQgYW55IHJvdXRlcyB0byB0aGUgcm91dGVyYCk7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLl9fb25TdGF0ZUNoYW5nZUhhbmRsZXIpO1xuICB0aGlzLl9faW5pdCA9IHRydWU7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIHN0YXRlIFxuICogXG4gKiBAcGFyYW0ge29iamVjdH0gc3RhdGUgXG4gKi9cbnJvdXRlci5pbml0U3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgbGV0IHBhcmVudHMgPSBbXTtcbiAgc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgcGFyZW50cyA9IHN0YXRlLm5hbWUuc3BsaXQoJy4nKTtcbiAgcGFyZW50cy5wb3AoKTtcbiAgc3RhdGUubGV2ZWwgPSBzdGF0ZS5hYnN0cmFjdD8gbnVsbDogcGFyZW50cy5sZW5ndGg7XG5cbiAgaWYgKHBhcmVudHMubGVuZ3RoKSB7XG4gICAgbGV0IHBhcmVudE5hbWUgPSBwYXJlbnRzLmpvaW4oJy4nKTtcbiAgICBsZXQgcGFyZW50ID0gdGhpcy5nZXRTdGF0ZShwYXJlbnROYW1lKTtcblxuICAgIGlmICghcGFyZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBmb3VuZCBwYXJlbnQgcm91dGUgc3RhdGUgXCIke3BhcmVudE5hbWV9XCIgZm9yIFwiJHtzdGF0ZS5uYW1lfVwiYClcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUubGV2ZWwgIT09IG51bGwgJiYgcGFyZW50LmFic3RyYWN0KSB7XG4gICAgICBzdGF0ZS5sZXZlbC0tO1xuICAgIH1cblxuICAgIHN0YXRlLmZ1bGxQYXR0ZXJuID0gdGhpcy5zcGxpdFNsYXNoZXMocGFyZW50LmZ1bGxQYXR0ZXJuICsgJy8nICsgc3RhdGUucGF0dGVybik7XG4gICAgcGFyZW50LmNoaWxkcmVuLnB1c2goc3RhdGUpO1xuICB9XG4gIGVsc2Uge1xuICAgIHN0YXRlLmZ1bGxQYXR0ZXJuID0gc3RhdGUucGF0dGVybjtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgc3RhdGUgYnkgdGhlIG5hbWVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge29iamVjdHxudWxsfVxuICovXG5yb3V0ZXIuZ2V0U3RhdGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGVzW2ldO1xuXG4gICAgaWYgKHN0YXRlLm5hbWUgPT0gbmFtZSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHN0YXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICovXG5yb3V0ZXIuc2V0U3RhdGUgPSBmdW5jdGlvbiAobmFtZSwgcGF0dGVybiwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBzdGF0ZSA9IHsuLi5vcHRpb25zLCBuYW1lLCBwYXR0ZXJufTtcbiAgdGhpcy5zdGF0ZXMucHVzaChzdGF0ZSk7XG4gIHRoaXMuX19pbml0ICYmIHRoaXMuaW5pdFN0YXRlKHN0YXRlKTtcbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIHN0YXRlIGJ5IHRoZSBuYW1lXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xucm91dGVyLnJlbW92ZVN0YXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLnN0YXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlc1tpXTtcblxuICAgIGlmIChzdGF0ZS5uYW1lID09IG5hbWUpIHtcbiAgICAgIHRoaXMuc3RhdGVzLnNwbGljZShpLCAxKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTZXQgdGhlIHVybFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqL1xucm91dGVyLnNldFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdGhpcy5oYXNoTW9kZT8gdGhpcy5zZXRIYXNoVXJsKHVybCk6IHRoaXMuc2V0SGlzdG9yeVVybCh1cmwpO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHVybCB1c2luZyB0aGUgaGlzdG9yeVxuICpcbiAqIEBwYXJhbSB1cmxcbiAqL1xucm91dGVyLnNldEhpc3RvcnlVcmwgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdXJsKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSB1cmwgdXNpbmcgdGhlIGhhc2hcbiAqXG4gKiBAcGFyYW0gdXJsXG4gKi9cbnJvdXRlci5zZXRIYXNoVXJsID0gZnVuY3Rpb24gKHVybCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjJyArICh1cmwgfHwgJy8nKTtcbn07XG5cbi8qKlxuICogUmVwbGFjZSB0aGUgdXJsXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICovXG5yb3V0ZXIucmVwbGFjZVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdGhpcy5oYXNoTW9kZT8gdGhpcy5yZXBsYWNlSGFzaFVybCh1cmwpOiB0aGlzLnJlcGxhY2VIaXN0b3J5VXJsKHVybCk7XG59O1xuXG4vKipcbiAqIFJlcGxhY2UgdGhlIHVybCB1c2luZyB0aGUgaGlzdG9yeVxuICpcbiAqIEBwYXJhbSB1cmxcbiAqL1xucm91dGVyLnJlcGxhY2VIaXN0b3J5VXJsID0gZnVuY3Rpb24gKHVybCkge1xuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVybCk7XG59O1xuXG4vKipcbiAqIFJlcGxhY2UgdGhlIHVybCB1c2luZyB0aGUgaGFzaFxuICpcbiAqIEBwYXJhbSB1cmxcbiAqL1xucm91dGVyLnJlcGxhY2VIYXNoVXJsID0gZnVuY3Rpb24gKHVybCkge1xuICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodW5kZWZpbmVkLCB1bmRlZmluZWQsICcjJyArICh1cmwgfHwgJy8nKSk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgdXJsXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xucm91dGVyLmdldFVybCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaGFzaE1vZGUgPyB0aGlzLmdldEhhc2hVcmwoKSA6IHRoaXMuZ2V0SGlzdG9yeVVybCgpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHVybCB1c2luZyB0aGUgaGlzdG9yeVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnJvdXRlci5nZXRIaXN0b3J5VXJsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHVybCB1c2luZyB0aGUgaGFzaFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnJvdXRlci5nZXRIYXNoVXJsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgvXiMvLCAnJyk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcXVlcnkgcGFyYW1zXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xucm91dGVyLmdldFVybFF1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmhhc2hNb2RlID8gdGhpcy5nZXRIYXNoVXJsUXVlcnkoKSA6IHRoaXMuZ2V0SGlzdG9yeVVybFF1ZXJ5KCk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcXVlcnkgcGFyYW1zIHVzaW5nIHRoZSBoaXN0b3J5XG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xucm91dGVyLmdldEhpc3RvcnlVcmxRdWVyeSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcmVxdWVzdC5wYXJhbXNGcm9tUXVlcnkod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBxdWVyeSBwYXJhbXMgdXNpbmcgdGhlIGhhc2hcbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5yb3V0ZXIuZ2V0SGFzaFVybFF1ZXJ5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByZXF1ZXN0LnBhcmFtc0Zyb21RdWVyeSgod2luZG93LmxvY2F0aW9uLmhhc2guc3BsaXQoJz8nKVsxXSB8fCAnJykpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIHVybFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXVxuICogQHBhcmFtIHtvYmplY3R9IFtxdWVyeV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaGFzaF1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZXBhcmVdXG4gKi9cbnJvdXRlci5jcmVhdGVTdGF0ZVVybCA9IGZ1bmN0aW9uIChzdGF0ZSwgcGFyYW1zID0ge30sIHF1ZXJ5ID0ge30sIGhhc2ggPSB1bmRlZmluZWQsIG9wdGlvbnMgPSB7fSwgcHJlcGFyZSA9IHRydWUpIHtcbiAgdHlwZW9mIHN0YXRlICE9PSAnb2JqZWN0JyAmJiAoc3RhdGUgPSB0aGlzLmdldFN0YXRlKHN0YXRlKSk7XG4gIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgXG4gIGlmKHByZXBhcmUpIHtcbiAgICAoeyBwYXJhbXMsIHF1ZXJ5LCBoYXNoLCBvcHRpb25zIH0gPSB0aGlzLnByZXBhcmVTdGF0ZUFyZ3Moc3RhdGUsIHBhcmFtcywgcXVlcnksIGhhc2gsIG9wdGlvbnMpKTtcbiAgfVxuXG4gIGxldCB1cmwgPSBzdGF0ZS5mdWxsUGF0dGVybi5yZXBsYWNlKHRoaXMuX19wYXJhbVJlZ2V4LCAobSwgZiwgdikgPT4gJy8nICsgKHBhcmFtc1t2XSB8fCAnJykpO1xuICB1cmwgPSB1cmwucmVwbGFjZSgvXlxcXi8sICcnKTtcbiAgdXJsID0gdGhpcy5zcGxpdFNsYXNoZXModXJsKTtcblxuICBpZiAoT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCkge1xuICAgIHVybCArPSAnPycgKyByZXF1ZXN0LnBhcmFtc1RvUXVlcnkocXVlcnkpO1xuICB9XG5cbiAgaWYgKCF0aGlzLmhhc2hNb2RlICYmIGhhc2gpIHtcbiAgICB1cmwgKz0gJyMnICsgaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cbi8qKlxuICogUHJlcGFyZSB0aGUgc3RhdGUgYXJndW1lbnRzXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXVxuICogQHBhcmFtIHtvYmplY3R9IFtxdWVyeV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbaGFzaF1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqL1xucm91dGVyLnByZXBhcmVTdGF0ZUFyZ3MgPSBmdW5jdGlvbiAoc3RhdGUsIHBhcmFtcyA9IHt9LCBxdWVyeSA9IHt9LCBoYXNoID0gdW5kZWZpbmVkLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IGFyZ3MgPSB7IHBhcmFtcywgcXVlcnksIGhhc2gsIG9wdGlvbnMgfTtcblxuICBmb3IobGV0IGkgPSAwOyBpIDwgMjc7IGkrKykge1xuICAgIGNvbnN0IHBhcmFtc1RlbXAgPSB0aGlzLnByZXBhcmVTdGF0ZVBhcmFtcyhzdGF0ZSwgcGFyYW1zLCBhcmdzKTtcbiAgICBjb25zdCBxdWVyeVRlbXAgPSB0aGlzLnByZXBhcmVTdGF0ZVF1ZXJ5KHN0YXRlLCBxdWVyeSwgYXJncyk7XG4gICAgY29uc3QgaGFzaFRlbXAgPSB0aGlzLnByZXBhcmVTdGF0ZUhhc2goc3RhdGUsIGhhc2gsIGFyZ3MpO1xuICAgIFxuICAgIGlmKGhhc2hUZW1wID09PSBudWxsKSB7XG4gICAgICBvcHRpb25zLmVtcHR5SGFzaCA9IG51bGw7XG4gICAgfVxuICAgIGVsc2UgaWYoaGFzaFRlbXAgPT09ICcnKSB7XG4gICAgICBvcHRpb25zLmVtcHR5SGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0FyZ3MgPSB7IHBhcmFtczogcGFyYW1zVGVtcCwgcXVlcnk6IHF1ZXJ5VGVtcCwgaGFzaDogaGFzaFRlbXAsIG9wdGlvbnMgfTtcblxuICAgIGlmKHV0aWxzLmNvbXBhcmUobmV3QXJncywgYXJncykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFyZ3MgPSBuZXdBcmdzO1xuICB9XG4gICAgXG4gIHJldHVybiBhcmdzO1xufVxuXG4vKipcbiAqIFByZXBhcmUgdGhlIHN0YXRlIHBhcmFtc1xuICogXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge29iamVjdH0gW2FyZ3NdXG4gKi9cbnJvdXRlci5wcmVwYXJlU3RhdGVQYXJhbXMgPSBmdW5jdGlvbihzdGF0ZSwgcGFyYW1zLCBhcmdzKSB7XG4gIHR5cGVvZiBzdGF0ZSAhPT0gJ29iamVjdCcgJiYgKHN0YXRlID0gdGhpcy5nZXRTdGF0ZShzdGF0ZSkpO1xuICBjb25zdCBzdGF0ZXMgPSBzdGF0ZS5uYW1lLnNwbGl0KCcuJyk7XG4gIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHBhcmFtcyk7XG5cbiAgZm9yKGxldCBpID0gc3RhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgY3VycmVudCA9IHN0YXRlcy5zbGljZSgwLCBzdGF0ZXMubGVuZ3RoIC0gaSkuam9pbignLicpO1xuICAgIHBhcmFtcyA9IHRoaXMuY3JlYXRlU3RhdGVPYmplY3RBcmdzKHBhcmFtcywgdGhpcy5nZXRTdGF0ZShjdXJyZW50KS5wYXJhbXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuLyoqXG4gKiBQcmVwYXJlIHRoZSBzdGF0ZSBxdWVyeVxuICogXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gcXVlcnlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbYXJnc11cbiAqL1xucm91dGVyLnByZXBhcmVTdGF0ZVF1ZXJ5ID0gZnVuY3Rpb24oc3RhdGUsIHF1ZXJ5LCBhcmdzKSB7ICBcbiAgdHlwZW9mIHN0YXRlICE9PSAnb2JqZWN0JyAmJiAoc3RhdGUgPSB0aGlzLmdldFN0YXRlKHN0YXRlKSk7XG4gIGNvbnN0IHN0YXRlcyA9IHN0YXRlLm5hbWUuc3BsaXQoJy4nKTtcbiAgcXVlcnkgPSBPYmplY3QuYXNzaWduKHt9LCBxdWVyeSk7XG5cbiAgZm9yKGxldCBpID0gc3RhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgY3VycmVudCA9IHN0YXRlcy5zbGljZSgwLCBzdGF0ZXMubGVuZ3RoIC0gaSkuam9pbignLicpO1xuICAgIHF1ZXJ5ID0gdGhpcy5jcmVhdGVTdGF0ZU9iamVjdEFyZ3MocXVlcnksIHRoaXMuZ2V0U3RhdGUoY3VycmVudCkucXVlcnksIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHF1ZXJ5O1xufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgc3RhdGUgYXJndW1lbnRzXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBjdXJyZW50XG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbYXJnc11cbiAqL1xucm91dGVyLmNyZWF0ZVN0YXRlT2JqZWN0QXJncyA9IGZ1bmN0aW9uIChjdXJyZW50LCBkZWZhdWx0cywgYXJncyA9IHsgcGFyYW1zOiB7fSwgcXVlcnk6IHt9IH0pIHtcbiAgY29uc3QgYWxsID0gT2JqZWN0LmFzc2lnbih7fSwgY3VycmVudCk7XG5cbiAgZm9yKGxldCBrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICBsZXQgdmFsID0gZGVmYXVsdHNba2V5XTtcblxuICAgIGlmKGFsbFtrZXldID09PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZih0eXBlb2YgdmFsID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFsbFtrZXldID0gdmFsKGFyZ3MpO1xuICAgIH1cblxuICAgIGlmKGFsbFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFsbFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvcihsZXQga2V5IGluIGFsbCkge1xuICAgIGlmKGFsbFtrZXldID09PSBudWxsKSB7XG4gICAgICBkZWxldGUgYWxsW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFsbDsgXG59XG5cbi8qKlxuICogUHJlcGFyZSB0aGUgc3RhdGUgaGFzaFxuICogXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuICogQHBhcmFtIHtvYmplY3R9IFthcmdzXVxuICovXG5yb3V0ZXIucHJlcGFyZVN0YXRlSGFzaCA9IGZ1bmN0aW9uKHN0YXRlLCBoYXNoLCBhcmdzKSB7XG4gIGlmKGhhc2ggPT09IG51bGwpIHtcbiAgICByZXR1cm4gaGFzaDtcbiAgfVxuXG4gIHR5cGVvZiBzdGF0ZSAhPT0gJ29iamVjdCcgJiYgKHN0YXRlID0gdGhpcy5nZXRTdGF0ZShzdGF0ZSkpO1xuICBjb25zdCBzdGF0ZXMgPSBzdGF0ZS5uYW1lLnNwbGl0KCcuJyk7XG5cbiAgZm9yKGxldCBpID0gc3RhdGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgY3VycmVudCA9IHN0YXRlcy5zbGljZSgwLCBzdGF0ZXMubGVuZ3RoIC0gaSkuam9pbignLicpO1xuICAgIGhhc2ggPSB0aGlzLmNyZWF0ZVN0YXRlSGFzaEFyZ3MoaGFzaCwgdGhpcy5nZXRTdGF0ZShjdXJyZW50KS5oYXNoLCBhcmdzKTtcbiAgfVxuICBcbiAgcmV0dXJuIGhhc2g7XG59XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBzdGF0ZSBoYXNoIGFyZ3VtZW50c1xuICogXG4gKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBjdXJyZW50XG4gKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBkZWZhdWx0c1xuICogQHBhcmFtIHtvYmplY3R9IFthcmdzXVxuICovXG5yb3V0ZXIuY3JlYXRlU3RhdGVIYXNoQXJncyA9IGZ1bmN0aW9uIChjdXJyZW50LCBkZWZhdWx0cywgYXJncyA9IHsgcGFyYW1zOiB7fSwgcXVlcnk6IHt9IH0pIHtcbiAgaWYoY3VycmVudCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG5cbiAgaWYodHlwZW9mIGRlZmF1bHRzID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZGVmYXVsdHMoYXJncyk7XG4gIH1cblxuICBpZihjdXJyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cblxuICByZXR1cm4gY3VycmVudDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYWxsIHVubmVjZXNzYXJ5IHNsYXNoZXMgZnJvbSB0aGUgdXJsXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xucm91dGVyLnNwbGl0U2xhc2hlcyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuIHVybC5yZXBsYWNlKC9bL10rL2csICcvJyk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcGF0dGVybiBpbmZvXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xucm91dGVyLmdldFBhdHRlcm5Db250ZW50ID0gZnVuY3Rpb24gKHN0YXRlLCB1cmwpIHtcbiAgdHlwZW9mIHN0YXRlICE9PSAnb2JqZWN0JyAmJiAoc3RhdGUgPSB0aGlzLmdldFN0YXRlKHN0YXRlKSk7XG4gIGxldCBrZXlzID0gW107XG4gIGxldCBwYXJhbXMgPSB7fTtcblxuICB1cmwgPSB1cmwuc3BsaXQoJz8nKVswXTtcbiAgdXJsID0gdXJsLnNwbGl0KCcjJylbMF07XG5cbiAgbGV0IHVybFBhdHRlcm4gPSBzdGF0ZS5mdWxsUGF0dGVybi5yZXBsYWNlKHRoaXMuX19wYXJhbVJlZ2V4LCAobSwgZiwgdikgPT4ge1xuICAgIGtleXMucHVzaCh2KTtcbiAgICByZXR1cm4gJy8/KFteL10qKSc7XG4gIH0pO1xuXG4gIHVybFBhdHRlcm4gPSB1cmxQYXR0ZXJuLnJlcGxhY2UoLyhbXl4vXSspWy9dKyQvLCAnJDEnKTtcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh1cmxQYXR0ZXJuLCAnZycpO1xuICBsZXQgaXNJbmNsdWRlZCA9IHVybC5tYXRjaChyZWdleCk7XG4gIFxuICBpZiAoIWlzSW5jbHVkZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHVybC5yZXBsYWNlKHJlZ2V4LCAobSwgLi4uYXJncykgPT4geyBcbiAgICBhcmdzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDIpO1xuXG4gICAgZm9yKGxldCBpID0gMCwgbCA9IGFyZ3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgdiA9IGFyZ3NbaV07XG4gICAgICB2ICYmIChwYXJhbXNba2V5c1tpXV0gPSB2KTtcbiAgICB9ICBcbiAgfSk7XG5cbiAgcmV0dXJuIHsgcGFyYW1zIH07XG59O1xuXG4vKipcbiAqIENoZWNrIHRoZSBzdGF0ZSBpcyBhY3RpdmVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xucm91dGVyLmlzQWN0aXZlU3RhdGUgPSBmdW5jdGlvbihzdGF0ZSwgaW5jbHVkZXMgPSBmYWxzZSkge1xuICB0eXBlb2Ygc3RhdGUgIT09ICdvYmplY3QnICYmIChzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoc3RhdGUpKTtcbiAgbGV0IHVybCA9IHJvdXRlci50cmFuc2l0aW9uICYmICFyb3V0ZXIudHJhbnNpdGlvbi5fX2ZpbmlzaGVkPyByb3V0ZXIudHJhbnNpdGlvbi51cmw6IHRoaXMuZ2V0VXJsKCk7XG4gIHVybCA9IHRoaXMuc3BsaXRTbGFzaGVzKCcvJyArIHVybC5zcGxpdCgnPycpWzBdICsgJy8nKTtcbiAgbGV0IHVybFBhdHRlcm4gPSBzdGF0ZS5mdWxsUGF0dGVybi5yZXBsYWNlKHRoaXMuX19wYXJhbVJlZ2V4LCAnLz8oW14vXSopJyk7XG4gIHVybFBhdHRlcm4gPSB1cmxQYXR0ZXJuLnJlcGxhY2UoL15cXF4vLCAnJykucmVwbGFjZSgvXFwkJC8sICcnKTtcbiAgbGV0IHN0ciA9IGluY2x1ZGVzPyB1cmxQYXR0ZXJuOiB0aGlzLnNwbGl0U2xhc2hlcygnXi8nICsgdXJsUGF0dGVybiArICcvJCcpO1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHN0cik7ICBcbiAgcmV0dXJuIHJlZ2V4LnRlc3QodXJsKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgdGhlIGN1cnJlbnQgdXJsIGluY2x1ZGVzIHRoZSBzdGF0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gc3RhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5yb3V0ZXIuaW5BY3RpdmVTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHJldHVybiByb3V0ZXIuaXNBY3RpdmVTdGF0ZShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgcm91dGUgY29tcG9uZW50IGJ5IHRoZSBsZXZlbFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZXZlbFxuICovXG5yb3V0ZXIuZ2V0Um91dGUgPSBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgbGV0IGkgPSAwO1xuXG4gIGNvbnN0IGZpbmQgPSBlbCA9PiB7XG4gICAgbGV0IHJvdXRlID0gZWwuY2hpbGQodGhpcy5fX3JvdXRlU2VsZWN0b3IpO1xuXG4gICAgaWYgKCFyb3V0ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGkgPT0gbGV2ZWwpIHtcbiAgICAgIHJldHVybiByb3V0ZTtcbiAgICB9XG5cbiAgICBpKys7XG4gICAgcmV0dXJuIGZpbmQocm91dGUpO1xuICB9O1xuXG4gIHJldHVybiBmaW5kKEFraWxpLnJvb3QpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHBhdHRlcm5zIGFycmF5IGluZm9cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEByZXR1cm5zIHtvYmplY3R8bnVsbH1cbiAqL1xucm91dGVyLmdldEFycmF5UGF0dGVybkNvbnRlbnQgPSBmdW5jdGlvbiAoYXJyLCB1cmwpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IHN0YXRlID0gYXJyW2ldO1xuICAgIGxldCBjb250ZW50ID0gdGhpcy5nZXRQYXR0ZXJuQ29udGVudChzdGF0ZSwgdXJsKTtcblxuICAgIGlmICghY29udGVudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc3RhdGU6IHN0YXRlLCAuLi5jb250ZW50IH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBzdGF0ZXMgYnkgdGhlIGxldmVsXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxldmVsXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbnJvdXRlci5nZXRTdGF0ZXNCeUxldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gIGxldCBzdGF0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGVzW2ldO1xuXG4gICAgaWYgKHN0YXRlLmxldmVsIDwgbGV2ZWwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdGF0ZS5sZXZlbCA+IGxldmVsKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdGF0ZXMucHVzaChzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGVzO1xufTtcblxuLyoqXG4gKiBSZWxvYWQgdGhlIHN0YXRlXG4gKiBcbiAqIEBzZWUgVHJhbnNpdGlvbi5yZWxvYWRcbiAqL1xucm91dGVyLnJlbG9hZCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgaWYoIXRoaXMudHJhbnNpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignTm90IGZvdW5kIGFuIGFjdGl2ZSB0cmFuc2l0aW9uIHRvIHJlbG9hZCB0aGUgc3RhdGUnKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnRyYW5zaXRpb24ucmVsb2FkKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIElzb2xhdGUgdGhlIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5yb3V0ZXIuaXNvbGF0ZSA9IGZ1bmN0aW9uIChmbikge1xuICB0aGlzLl9faXNvbGF0ZWQgPSB0cnVlO1xuICBsZXQgcmVzID0gZm4oKTtcbiAgdGhpcy5fX2lzb2xhdGVkID0gZmFsc2U7XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBzdGF0ZVxuICogXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKi9cbnJvdXRlci5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zID0ge30pIHsgICAgXG4gIGlmKHRoaXMuX19pc29sYXRlZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xuICBsZXQgdHJhbnNpdGlvbiA9IG5ldyBUcmFuc2l0aW9uKHVybCk7XG4gIHRoaXMuX19xdWV1ZS5wdXNoKHRyYW5zaXRpb24pO1xuICBcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZih0aGlzLl9fcXVldWVbMF0gPT09IHRyYW5zaXRpb24pIHsgICAgICAgXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pLnRoZW4oKCkgPT4geyBcbiAgICB0cmFuc2l0aW9uLnByZXZpb3VzID0gcm91dGVyLnRyYW5zaXRpb24gfHwgbnVsbDtcbiAgICByb3V0ZXIudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzdGF0ZS1jaGFuZ2UnLCB7IGRldGFpbDogdHJhbnNpdGlvbiB9KSk7ICAgXG4gICAgbGV0IHBhcmFtcyA9IHt9O1xuICAgIGxldCBxdWVyeSA9IHRoaXMuZ2V0VXJsUXVlcnkoKTtcbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaE1vZGU/ICcnOiB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpOyBcbiAgICBsZXQgbGV2ZWwgPSAwOyAgICAgIFxuXG4gICAgY29uc3QgbmV4dCA9IHN0YXRlcyA9PiB7XG4gICAgICBpZiAoIXN0YXRlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICBsZXQgY29udGVudCA9IHRoaXMuZ2V0QXJyYXlQYXR0ZXJuQ29udGVudChzdGF0ZXMsIHVybCk7XG5cbiAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBzdGF0ZSA9IGNvbnRlbnQuc3RhdGU7IFxuICAgICAgdHJhbnNpdGlvbi5zZXRQYXRoKHsgc3RhdGUsIGNvbXBvbmVudDogcm91dGUgfSk7ICAgIFxuICAgICAgcGFyYW1zID0geyAuLi5wYXJhbXMsIC4uLmNvbnRlbnQucGFyYW1zIH07XG4gICAgICBoYXNoID0gaGFzaCB8fCBvcHRpb25zLmVtcHR5SGFzaDtcbiAgICAgICh7IHBhcmFtcywgcXVlcnksIGhhc2gsIG9wdGlvbnMgfSA9IHRoaXMucHJlcGFyZVN0YXRlQXJncyhzdGF0ZSwgcGFyYW1zLCBxdWVyeSwgaGFzaCwgb3B0aW9ucykpOyAgICAgXG4gICAgICBoYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIGxldCByZWFsVXJsID0gdGhpcy5jcmVhdGVTdGF0ZVVybChzdGF0ZSwgcGFyYW1zLCBxdWVyeSwgaGFzaCwgb3B0aW9ucywgZmFsc2UpOyBcbiAgICAgIHRoaXMuaXNvbGF0ZSgoKSA9PiB0aGlzLnJlcGxhY2VVcmwocmVhbFVybCkpOyBcbiAgICAgIGxldCByb3V0ZSA9IHN0YXRlLmFic3RyYWN0PyBudWxsOiB0aGlzLmdldFJvdXRlKGxldmVsKTtcbiAgICAgIFxuICAgICAgaWYgKCFyb3V0ZSAmJiAhc3RhdGUuYWJzdHJhY3QpIHsgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yIChgTm90IGZvdW5kIHJvdXRlIGNvbXBvbmVudCBmb3Igc3RhdGUgXCIke3N0YXRlLm5hbWV9XCJgKTtcbiAgICAgIH0gICAgXG5cbiAgICAgIHRyYW5zaXRpb24ucGF0aC5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICB0cmFuc2l0aW9uLnBhdGgucXVlcnkgPSBxdWVyeTtcbiAgICAgIHRyYW5zaXRpb24ucGF0aC5oYXNoID0gaGFzaDtcbiAgICAgIHRyYW5zaXRpb24ucGF0aC51cmwgPSByZWFsVXJsO1xuICAgICAgdHJhbnNpdGlvbi5wYXRoLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgIXN0YXRlLmFic3RyYWN0ICYmIGxldmVsKys7XG4gICAgICBsZXQgaXNEaWZmZXJlbnQgPSB0cnVlO1xuXG4gICAgICBpZihyZWFsVXJsICE9IHVybCkge1xuICAgICAgICBpc0RpZmZlcmVudCA9IHRyYW5zaXRpb24uaXNSb3V0ZUNoYW5nZWQodHJhbnNpdGlvbi5wYXRoKTtcbiAgICAgIH1cbiAgICAgICAgXG4gICAgICBsZXQgbG9hZCA9IGlzRGlmZmVyZW50ICYmIG9wdGlvbnMucmVsb2FkICE9PSBmYWxzZTsgICAgXG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobG9hZD8gc3RhdGUuaGFuZGxlcih0cmFuc2l0aW9uKTogdHJhbnNpdGlvbi5wYXRoLmRhdGEpLnRoZW4oZGF0YSA9PiB7ICAgICAgICBcbiAgICAgICAgdHJhbnNpdGlvbi5wYXRoLmRhdGEgPSBkYXRhO1xuICAgICAgICBzdGF0ZS50aXRsZSAmJiAoZG9jdW1lbnQudGl0bGUgPSB0eXBlb2Ygc3RhdGUudGl0bGUgPT0gJ2Z1bmN0aW9uJz8gc3RhdGUudGl0bGUodHJhbnNpdGlvbik6IHN0YXRlLnRpdGxlKTtcblxuICAgICAgICBpZiAodHJhbnNpdGlvbi5fX2NhbmNlbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5hYnN0cmFjdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByZXZSb3V0ZSA9IHRyYW5zaXRpb24ucHJldmlvdXMgJiYgdHJhbnNpdGlvbi5wcmV2aW91cy5nZXRSb3V0ZShzdGF0ZSk7XG4gICAgICAgIChwcmV2Um91dGUgJiYgIXByZXZSb3V0ZS5sb2FkZWQpICYmIChsb2FkID0gdHJ1ZSk7XG4gICAgICAgIHJldHVybiByb3V0ZS5zZXRUcmFuc2l0aW9uKHRyYW5zaXRpb24sIGxvYWQpLnRoZW4oKCkgPT4gdHJhbnNpdGlvbi5wYXRoLmxvYWRlZCA9IHRydWUpO1xuICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXh0KHN0YXRlLmNoaWxkcmVuKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gbmV4dCh0aGlzLmdldFN0YXRlc0J5TGV2ZWwoMCkpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKCF0cmFuc2l0aW9uLnJvdXRlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX19yZWRpcmVjdHMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdyb25nIHJvdXRlciBkZWZhdWx0IHVybCBcIiR7dGhpcy5kZWZhdWx0VXJsfVwiYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kZWZhdWx0VXJsKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFVybCA9PSB0aGlzLmdldFVybCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBmb3VuZCBhbnkgcm91dGVzYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5pc29sYXRlKCgpID0+IHRoaXMucmVwbGFjZVVybCh0aGlzLmRlZmF1bHRVcmwpKTsgICAgICAgICAgXG4gICAgICAgICAgdGhpcy5fX3JlZGlyZWN0cysrO1xuICAgICAgICAgIHRyYW5zaXRpb24uZmluaXNoKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlU3RhdGUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChBa2lsaS5vcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oYE5vdCBmb3VuZCBhIGRlZmF1bHQgcm91dGUuIFlvdSBjYW4gcGFzcyBpdCBpbiBcInJvdXRlci5pbml0KGRlZmF1bHRVcmwpXCIgZnVuY3Rpb25gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAoIW9wdGlvbnMuc2F2ZVNjcm9sbFBvc2l0aW9uICYmICghdHJhbnNpdGlvbi5wYXRoIHx8ICF0cmFuc2l0aW9uLnBhdGguaGFzaCkpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9fcmVkaXJlY3RzID0gMDtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoKCk7XG4gICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3N0YXRlLWNoYW5nZWQnLCB7IGRldGFpbDogdHJhbnNpdGlvbiB9KSk7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbjtcbiAgICB9KTtcbiAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICB0cmFuc2l0aW9uICYmIHRyYW5zaXRpb24uZmluaXNoKCk7XG4gICAgdGhyb3cgZXJyO1xuICB9KVxufTtcblxuLyoqXG4gKiBEZWluaXRpYWxpemUgdGhlIHJvdXRlclxuICovXG5yb3V0ZXIuZGVpbml0ID0gZnVuY3Rpb24gKCkge1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLl9fb25TdGF0ZUNoYW5nZUhhbmRsZXIpO1xuICB0aGlzLl9faW5pdCA9IGZhbHNlO1xufTtcblxucm91dGVyLlRyYW5zaXRpb24gPSBUcmFuc2l0aW9uO1xuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50LmpzJztcbmltcG9ydCBBa2lsaSBmcm9tICcuLi9ha2lsaS5qcyc7XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBjb25kaXRpb25hbCBzdGF0ZW1lbnRzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19jb25kaXRpb25hbF9zdGF0ZW1lbnRzfVxuICogXG4gKiBAdGFnIGlmXG4gKiBAc2VsZWN0b3IgaWZbaXNdXG4gKiBAYXR0ciB7Ym9vbGVhbn0gaXMgLSBzaG93IHRoZSBlbGVtZW50IGNvbnRlbnQgb3Igbm90XG4gKiBAYXR0ciB7Ym9vbGVhbn0gcmVjcmVhdGUgLSBkZWxldGUgdGhlIGNvbnRlbnQgYW5kIHJlY3JlYXRlIG9yIGp1c3Qgc2hvdy9oaWRlIFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZiBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRpYyB0cmFuc3BhcmVudCA9IHRydWU7IFxuICBzdGF0aWMgbWF0Y2hlcyA9ICdbaXNdJztcbiAgc3RhdGljIGJvb2xlYW5BdHRyaWJ1dGVzID0gWydyZWNyZWF0ZSddO1xuXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdpZicsIHRoaXMpO1xuICAgIEFraWxpLmNvbXBvbmVudCgnZWxzZS1pZicsIHRoaXMuRWxzZUlmKTtcbiAgICBBa2lsaS5jb21wb25lbnQoJ2Vsc2UnLCB0aGlzLkVsc2UpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgdGhpcy5odG1sID0gdGhpcy5lbC5pbm5lckhUTUw7XG4gICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnJztcbiAgICB0aGlzLnN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLnJlY3JlYXRlID0gZmFsc2U7XG4gICAgdGhpcy5pc0NvbXBpbGVkID0gZmFsc2U7XG4gICAgdGhpcy5kaXNwbGF5ID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVsKS5kaXNwbGF5O1xuICB9XG5cbiAgY29tcGlsZWQoKSB7XG4gICAgdGhpcy5hdHRyKCdyZWNyZWF0ZScsIHRoaXMuc2V0UmVjcmVhdGlvbik7XG4gICAgcmV0dXJuIHRoaXMuYXR0cignaXMnLCB0aGlzLnNldElzKTtcbiAgfVxuXG4gIHNldElzKHZhbCkge1xuICAgIHRoaXMuc3RhdGUgPSAhIXZhbDtcbiAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgc2V0QWN0aXZpdHkoYWN0aXZlKSB7XG4gICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XG4gIH1cblxuICBzZXRSZWNyZWF0aW9uKHJlY3JlYXRlKSB7XG4gICAgdGhpcy5yZWNyZWF0ZSA9IHJlY3JlYXRlO1xuICB9XG5cbiAgc2V0U3RhdGUoKSB7XG4gICAgbGV0IHJlcyA9IHRoaXMuY29tcGlsYXRpb24oKTtcbiAgICBsZXQgbmV4dCA9IHRoaXMuZWwubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIGxldCByZXN1bHQ7XG5cbiAgICBpZiAoIW5leHQgfHwgIW5leHQubWF0Y2hlcygnZWxzZS1pZixlbHNlJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBuZXh0Ll9fYWtpbGkuc2V0QWN0aXZpdHkodGhpcy5hY3RpdmUgfHwgdGhpcy5zdGF0ZSk7XG4gICAgbmV4dC5fX2FraWxpLnNldFJlY3JlYXRpb24odGhpcy5yZWNyZWF0ZSk7XG4gICAgcmVzdWx0ID0gbmV4dC5fX2FraWxpLnNldFN0YXRlKCk7ICAgIFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzKS50aGVuKCgpID0+ICByZXN1bHQpO1xuICB9XG5cbiAgY29tcGlsYXRpb24oKSB7XG4gICAgbGV0IHJlcyA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUgJiYgIXRoaXMuYWN0aXZlKSB7XG4gICAgICBpZiAodGhpcy5yZWNyZWF0ZSB8fCAhdGhpcy5pc0NvbXBpbGVkKSB7XG4gICAgICAgIHJlcyA9IHRoaXMuY29tcGlsZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgdGhpcy5kaXNwbGF5LCAnaW1wb3J0YW50Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMucmVjcmVhdGUpIHtcbiAgICAgICAgdGhpcy5lbXB0eSgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoIXRoaXMuaXNDb21waWxlZCkge1xuICAgICAgICByZXMgPSB0aGlzLmNvbXBpbGUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbC5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJywgJ2ltcG9ydGFudCcpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICBjb21waWxlKCkge1xuICAgIGxldCByZXM7XG4gICAgdGhpcy5lbXB0eSgpO1xuICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdGhpcy5odG1sOyAgIFxuICAgIHJlcyA9IEFraWxpLmNvbXBpbGUodGhpcy5lbCwgeyByZWNvbXBpbGU6IHRydWUgfSk7XG4gICAgdGhpcy5pc0NvbXBpbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG59XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBjb25kaXRpb25hbCBzdGF0ZW1lbnRzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19jb25kaXRpb25hbF9zdGF0ZW1lbnRzfVxuICogXG4gKiBAdGFnIGVsc2UtaWZcbiAqIEBzZWxlY3RvciBlbHNlLWlmW2lzXVxuICogQGF0dHIge2Jvb2xlYW59IGlzIEBzZWUgSWZcbiAqL1xuZXhwb3J0IGNsYXNzIEVsc2VJZiBleHRlbmRzIElmIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBjb25kaXRpb25hbCBzdGF0ZW1lbnRzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19jb25kaXRpb25hbF9zdGF0ZW1lbnRzfVxuICogXG4gKiBAdGFnIGVsc2VcbiAqL1xuZXhwb3J0IGNsYXNzIEVsc2UgZXh0ZW5kcyBFbHNlSWYge1xuICBzdGF0aWMgbWF0Y2hlcyA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKCdpcycsICd0cnVlJyk7XG4gIH1cbn1cblxuSWYuRWxzZUlmID0gRWxzZUlmO1xuSWYuRWxzZSA9IEVsc2U7IiwiaW1wb3J0IEZvciwgeyBMb29wIH0gZnJvbSAnLi9mb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBa2lsaSBmcm9tICcuLi9ha2lsaS5qcyc7XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIHdvcmsgd2l0aCBzZWxlY3QuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX3NlbGVjdH1cbiAqIFxuICogQHRhZyBzZWxlY3QgIFxuICogQGF0dHIge3N0cmluZ30gdmFsdWUgLSBhY3R1YWwgdmFsdWVcbiAqIEBhdHRyIFtpbl0gQHNlZSBGb3JcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0IGV4dGVuZHMgRm9yIHtcbiAgc3RhdGljIGJvb2xlYW5BdHRyaWJ1dGVzID0gWydtdWx0aXBsZSddLmNvbmNhdChGb3IuYm9vbGVhbkF0dHJpYnV0ZXMpO1xuICBzdGF0aWMgZXZlbnRzID0gWydjaGFuZ2UnXS5jb25jYXQoRm9yLmV2ZW50cyk7XG5cbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ3NlbGVjdCcsIHRoaXMpO1xuICAgIEFraWxpLmNvbXBvbmVudCgnb3B0aW9uJywgdGhpcy5PcHRpb24pO1xuICB9XG5cbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgdGhpcy5pdGVyYXRvclRhZ05hbWUgPSAnb3B0aW9uJztcbiAgICB0aGlzLmlzTXVsdGlwbGUgPSBmYWxzZTtcbiAgfVxuXG4gIGNvbXBpbGVkKCkgeyBcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHRoaXMuZWwuY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpKTtcbiAgICBsZXQgcmVzID0gc3VwZXIuY29tcGlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgICBcbiAgICB0aGlzLmF0dHIoJ211bHRpcGxlJywgdGhpcy5zZXRNdWx0aXBsZSk7XG4gICAgdGhpcy5hdHRyKCdjb250ZW50JywgdGhpcy5zZXRDb250ZW50KTtcbiAgICB0aGlzLmF0dHIoJ2luJywgdGhpcy5kcmF3U2VsZWN0KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgc2V0TXVsdGlwbGUodmFsdWUpIHtcbiAgICB0aGlzLmlzTXVsdGlwbGUgPSB2YWx1ZTtcbiAgICB0aGlzLmNoYW5nZVZhbHVlKHRoaXMuZm9ybWF0VmFsdWUodXRpbHMuY29weSh0aGlzLmVsLmNvbnRlbnQpKSk7XG4gIH1cblxuICBzZXRDb250ZW50KHZhbHVlKSB7XG4gICAgdGhpcy5jaGFuZ2VWYWx1ZSh0aGlzLmZvcm1hdFZhbHVlKHZhbHVlKSk7XG4gIH1cblxuICBkcmF3U2VsZWN0KCkge1xuICAgIGxldCBzZWxlY3RlZCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgb3B0aW9uID0gdGhpcy5lbC5vcHRpb25zW2ldLl9fYWtpbGk7XG4gICAgICBsZXQgc2VsZWN0aW9uID0gb3B0aW9uLmF0dHJzLnNlbGVjdGVkO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgIHNlbGVjdGVkLnB1c2gob3B0aW9uLmVsLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9uLmVsLnNlbGVjdGVkID0gc2VsZWN0aW9uO1xuICAgIH1cblxuICAgIGlmICghc2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlZGVmaW5lKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5jaGFuZ2VWYWx1ZSh0aGlzLmZvcm1hdFZhbHVlKHNlbGVjdGVkKSk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlSXRlcmF0b3JFbGVtZW50KCkge1xuICAgIGxldCBlbCA9IHN1cGVyLmNyZWF0ZUl0ZXJhdG9yRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgaWYgKCFlbC5oYXNBdHRyaWJ1dGUoJ3ZhbHVlJykpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0aGlzLmh0bWwudHJpbSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICBnZXRDb250ZW50KCkge1xuICAgIGlmICghdGhpcy5pc011bHRpcGxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC52YWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgb3B0aW9uID0gdGhpcy5lbC5vcHRpb25zW2ldO1xuXG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgIGNvbnRlbnQucHVzaChvcHRpb24udmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgZm9ybWF0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5pc011bHRpcGxlKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpPyBbdmFsdWVdOiBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5sZW5ndGg/IHZhbHVlWzBdOiAnJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJlZGVmaW5lKCkge1xuICAgIHRoaXMuY2hhbmdlVmFsdWUodGhpcy5nZXRDb250ZW50KCkpO1xuICB9XG5cbiAgY2hhbmdlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodXRpbHMuY29tcGFyZSh0aGlzLmVsLmNvbnRlbnQsIHZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdGhpcy5lbC52YWx1ZSA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IG9wdGlvbiA9IHRoaXMuZWwub3B0aW9uc1tpXTtcblxuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgIT0gLTE7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5lbC52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbGV0IG9wdGlvbiA9IHRoaXMuZWwub3B0aW9uc1tpXTtcblxuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBvcHRpb24udmFsdWUgPT0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbC5jb250ZW50ID0gdmFsdWU7XG4gICAgdGhpcy5hdHRycy5vbkNoYW5nZS5kaXNwYXRjaChFdmVudCwgeyBidWJibGVzOiB0cnVlIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcHRpb24gZXh0ZW5kcyBMb29wIHtcbiAgc3RhdGljIGJvb2xlYW5BdHRyaWJ1dGVzID0gWydzZWxlY3RlZCddO1xuXG4gIF9fZ2V0UGFyc2VkRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIHV0aWxzLmRlY29kZUh0bWxFbnRpdGllcyhleHByZXNzaW9uKTtcbiAgfVxuXG4gIGNoYW5nZWRTZWxlY3RlZCh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U2VsZWN0ZWQodmFsdWUpO1xuICB9XG5cbiAgc2V0U2VsZWN0ZWQodmFsdWUpIHtcbiAgICB0aGlzLmVsLnNlbGVjdGVkID0gdmFsdWU7XG4gICAgdGhpcy5mb3IucmVkZWZpbmUoKTtcbiAgfVxufVxuXG5TZWxlY3QuT3B0aW9uID0gT3B0aW9uOyIsImltcG9ydCBUZXh0IGZyb20gJy4vdGV4dC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCB0byB3b3JrIHdpdGggaW5wdXQgZWxlbWVudHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2lucHV0fVxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9jb21wb25lbnRzI2RvY3NfY2hlY2tib3hfYW5kX3JhZGlvfVxuICogXG4gKiBAdGFnIGlucHV0XG4gKiBAYXR0ciBAc2VlIFRleHRcbiAqIEBtZXNzYWdlIEBzZWUgVGV4dFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnB1dCBleHRlbmRzIFRleHQge1xuICBzdGF0aWMgYm9vbGVhbkF0dHJpYnV0ZXMgPSBbJ2NoZWNrZWQnLCAnbXVsdGlwbGUnXS5jb25jYXQoVGV4dC5ib29sZWFuQXR0cmlidXRlcyk7XG4gIHN0YXRpYyBldmVudHMgPSBbJ2NoYW5nZSddLmNvbmNhdChUZXh0LmV2ZW50cyk7XG5cbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ2lucHV0JywgdGhpcyk7XG4gIH1cblxuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICB0aGlzLmlzQ2hlY2tib3ggPSB0aGlzLmVsLnR5cGUgPT0gJ2NoZWNrYm94JztcbiAgICB0aGlzLmlzUmFkaW8gPSB0aGlzLmVsLnR5cGUgPT0gJ3JhZGlvJzsgICAgXG4gIH1cblxuICBjb21waWxlZCgpIHtcbiAgICAodGhpcy5pc0NoZWNrYm94IHx8IHRoaXMuaXNSYWRpbykgJiYgdGhpcy5hdHRyKCdjaGVja2VkJywgdGhpcy5zZXRDaGVja2VkKTtcbiAgICByZXR1cm4gc3VwZXIuY29tcGlsZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSAgXG5cbiAgc2V0Q2hlY2tlZCh2YWx1ZSkge1xuICAgIHZhbHVlID0gISF2YWx1ZTtcbiAgICBcbiAgICBpZiAodGhpcy5lbC5jaGVja2VkID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWwuY2hlY2tlZCA9IHZhbHVlO1xuICAgIHRoaXMuX19pc0NvbXBpbGVkICYmIHRoaXMuYXR0cnMub25DaGFuZ2UuZGlzcGF0Y2goRXZlbnQsIHsgYnViYmxlczogdHJ1ZSB9KTtcbiAgICB0aGlzLmlzUmFkaW8gJiYgdGhpcy5jaGFuZ2VSYWRpbygpO1xuICB9XG5cbiAgc2V0VmFsdWUoKSB7XG4gICAgc3VwZXIuc2V0VmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlzUmFkaW8gJiYgdGhpcy5hdHRycy5vbkNoYW5nZS5kaXNwYXRjaChFdmVudCwgeyBidWJibGVzOiB0cnVlIH0pO1xuICB9XG5cbiAgY2hhbmdlUmFkaW8oKSB7XG4gICAgbGV0IG5hbWUgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnbmFtZScpO1xuICAgIGxldCBzZWxlY3RvciA9IGBpbnB1dFt0eXBlPXJhZGlvXVtuYW1lPScke25hbWV9J106bm90KFtzY29wZT0nJHt0aGlzLnNjb3BlLl9fbmFtZX0nXSlgO1xuICAgIGxldCBjaGlsZHJlbiA9IEFraWxpLnJvb3QuY2hpbGRyZW4oc2VsZWN0b3IpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCByYWRpbyA9IGNoaWxkcmVuW2ldO1xuICAgICAgcmFkaW8uc2V0Q2hlY2tlZChyYWRpby5lbC5jaGVja2VkKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgRm9yLCB7IExvb3AgfSBmcm9tICcuL2Zvci5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCB0byB3b3JrIHdpdGggcmFkaW8gZ3JvdXAuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX3JhZGlvX2dyb3VwfVxuICogXG4gKiBAdGFnIHJhZGlvXG4gKiBAc2VsZWN0b3IgcmFkaW9bbmFtZV1cbiAqIEBhdHRyIHtzdHJpbmd9IG5hbWUgLSBuYW1lIG9mIHRoZSBncm91cFxuICogQGF0dHIge3N0cmluZ3xudWxsfSB2YWx1ZSAtIHNlbGVjdGVkIHZhbHVlXG4gKiBAYXR0ciBbaW5dIEBzZWUgRm9yXG4gKiBAbWVzc2FnZSB7c3RyaW5nfSByYWRpbyAtIHNlbnQgb24gdmFsdWUgY2hhbmdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhZGlvIGV4dGVuZHMgRm9yIHtcbiAgc3RhdGljIG1hdGNoZXMgPSAnW25hbWVdJztcbiAgc3RhdGljIGV2ZW50cyA9IFsncmFkaW8nXS5jb25jYXQoRm9yLmV2ZW50cyk7XG5cbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ3JhZGlvJywgdGhpcyk7XG4gICAgQWtpbGkuY29tcG9uZW50KCdyYWRpby1idXR0b24nLCB0aGlzLlJhZGlvQnV0dG9uKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIHRoaXMuaXRlcmFibGUgPSB0aGlzLmVsLmhhc0F0dHJpYnV0ZSgnaW4nKTtcbiAgfVxuXG4gIGNyZWF0ZWQoKSB7XG4gICAgaWYodGhpcy5pdGVyYWJsZSkge1xuICAgICAgcmV0dXJuIHN1cGVyLmNyZWF0ZWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBjb21waWxlZCgpIHtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIEFraWxpLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRSYWRpb1ZhbHVlKCk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLnByZXZWYWx1ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJldlZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuYXR0cnMub25SYWRpby50cmlnZ2VyKHZhbHVlLCB7IGJ1YmJsZXM6IHRydWUgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmKHRoaXMuaXRlcmFibGUpIHtcbiAgICAgIHJldHVybiBzdXBlci5jb21waWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHJlc29sdmVkKCkge1xuICAgIHRoaXMuYXR0cignaW4nLCAoKSA9PiB0aGlzLnNldE5hbWVzKCksIHsgY2FsbE9uU3RhcnQ6IGZhbHNlIH0pO1xuICAgIHRoaXMuYXR0cigndmFsdWUnLCB0aGlzLnNldFZhbHVlKTtcbiAgICB0aGlzLmF0dHIoJ25hbWUnLCB0aGlzLnNldE5hbWVzKTtcblxuICAgIGlmKHRoaXMuaXRlcmFibGUpIHtcbiAgICAgIHJldHVybiBzdXBlci5yZXNvbHZlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHNldE5hbWVzKG5hbWUpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuKCdpbnB1dFt0eXBlPXJhZGlvXScpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNoaWxkcmVuW2ldLmVsLnNldEF0dHJpYnV0ZSgnbmFtZScsIG5hbWUgfHwgdGhpcy5hdHRycy5uYW1lKTtcbiAgICB9XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5wcmV2VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcHJldiA9IHRoaXMucHJldlZhbHVlO1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4oJ2lucHV0W3R5cGU9cmFkaW9dJyk7XG4gICAgbGV0IGlzVHJ1ZSA9IGZhbHNlO1xuICAgIHRoaXMucHJldlZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgbGV0IHJhZGlvID0gY2hpbGRyZW5baV07XG4gICAgICBsZXQgaXNTZWxlY3RlZCA9IHJhZGlvLmVsLnZhbHVlID09PSB2YWx1ZTtcblxuICAgICAgaXNTZWxlY3RlZCAmJiAoaXNUcnVlID0gdHJ1ZSk7XG4gICAgICByYWRpby5zZXRDaGVja2VkKGlzU2VsZWN0ZWQpO1xuICAgIH1cblxuICAgIGlmICghaXNUcnVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHByZXYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMucHJldlZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hdHRycy5vblJhZGlvLnRyaWdnZXIodmFsdWUsIHsgYnViYmxlczogdHJ1ZSB9KTtcbiAgfVxuXG4gIGdldFJhZGlvVmFsdWUoKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbignaW5wdXRbdHlwZT1yYWRpb10nKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgcmFkaW8gPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKHJhZGlvLmVsLmNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHJhZGlvLmVsLnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIHdvcmsgd2l0aCByYWRpbyBncm91cCBpdGVtLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19yYWRpb19ncm91cH1cbiAqIFxuICogQHRhZyByYWRpby1idXR0b25cbiAqIEBhdHRyIHtzdHJpbmd9IHZhbHVlIC0gdmFsdWVcbiAqL1xuZXhwb3J0IGNsYXNzIFJhZGlvQnV0dG9uIGV4dGVuZHMgTG9vcCB7XG4gIHN0YXRpYyB0ZW1wbGF0ZSA9ICc8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiJHt0aGlzLnZhbHVlfVwiLz4ke3RoaXMuX19jb250ZW50fTwvbGFiZWw+JztcblxuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gIH1cblxuICBjb21waWxlZCgpIHtcbiAgICB0aGlzLmF0dHIoJ3ZhbHVlJywgJ3ZhbHVlJyk7XG4gICAgcmV0dXJuIHN1cGVyLmNvbXBpbGVkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuUmFkaW8uUmFkaW9CdXR0b24gPSBSYWRpb0J1dHRvbjsiLCJpbXBvcnQgVGV4dCBmcm9tICcuL3RleHQuanMnO1xuaW1wb3J0IEFraWxpIGZyb20gJy4uL2FraWxpLmpzJztcblxuLyoqXG4gKiBDb21wb25lbnQgdG8gd29yayB3aXRoIHRleHRhcmVhLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc190ZXh0YXJlYX1cbiAqIFxuICogQHRhZyB0ZXh0YXJlYVxuICogQGF0dHIgQHNlZSBUZXh0XG4gKiBAbWVzc2FnZSBAc2VlIFRleHRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dGFyZWEgZXh0ZW5kcyBUZXh0IHtcbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ3RleHRhcmVhJywgdGhpcyk7XG4gIH1cbn0iLCJpbXBvcnQgVGV4dCBmcm9tICcuL3RleHQuanMnO1xuaW1wb3J0IEFraWxpIGZyb20gJy4uL2FraWxpLmpzJztcblxuLyoqXG4gKiBDb21wb25lbnQgZm9yIGVsZW1lbnRzIHdpdGggdGhlIGNvbnRlbnRlZGl0YWJsZSBhdHRyaWJ1dGUuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2NvbnRlbnRlZGl0YWJsZX1cbiAqIFxuICogQHRhZyBjb250ZW50XG4gKiBAc2VsZWN0b3IgY29udGVudCxbY29udGVudGVkaXRhYmxlXVxuICogQGF0dHIgQHNlZSBUZXh0XG4gKiBAYXR0ciB7Ym9vbGVhbn0gW2VkaXRhYmxlXSAtIGVkaXRhYmxlIG9yIG5vdFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgVGV4dCB7XG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdjb250ZW50JywgdGhpcyk7XG4gICAgQWtpbGkuYWxpYXMoJ1tjb250ZW50ZWRpdGFibGVdJywgJ2NvbnRlbnQnKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIGlmICh0aGlzLmVsLmhhc0F0dHJpYnV0ZSgnZWRpdGFibGUnKSkge1xuICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdlZGl0YWJsZScpKTtcbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKCdlZGl0YWJsZScpO1xuICAgIH1cblxuICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXMuZWwpLmRpc3BsYXkgPT0gJ2lubGluZScpIHtcbiAgICAgIHRoaXMuZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZUtleSA9ICdpbm5lckhUTUwnO1xuICB9XG5cbiAgc2V0RWxlbWVudEZvY3VzKCkge1xuICAgIGxldCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgbGV0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcblxuICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0aGlzLmVsKTtcbiAgICByYW5nZS5jb2xsYXBzZShmYWxzZSk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgdGhpcy5lbC5mb2N1cygpO1xuICB9XG59IiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IEFraWxpIGZyb20gJy4uL2FraWxpLmpzJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJy4uL3NlcnZpY2VzL3JlcXVlc3QuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCB0byBpbmNsdWRlIHRlbXBsYXRlcyBieSB1cmwuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2h0bWxfdGVtcGxhdGVzfVxuICogXG4gKiBAdGFnIGluY2x1ZGVcbiAqIEBzZWxlY3RvciBpbmNsdWRlW3VybF1cbiAqIEBhdHRyIHtzdHJpbmd9IHVybCAtIHRlbXBsYXRlIHBhdGhcbiAqIEBhdHRyIHtudW1iZXJ8ZnVuY3Rpb258Ym9vbGVhbn0gW2NhY2hlXSAtIHJlcXVlc3QgY2FjaGUge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9yZXF1ZXN0cyNkb2NzX2NhY2hlfVxuICogQG1lc3NhZ2Uge3ZvaWR9IGxvYWQgLSBzZW50IG9uIHRoZSB0ZW1wbGF0ZSBsb2FkXG4gKiBAbWVzc2FnZSB7RXJyb3J9IGVycm9yIC0gc2VudCBvbiBlcnJvclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbmNsdWRlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHRyYW5zcGFyZW50ID0gdHJ1ZTsgXG4gIHN0YXRpYyBtYXRjaGVzID0gJ1t1cmxdJztcbiAgc3RhdGljIGV2ZW50cyA9IFsnbG9hZCcsICdlcnJvciddO1xuXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdpbmNsdWRlJywgdGhpcyk7XG4gIH1cblxuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICB0aGlzLmh0bWwgPSB0aGlzLmVsLmlubmVySFRNTDtcbiAgICB0aGlzLmVsLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gIH1cblxuICBjb21waWxlZCgpIHtcbiAgICB0aGlzLmF0dHIoJ2NhY2hlJywgdGhpcy5zZXRDYWNoZSk7XG4gICAgcmV0dXJuIHRoaXMuYXR0cigndXJsJywgdGhpcy5zZXRUZW1wbGF0ZSk7XG4gIH1cblxuICBzZXRDYWNoZShjYWNoZSkge1xuICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcbiAgfVxuXG4gIHNldFRlbXBsYXRlKHVybCkge1xuICAgIHRoaXMuY29ubmVjdGlvbiAmJiB0aGlzLmNvbm5lY3Rpb24uYWJvcnQoKTtcblxuICAgIHJldHVybiByZXF1ZXN0LmdldCh1cmwsIHtcbiAgICAgIGNhY2hlOiB0aGlzLmNhY2hlLFxuICAgICAgb25TdGFydDogeGhyID0+IHtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0geGhyO1xuICAgICAgfVxuICAgIH0pLnRoZW4ocmVzID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICB0aGlzLmVtcHR5KCk7XG4gICAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRoaXMuaHRtbDtcbiAgICAgIEFraWxpLnNldFRlbXBsYXRlKHRoaXMuZWwsIHJlcy5kYXRhKTtcblxuICAgICAgcmV0dXJuIEFraWxpLmNvbXBpbGUodGhpcy5lbCwgeyByZWNvbXBpbGU6IHRydWUgfSkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuYXR0cnMub25Mb2FkLnRyaWdnZXIodW5kZWZpbmVkLCB7IGJ1YmJsZXM6IGZhbHNlIH0pO1xuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHRoaXMuYXR0cnMub25FcnJvci50cmlnZ2VyKGVyciwgeyBidWJibGVzOiBmYWxzZSB9KTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCBVcmwgZnJvbSAnLi91cmwuanMnO1xuaW1wb3J0IEFraWxpIGZyb20gJy4uL2FraWxpLmpzJztcblxuLyoqXG4gKiBDb21wb25lbnQgZm9yIGlmcmFtZXMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2ltYWdlLF9pZnJhbWUsX2VtYmVkLF9hdWRpbyxfdmlkZW8sX3RyYWNrLF9zb3VyY2UsX29iamVjdH1cbiAqIFxuICogQHRhZyBpZnJhbWVcbiAqIEBhdHRyIHtzdHJpbmd9IFt1cmxdXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElmcmFtZSBleHRlbmRzIFVybCB7ICBcbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ2lmcmFtZScsIHRoaXMpO1xuICB9XG59IiwiaW1wb3J0IFVybCBmcm9tICcuL3VybC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgaW1hZ2VzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19pbWFnZSxfaWZyYW1lLF9lbWJlZCxfYXVkaW8sX3ZpZGVvLF90cmFjayxfc291cmNlLF9vYmplY3R9XG4gKiBcbiAqIEB0YWcgaW1nXG4gKiBAYXR0ciB7c3RyaW5nfSBbdXJsXVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZSBleHRlbmRzIFVybCB7ICBcbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ2ltZycsIHRoaXMpO1xuICB9XG59IiwiaW1wb3J0IFVybCBmcm9tICcuL3VybC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgZW1iZWQgZWxlbWVudHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2ltYWdlLF9pZnJhbWUsX2VtYmVkLF9hdWRpbyxfdmlkZW8sX3RyYWNrLF9zb3VyY2UsX29iamVjdH1cbiAqIFxuICogQHRhZyBlbWJlZFxuICogQGF0dHIge3N0cmluZ30gW3VybF1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1iZWQgZXh0ZW5kcyBVcmwgeyAgXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdlbWJlZCcsIHRoaXMpO1xuICB9XG59IiwiaW1wb3J0IFVybCBmcm9tICcuL3VybC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgYXVkaW8gZWxlbWVudHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2ltYWdlLF9pZnJhbWUsX2VtYmVkLF9hdWRpbyxfdmlkZW8sX3RyYWNrLF9zb3VyY2UsX29iamVjdH1cbiAqIFxuICogQHRhZyBhdWRpb1xuICogQGF0dHIge3N0cmluZ30gW3VybF1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXVkaW8gZXh0ZW5kcyBVcmwgeyAgXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdhdWRpbycsIHRoaXMpO1xuICB9XG59IiwiaW1wb3J0IFVybCBmcm9tICcuL3VybC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgdmlkZW8gZWxlbWVudHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2ltYWdlLF9pZnJhbWUsX2VtYmVkLF9hdWRpbyxfdmlkZW8sX3RyYWNrLF9zb3VyY2UsX29iamVjdH1cbiAqIFxuICogQHRhZyB2aWRlb1xuICogQGF0dHIge3N0cmluZ30gW3VybF1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlkZW8gZXh0ZW5kcyBVcmwgeyAgXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCd2aWRlbycsIHRoaXMpO1xuICB9XG59IiwiaW1wb3J0IFVybCBmcm9tICcuL3VybC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgdHJhY2sgZWxlbWVudHMuXG4gKiBcbiAqIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3MvY29tcG9uZW50cyNkb2NzX2ltYWdlLF9pZnJhbWUsX2VtYmVkLF9hdWRpbyxfdmlkZW8sX3RyYWNrLF9zb3VyY2UsX29iamVjdH1cbiAqIFxuICogQHRhZyB0cmFja1xuICogQGF0dHIge3N0cmluZ30gW3VybF1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhY2sgZXh0ZW5kcyBVcmwgeyAgXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCd0cmFjaycsIHRoaXMpO1xuICB9XG59IiwiaW1wb3J0IFVybCBmcm9tICcuL3VybC5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3Igc291cmNlIGVsZW1lbnRzLlxuICogXG4gKiB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL2NvbXBvbmVudHMjZG9jc19pbWFnZSxfaWZyYW1lLF9lbWJlZCxfYXVkaW8sX3ZpZGVvLF90cmFjayxfc291cmNlLF9vYmplY3R9XG4gKiBcbiAqIEB0YWcgc291cmNlXG4gKiBAYXR0ciB7c3RyaW5nfSBbdXJsXVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb3VyY2UgZXh0ZW5kcyBVcmwgeyAgXG4gIHN0YXRpYyBkZWZpbmUoKSB7XG4gICAgQWtpbGkuY29tcG9uZW50KCdzb3VyY2UnLCB0aGlzKTtcbiAgfVxufSIsImltcG9ydCBVcmwgZnJvbSAnLi91cmwuanMnO1xuaW1wb3J0IEFraWxpIGZyb20gJy4uL2FraWxpLmpzJztcblxuLyoqXG4gKiBDb21wb25lbnQgZm9yIG9iamVjdCBlbGVtZW50cy5cbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9jb21wb25lbnRzI2RvY3NfaW1hZ2UsX2lmcmFtZSxfZW1iZWQsX2F1ZGlvLF92aWRlbyxfdHJhY2ssX3NvdXJjZSxfb2JqZWN0fVxuICogXG4gKiBAdGFnIG9iamVjdFxuICogQGF0dHIge3N0cmluZ30gW3VybF1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JqZWN0cyBleHRlbmRzIFVybCB7ICBcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgdGhpcy51cmxBdHRyaWJ1dGUgPSAnZGF0YSc7XG4gIH1cblxuICBzdGF0aWMgZGVmaW5lKCkge1xuICAgIEFraWxpLmNvbXBvbmVudCgnb2JqZWN0JywgdGhpcyk7XG4gIH1cbn0iLCJpbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgcm91dGVyIGZyb20gJy4uL3NlcnZpY2VzL3JvdXRlci5qcyc7XG5pbXBvcnQgQWtpbGkgZnJvbSAnLi4vYWtpbGkuanMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3IgbGlua3MuXG4gKiBJdCB3b3JrcyB3aXRoIHJvdXRlciBhcyB3ZWxsLiBcbiAqIFxuICoge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9jb21wb25lbnRzI2RvY3NfbGlua3N9XG4gKiBcbiAqIEB0YWcgYVxuICogQHNlbGVjdG9yIGFbc3RhdGVdOm5vdChbdXJsXSksYVt1cmxdOm5vdChbc3RhdGVdKVxuICogQGF0dHIge3N0cmluZ30gW3VybF0gLSB1cmwgdG8gZ29cbiAqIEBhdHRyIHtzdHJpbmd9IFtzdGF0ZV0gLSBzdGF0ZSB0byBnbyB7QGxpbmsgaHR0cHM6Ly9ha2lsaWpzLmNvbS9kb2NzL3JvdXRpbmd9XG4gKiBAYXR0ciB7b2JqZWN0fSBbcGFyYW1zXSAtIHBhcmFtcyBmb3IgdGhlIHN0YXRlIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3Mvcm91dGluZyNkb2NzX3N0YXRlX3BhcmFtc31cbiAqIEBhdHRyIHtvYmplY3R9IFtxdWVyeV0gLSBxdWVyeSBmb3IgdGhlIHN0YXRlIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3Mvcm91dGluZyNkb2NzX3N0YXRlX3F1ZXJ5fVxuICogQGF0dHIge3N0cmluZ30gW2hhc2hdIC0gaGFzaCBmb3IgdGhlIHN0YXRlIHtAbGluayBodHRwczovL2FraWxpanMuY29tL2RvY3Mvcm91dGluZyNkb2NzX3N0YXRlX2hhc2h9XG4gKiBAYXR0ciB7b2JqZWN0fSBbb3B0aW9uc10gLSBvcHRpb25zIGZvciB0aGUgc3RhdGUge0BsaW5rIGh0dHBzOi8vYWtpbGlqcy5jb20vZG9jcy9yb3V0aW5nI2RvY3Nfcm91dGVyLmxvY2F0aW9ufVxuICogQHNjb3BlIHtib29sZWFufSBpc0FjdGl2ZVN0YXRlIC0gdGhlIHN0YXRlIGlzIGFjdGl2ZSBvciBub3QgXG4gKiBAc2NvcGUge2Jvb2xlYW59IGluQWN0aXZlU3RhdGUgLSB0aGUgc3RhdGUgaXMgcGFydCBvZiB0aGUgYWN0aXZlIHN0YXRlIG9yIG5vdFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIG1hdGNoZXMgPSAnW3N0YXRlXTpub3QoW3VybF0pLFt1cmxdOm5vdChbc3RhdGVdKSc7XG4gIHN0YXRpYyBjb250cm9sQXR0cmlidXRlcyA9IHRydWU7XG5cbiAgc3RhdGljIGRlZmluZSgpIHtcbiAgICBBa2lsaS5jb21wb25lbnQoJ2EnLCB0aGlzKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgIHRoaXMucGFyYW1zID0ge307XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgIHRoaXMuaXNVcmwgPSB0aGlzLmVsLmhhc0F0dHJpYnV0ZSgndXJsJyk7XG4gIH1cblxuICBjb21waWxlZCgpIHtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh0aGlzLmlzVXJsKSB7XG4gICAgICAgIHJvdXRlci5sb2NhdGlvbih0aGlzLmF0dHJzLnVybCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByb3V0ZXIuc3RhdGUodGhpcy5zdGF0ZS5uYW1lLCB0aGlzLnBhcmFtcywgdGhpcy5xdWVyeSwgdGhpcy5oYXNoLCAgdGhpcy5vcHRpb25zKTtcbiAgICB9KTtcblxuICAgIHRoaXMub25TdGF0ZUNoYW5nZWQgPSAoKSA9PiB0aGlzLnN0YXRlICYmIHRoaXMuc2V0QWN0aXZpdHkoKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RhdGUtY2hhbmdlZCcsIHRoaXMub25TdGF0ZUNoYW5nZWQpO1xuXG4gICAgdGhpcy5hdHRyKCdzdGF0ZScsIHRoaXMuc2V0U3RhdGUpO1xuICAgIHRoaXMuYXR0cigncGFyYW1zJywgdGhpcy5zZXRQYXJhbXMpO1xuICAgIHRoaXMuYXR0cigncXVlcnknLCB0aGlzLnNldFF1ZXJ5KTtcbiAgICB0aGlzLmF0dHIoJ2hhc2gnLCB0aGlzLnNldEhhc2gpO1xuICAgIHRoaXMuYXR0cignb3B0aW9ucycsIHRoaXMuc2V0T3B0aW9ucyk7XG4gICAgdGhpcy5hdHRyKCd1cmwnLCB0aGlzLnNldFVybCk7XG4gICAgdGhpcy5hdHRyKCdzdGF0ZScsIHRoaXMucmVzZXRIcmVmLCB7IGNhbGxPblN0YXJ0OiBmYWxzZSB9KTtcbiAgICB0aGlzLmF0dHIoJ3BhcmFtcycsIHRoaXMucmVzZXRIcmVmLCB7IGNhbGxPblN0YXJ0OiBmYWxzZSB9KTtcbiAgICB0aGlzLmF0dHIoJ3F1ZXJ5JywgdGhpcy5yZXNldEhyZWYsIHsgY2FsbE9uU3RhcnQ6IGZhbHNlIH0pO1xuICAgIHRoaXMuYXR0cignaGFzaCcsIHRoaXMucmVzZXRIcmVmLCB7IGNhbGxPblN0YXJ0OiBmYWxzZSB9KTtcbiAgICB0aGlzLmF0dHIoJ3VybCcsIHRoaXMucmVzZXRIcmVmLCB7IGNhbGxPblN0YXJ0OiBmYWxzZSB9KTtcbiAgICB0aGlzLnJlc2V0SHJlZigpO1xuICB9XG5cbiAgcmVtb3ZlZCgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3RhdGUtY2hhbmdlZCcsIHRoaXMub25TdGF0ZUNoYW5nZWQpO1xuICB9XG5cbiAgc2V0VXJsKHVybCkge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICB9XG5cbiAgc2V0U3RhdGUobmFtZSkge1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmdldFN0YXRlKG5hbWUpO1xuICAgIHRoaXMuc2V0QWN0aXZpdHkoKTtcbiAgfVxuXG4gIHNldEFjdGl2aXR5KCkge1xuICAgIHRoaXMuc2NvcGUuaXNBY3RpdmVTdGF0ZSA9IHJvdXRlci5pc0FjdGl2ZVN0YXRlKHRoaXMuc3RhdGUpO1xuICAgIHRoaXMuc2NvcGUuaW5BY3RpdmVTdGF0ZSA9IHJvdXRlci5pbkFjdGl2ZVN0YXRlKHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgc2V0UGFyYW1zKHBhcmFtcykge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9ICdvYmplY3QnIHx8ICFwYXJhbXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUm91dGVyIHN0YXRlIHBhcmFtcyBtdXN0IGJlIGFuIG9iamVjdGApO1xuICAgIH1cblxuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICB9XG5cbiAgc2V0UXVlcnkocXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9ICdvYmplY3QnIHx8ICFxdWVyeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb3V0ZXIgc3RhdGUgcXVlcnkgbXVzdCBiZSBhbiBvYmplY3RgKTtcbiAgICB9XG5cbiAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gIH1cblxuICBzZXRIYXNoKGhhc2gpIHtcbiAgICBpZiAodHlwZW9mIGhhc2ggIT0gJ3N0cmluZycgJiYgaGFzaCAhPT0gdW5kZWZpbmVkICYmIGhhc2ggIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUm91dGVyIHN0YXRlIGhhc2ggbXVzdCBiZSBhIHN0cmluZ3xudWxsYCk7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNoID0gaGFzaDtcbiAgfVxuXG4gIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPSAnb2JqZWN0JyB8fCAhb3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb3V0ZXIgc3RhdGUgb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdGApO1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICBnZXRTdGF0ZShuYW1lKSB7XG4gICAgbGV0IHN0YXRlID0gcm91dGVyLmdldFN0YXRlKG5hbWUpO1xuXG4gICAgaWYgKCFzdGF0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgZm91bmQgcm91dGVyIHN0YXRlIHdpdGggbmFtZSBcIiR7bmFtZX1cImApO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIHJlc2V0SHJlZigpIHtcbiAgICBpZiAodGhpcy51cmwpIHtcbiAgICAgIHRoaXMuYXR0cnMuaHJlZiA9IHRoaXMudXJsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuYXR0cnMuaHJlZiA9IHJvdXRlci5jcmVhdGVTdGF0ZVVybCh0aGlzLnN0YXRlLCB0aGlzLnBhcmFtcywgdGhpcy5xdWVyeSwgdGhpcy5oYXNoLCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=